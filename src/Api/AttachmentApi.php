<?php
/**
 * AttachmentApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Iplicit\ApiException;
use SynergiTech\Iplicit\Configuration;
use SynergiTech\Iplicit\HeaderSelector;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * AttachmentApi Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AttachmentApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAttachment' => [
            'multipart/form-data',
        ],
        'deleteAttachment' => [
            'application/json',
        ],
        'getAttachmentDetails' => [
            'application/json',
        ],
        'getAttachmentFile' => [
            'application/json',
        ],
        'getAttachmentGroups' => [
            'application/json',
        ],
        'getAttachmentsInGroup' => [
            'application/json',
        ],
        'updateAttachmentDetails' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createAttachment
     *
     * Create a new attachment on a specified source item
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId id of the source item to attach to (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SplFileObject $file Attachment file information (required)
     * @param  string|null $description Attachment description (optional)
     * @param  \DateTime|null $documentDate Attachment document date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAttachment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function createAttachment(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        \SplFileObject $file,
        ?string $description = null,
        ?\DateTime $documentDate = null,
        string $contentType = self::contentTypes['createAttachment'][0]
    ): string
    {
        list($response) = $this->createAttachmentWithHttpInfo($attributeRef, $sourceId, $attachmentGroupId, $domain, $file, $description, $documentDate, $contentType);
        return $response;
    }

    /**
     * Operation createAttachmentWithHttpInfo
     *
     * Create a new attachment on a specified source item
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId id of the source item to attach to (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SplFileObject $file Attachment file information (required)
     * @param  string|null $description Attachment description (optional)
     * @param  \DateTime|null $documentDate Attachment document date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAttachment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAttachmentWithHttpInfo(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        \SplFileObject $file,
        ?string $description = null,
        ?\DateTime $documentDate = null,
        string $contentType = self::contentTypes['createAttachment'][0]
    ): array
    {
        $request = $this->createAttachmentRequest($attributeRef, $sourceId, $attachmentGroupId, $domain, $file, $description, $documentDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAttachmentAsync
     *
     * Create a new attachment on a specified source item
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId id of the source item to attach to (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SplFileObject $file Attachment file information (required)
     * @param  string|null $description Attachment description (optional)
     * @param  \DateTime|null $documentDate Attachment document date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAttachmentAsync(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        \SplFileObject $file,
        ?string $description = null,
        ?\DateTime $documentDate = null,
        string $contentType = self::contentTypes['createAttachment'][0]
    ): PromiseInterface
    {
        return $this->createAttachmentAsyncWithHttpInfo($attributeRef, $sourceId, $attachmentGroupId, $domain, $file, $description, $documentDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAttachmentAsyncWithHttpInfo
     *
     * Create a new attachment on a specified source item
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId id of the source item to attach to (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SplFileObject $file Attachment file information (required)
     * @param  string|null $description Attachment description (optional)
     * @param  \DateTime|null $documentDate Attachment document date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAttachmentAsyncWithHttpInfo(
        $attributeRef,
        $sourceId,
        $attachmentGroupId,
        $domain,
        $file,
        $description = null,
        $documentDate = null,
        string $contentType = self::contentTypes['createAttachment'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->createAttachmentRequest($attributeRef, $sourceId, $attachmentGroupId, $domain, $file, $description, $documentDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAttachment'
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId id of the source item to attach to (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SplFileObject $file Attachment file information (required)
     * @param  string|null $description Attachment description (optional)
     * @param  \DateTime|null $documentDate Attachment document date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAttachmentRequest(
        $attributeRef,
        $sourceId,
        $attachmentGroupId,
        $domain,
        $file,
        $description = null,
        $documentDate = null,
        string $contentType = self::contentTypes['createAttachment'][0]
    ): Request
    {

        // verify the required parameter 'attributeRef' is set
        if ($attributeRef === null || (is_array($attributeRef) && count($attributeRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attributeRef when calling createAttachment'
            );
        }

        // verify the required parameter 'sourceId' is set
        if ($sourceId === null || (is_array($sourceId) && count($sourceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sourceId when calling createAttachment'
            );
        }

        // verify the required parameter 'attachmentGroupId' is set
        if ($attachmentGroupId === null || (is_array($attachmentGroupId) && count($attachmentGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentGroupId when calling createAttachment'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling createAttachment'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $file when calling createAttachment'
            );
        }

        if ($description !== null && strlen($description) > 250) {
            throw new InvalidArgumentException('invalid length for "$description" when calling AttachmentApi.createAttachment, must be smaller than or equal to 250.');
        }



        $resourcePath = '/api/Attachment/create/{attributeRef}/{sourceId}/AttachmentGroup/{attachmentGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attributeRef !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeRef' . '}',
                ObjectSerializer::toPathValue($attributeRef),
                $resourcePath
            );
        }
        // path params
        if ($sourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($sourceId),
                $resourcePath
            );
        }
        // path params
        if ($attachmentGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentGroupId' . '}',
                ObjectSerializer::toPathValue($attachmentGroupId),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['File'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['File'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }
        // form params
        if ($description !== null) {
            $formParams['Description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($documentDate !== null) {
            $formParams['DocumentDate'] = ObjectSerializer::toFormValue($documentDate);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAttachment
     *
     * Delete an attachment
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAttachment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function deleteAttachment(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['deleteAttachment'][0]
    ): string
    {
        list($response) = $this->deleteAttachmentWithHttpInfo($attachmentId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation deleteAttachmentWithHttpInfo
     *
     * Delete an attachment
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAttachment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAttachmentWithHttpInfo(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['deleteAttachment'][0]
    ): array
    {
        $request = $this->deleteAttachmentRequest($attachmentId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAttachmentAsync
     *
     * Delete an attachment
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAttachmentAsync(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['deleteAttachment'][0]
    ): PromiseInterface
    {
        return $this->deleteAttachmentAsyncWithHttpInfo($attachmentId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAttachmentAsyncWithHttpInfo
     *
     * Delete an attachment
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAttachmentAsyncWithHttpInfo(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['deleteAttachment'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->deleteAttachmentRequest($attachmentId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAttachment'
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAttachment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAttachmentRequest(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['deleteAttachment'][0]
    ): Request
    {

        // verify the required parameter 'attachmentId' is set
        if ($attachmentId === null || (is_array($attachmentId) && count($attachmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentId when calling deleteAttachment'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteAttachment'
            );
        }


        $resourcePath = '/api/Attachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attachmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentDetails
     *
     * Get attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\AttachmentRead
     */
    public function getAttachmentDetails(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentDetails'][0]
    ): \SynergiTech\Iplicit\Model\AttachmentRead
    {
        list($response) = $this->getAttachmentDetailsWithHttpInfo($attachmentId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getAttachmentDetailsWithHttpInfo
     *
     * Get attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\AttachmentRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentDetailsWithHttpInfo(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentDetails'][0]
    ): array
    {
        $request = $this->getAttachmentDetailsRequest($attachmentId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\AttachmentRead', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\AttachmentRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\AttachmentRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\AttachmentRead';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\AttachmentRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentDetailsAsync
     *
     * Get attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentDetailsAsync(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentDetails'][0]
    ): PromiseInterface
    {
        return $this->getAttachmentDetailsAsyncWithHttpInfo($attachmentId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentDetailsAsyncWithHttpInfo
     *
     * Get attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentDetailsAsyncWithHttpInfo(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['getAttachmentDetails'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\AttachmentRead';
        $request = $this->getAttachmentDetailsRequest($attachmentId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentDetails'
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentDetailsRequest(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['getAttachmentDetails'][0]
    ): Request
    {

        // verify the required parameter 'attachmentId' is set
        if ($attachmentId === null || (is_array($attachmentId) && count($attachmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentId when calling getAttachmentDetails'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getAttachmentDetails'
            );
        }


        $resourcePath = '/api/Attachment/{attachmentId}/Details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attachmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentFile
     *
     * Get attachment file
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentFile'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject
     */
    public function getAttachmentFile(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentFile'][0]
    ): \SplFileObject
    {
        list($response) = $this->getAttachmentFileWithHttpInfo($attachmentId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getAttachmentFileWithHttpInfo
     *
     * Get attachment file
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentFile'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentFileWithHttpInfo(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentFile'][0]
    ): array
    {
        $request = $this->getAttachmentFileRequest($attachmentId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SplFileObject', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentFileAsync
     *
     * Get attachment file
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentFile'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentFileAsync(
        string $attachmentId,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentFile'][0]
    ): PromiseInterface
    {
        return $this->getAttachmentFileAsyncWithHttpInfo($attachmentId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentFileAsyncWithHttpInfo
     *
     * Get attachment file
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentFile'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentFileAsyncWithHttpInfo(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['getAttachmentFile'][0]
    ): PromiseInterface
    {
        $returnType = '\SplFileObject';
        $request = $this->getAttachmentFileRequest($attachmentId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentFile'
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentFile'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentFileRequest(
        $attachmentId,
        $domain,
        string $contentType = self::contentTypes['getAttachmentFile'][0]
    ): Request
    {

        // verify the required parameter 'attachmentId' is set
        if ($attachmentId === null || (is_array($attachmentId) && count($attachmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentId when calling getAttachmentFile'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getAttachmentFile'
            );
        }


        $resourcePath = '/api/Attachment/{attachmentId}/File';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attachmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentGroups
     *
     * Get a list of attachment groups defined on a specified attribute.
     *
     * @param  string $attributeRef Id or type name of the attribute (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\AttachmentGroupRead[]
     */
    public function getAttachmentGroups(
        string $attributeRef,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentGroups'][0]
    ): array
    {
        list($response) = $this->getAttachmentGroupsWithHttpInfo($attributeRef, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getAttachmentGroupsWithHttpInfo
     *
     * Get a list of attachment groups defined on a specified attribute.
     *
     * @param  string $attributeRef Id or type name of the attribute (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\AttachmentGroupRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentGroupsWithHttpInfo(
        string $attributeRef,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentGroups'][0]
    ): array
    {
        $request = $this->getAttachmentGroupsRequest($attributeRef, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\AttachmentGroupRead[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\AttachmentGroupRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\AttachmentGroupRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\AttachmentGroupRead[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\AttachmentGroupRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentGroupsAsync
     *
     * Get a list of attachment groups defined on a specified attribute.
     *
     * @param  string $attributeRef Id or type name of the attribute (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentGroupsAsync(
        string $attributeRef,
        string $domain,
        string $contentType = self::contentTypes['getAttachmentGroups'][0]
    ): PromiseInterface
    {
        return $this->getAttachmentGroupsAsyncWithHttpInfo($attributeRef, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentGroupsAsyncWithHttpInfo
     *
     * Get a list of attachment groups defined on a specified attribute.
     *
     * @param  string $attributeRef Id or type name of the attribute (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentGroupsAsyncWithHttpInfo(
        $attributeRef,
        $domain,
        string $contentType = self::contentTypes['getAttachmentGroups'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\AttachmentGroupRead[]';
        $request = $this->getAttachmentGroupsRequest($attributeRef, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentGroups'
     *
     * @param  string $attributeRef Id or type name of the attribute (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentGroupsRequest(
        $attributeRef,
        $domain,
        string $contentType = self::contentTypes['getAttachmentGroups'][0]
    ): Request
    {

        // verify the required parameter 'attributeRef' is set
        if ($attributeRef === null || (is_array($attributeRef) && count($attributeRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attributeRef when calling getAttachmentGroups'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getAttachmentGroups'
            );
        }


        $resourcePath = '/api/Attribute/{attributeRef}/AttachmentGroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attributeRef !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeRef' . '}',
                ObjectSerializer::toPathValue($attributeRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentsInGroup
     *
     * Get a list of attachments in an attachment group on a specified source item with a search filter.
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId Id of the source item (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \DateTime|null $createdFrom Filter attachments created after a specific date time (optional)
     * @param  string|null $fileName Filter attachments with a specific file name (optional)
     * @param  int|null $take The number of records to return (optional, default to 100)
     * @param  int|null $skip The number of records to skip (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentsInGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\AttachmentRead[]
     */
    public function getAttachmentsInGroup(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        ?\DateTime $createdFrom = null,
        ?string $fileName = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getAttachmentsInGroup'][0]
    ): array
    {
        list($response) = $this->getAttachmentsInGroupWithHttpInfo($attributeRef, $sourceId, $attachmentGroupId, $domain, $createdFrom, $fileName, $take, $skip, $contentType);
        return $response;
    }

    /**
     * Operation getAttachmentsInGroupWithHttpInfo
     *
     * Get a list of attachments in an attachment group on a specified source item with a search filter.
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId Id of the source item (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \DateTime|null $createdFrom Filter attachments created after a specific date time (optional)
     * @param  string|null $fileName Filter attachments with a specific file name (optional)
     * @param  int|null $take The number of records to return (optional, default to 100)
     * @param  int|null $skip The number of records to skip (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentsInGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\AttachmentRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsInGroupWithHttpInfo(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        ?\DateTime $createdFrom = null,
        ?string $fileName = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getAttachmentsInGroup'][0]
    ): array
    {
        $request = $this->getAttachmentsInGroupRequest($attributeRef, $sourceId, $attachmentGroupId, $domain, $createdFrom, $fileName, $take, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\AttachmentRead[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\AttachmentRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\AttachmentRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\AttachmentRead[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\AttachmentRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsInGroupAsync
     *
     * Get a list of attachments in an attachment group on a specified source item with a search filter.
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId Id of the source item (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \DateTime|null $createdFrom Filter attachments created after a specific date time (optional)
     * @param  string|null $fileName Filter attachments with a specific file name (optional)
     * @param  int|null $take The number of records to return (optional, default to 100)
     * @param  int|null $skip The number of records to skip (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentsInGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentsInGroupAsync(
        string $attributeRef,
        string $sourceId,
        string $attachmentGroupId,
        string $domain,
        ?\DateTime $createdFrom = null,
        ?string $fileName = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getAttachmentsInGroup'][0]
    ): PromiseInterface
    {
        return $this->getAttachmentsInGroupAsyncWithHttpInfo($attributeRef, $sourceId, $attachmentGroupId, $domain, $createdFrom, $fileName, $take, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsInGroupAsyncWithHttpInfo
     *
     * Get a list of attachments in an attachment group on a specified source item with a search filter.
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId Id of the source item (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \DateTime|null $createdFrom Filter attachments created after a specific date time (optional)
     * @param  string|null $fileName Filter attachments with a specific file name (optional)
     * @param  int|null $take The number of records to return (optional, default to 100)
     * @param  int|null $skip The number of records to skip (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentsInGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAttachmentsInGroupAsyncWithHttpInfo(
        $attributeRef,
        $sourceId,
        $attachmentGroupId,
        $domain,
        $createdFrom = null,
        $fileName = null,
        $take = 100,
        $skip = 0,
        string $contentType = self::contentTypes['getAttachmentsInGroup'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\AttachmentRead[]';
        $request = $this->getAttachmentsInGroupRequest($attributeRef, $sourceId, $attachmentGroupId, $domain, $createdFrom, $fileName, $take, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentsInGroup'
     *
     * @param  string $attributeRef Id or name of the attribute (required)
     * @param  string $sourceId Id of the source item (required)
     * @param  string $attachmentGroupId Id of the attachment group. Use special value &#39;other&#39; to get attachments without a group. (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \DateTime|null $createdFrom Filter attachments created after a specific date time (optional)
     * @param  string|null $fileName Filter attachments with a specific file name (optional)
     * @param  int|null $take The number of records to return (optional, default to 100)
     * @param  int|null $skip The number of records to skip (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentsInGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentsInGroupRequest(
        $attributeRef,
        $sourceId,
        $attachmentGroupId,
        $domain,
        $createdFrom = null,
        $fileName = null,
        $take = 100,
        $skip = 0,
        string $contentType = self::contentTypes['getAttachmentsInGroup'][0]
    ): Request
    {

        // verify the required parameter 'attributeRef' is set
        if ($attributeRef === null || (is_array($attributeRef) && count($attributeRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attributeRef when calling getAttachmentsInGroup'
            );
        }

        // verify the required parameter 'sourceId' is set
        if ($sourceId === null || (is_array($sourceId) && count($sourceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sourceId when calling getAttachmentsInGroup'
            );
        }

        // verify the required parameter 'attachmentGroupId' is set
        if ($attachmentGroupId === null || (is_array($attachmentGroupId) && count($attachmentGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentGroupId when calling getAttachmentsInGroup'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getAttachmentsInGroup'
            );
        }






        $resourcePath = '/api/Attachment/search/{attributeRef}/{sourceId}/AttachmentGroup/{attachmentGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdFrom,
            'createdFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fileName,
            'fileName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attributeRef !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeRef' . '}',
                ObjectSerializer::toPathValue($attributeRef),
                $resourcePath
            );
        }
        // path params
        if ($sourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($sourceId),
                $resourcePath
            );
        }
        // path params
        if ($attachmentGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentGroupId' . '}',
                ObjectSerializer::toPathValue($attachmentGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAttachmentDetails
     *
     * Update attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\AttachmentUpdate|null $attachmentUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAttachmentDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function updateAttachmentDetails(
        string $attachmentId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\AttachmentUpdate $attachmentUpdate = null,
        string $contentType = self::contentTypes['updateAttachmentDetails'][0]
    ): string
    {
        list($response) = $this->updateAttachmentDetailsWithHttpInfo($attachmentId, $domain, $attachmentUpdate, $contentType);
        return $response;
    }

    /**
     * Operation updateAttachmentDetailsWithHttpInfo
     *
     * Update attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\AttachmentUpdate|null $attachmentUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAttachmentDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAttachmentDetailsWithHttpInfo(
        string $attachmentId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\AttachmentUpdate $attachmentUpdate = null,
        string $contentType = self::contentTypes['updateAttachmentDetails'][0]
    ): array
    {
        $request = $this->updateAttachmentDetailsRequest($attachmentId, $domain, $attachmentUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAttachmentDetailsAsync
     *
     * Update attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\AttachmentUpdate|null $attachmentUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAttachmentDetailsAsync(
        string $attachmentId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\AttachmentUpdate $attachmentUpdate = null,
        string $contentType = self::contentTypes['updateAttachmentDetails'][0]
    ): PromiseInterface
    {
        return $this->updateAttachmentDetailsAsyncWithHttpInfo($attachmentId, $domain, $attachmentUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAttachmentDetailsAsyncWithHttpInfo
     *
     * Update attachment details
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\AttachmentUpdate|null $attachmentUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAttachmentDetailsAsyncWithHttpInfo(
        $attachmentId,
        $domain,
        $attachmentUpdate = null,
        string $contentType = self::contentTypes['updateAttachmentDetails'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->updateAttachmentDetailsRequest($attachmentId, $domain, $attachmentUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAttachmentDetails'
     *
     * @param  string $attachmentId Id of the attachment (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\AttachmentUpdate|null $attachmentUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAttachmentDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAttachmentDetailsRequest(
        $attachmentId,
        $domain,
        $attachmentUpdate = null,
        string $contentType = self::contentTypes['updateAttachmentDetails'][0]
    ): Request
    {

        // verify the required parameter 'attachmentId' is set
        if ($attachmentId === null || (is_array($attachmentId) && count($attachmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attachmentId when calling updateAttachmentDetails'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling updateAttachmentDetails'
            );
        }



        $resourcePath = '/api/Attachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($attachmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($attachmentUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($attachmentUpdate));
            } else {
                $httpBody = $attachmentUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
