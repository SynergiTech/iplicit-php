<?php
/**
 * CatalogApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Iplicit\ApiException;
use SynergiTech\Iplicit\Configuration;
use SynergiTech\Iplicit\HeaderSelector;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CatalogApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addCatalogItem' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteCatalogItem' => [
            'application/json',
        ],
        'getAllCatalogs' => [
            'application/json',
        ],
        'getCatalog' => [
            'application/json',
        ],
        'lockCatalogItem' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'replaceCatalogItems' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'unlockCatalogItem' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateCatalogItem' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addCatalogItem
     *
     * Add an item to a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function addCatalogItem(
        string $catalogName,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemCreate $catalogItemCreate = null,
        string $contentType = self::contentTypes['addCatalogItem'][0]
    ): void
    {
        $this->addCatalogItemWithHttpInfo($catalogName, $domain, $catalogItemCreate, $contentType);
    }

    /**
     * Operation addCatalogItemWithHttpInfo
     *
     * Add an item to a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCatalogItemWithHttpInfo(
        string $catalogName,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemCreate $catalogItemCreate = null,
        string $contentType = self::contentTypes['addCatalogItem'][0]
    ): array
    {
        $request = $this->addCatalogItemRequest($catalogName, $domain, $catalogItemCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addCatalogItemAsync
     *
     * Add an item to a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addCatalogItemAsync(
        string $catalogName,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemCreate $catalogItemCreate = null,
        string $contentType = self::contentTypes['addCatalogItem'][0]
    ): PromiseInterface
    {
        return $this->addCatalogItemAsyncWithHttpInfo($catalogName, $domain, $catalogItemCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCatalogItemAsyncWithHttpInfo
     *
     * Add an item to a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addCatalogItemAsyncWithHttpInfo(
        $catalogName,
        $domain,
        $catalogItemCreate = null,
        string $contentType = self::contentTypes['addCatalogItem'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->addCatalogItemRequest($catalogName, $domain, $catalogItemCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCatalogItem'
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCatalogItemRequest(
        $catalogName,
        $domain,
        $catalogItemCreate = null,
        string $contentType = self::contentTypes['addCatalogItem'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling addCatalogItem'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling addCatalogItem'
            );
        }



        $resourcePath = '/api/Catalog/{catalogName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($catalogItemCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($catalogItemCreate));
            } else {
                $httpBody = $catalogItemCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCatalogItem
     *
     * Delete an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteCatalogItem(
        string $catalogName,
        string $idOrCode,
        string $domain,
        string $contentType = self::contentTypes['deleteCatalogItem'][0]
    ): void
    {
        $this->deleteCatalogItemWithHttpInfo($catalogName, $idOrCode, $domain, $contentType);
    }

    /**
     * Operation deleteCatalogItemWithHttpInfo
     *
     * Delete an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCatalogItemWithHttpInfo(
        string $catalogName,
        string $idOrCode,
        string $domain,
        string $contentType = self::contentTypes['deleteCatalogItem'][0]
    ): array
    {
        $request = $this->deleteCatalogItemRequest($catalogName, $idOrCode, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCatalogItemAsync
     *
     * Delete an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCatalogItemAsync(
        string $catalogName,
        string $idOrCode,
        string $domain,
        string $contentType = self::contentTypes['deleteCatalogItem'][0]
    ): PromiseInterface
    {
        return $this->deleteCatalogItemAsyncWithHttpInfo($catalogName, $idOrCode, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCatalogItemAsyncWithHttpInfo
     *
     * Delete an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCatalogItemAsyncWithHttpInfo(
        $catalogName,
        $idOrCode,
        $domain,
        string $contentType = self::contentTypes['deleteCatalogItem'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteCatalogItemRequest($catalogName, $idOrCode, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCatalogItem'
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCatalogItemRequest(
        $catalogName,
        $idOrCode,
        $domain,
        string $contentType = self::contentTypes['deleteCatalogItem'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling deleteCatalogItem'
            );
        }

        // verify the required parameter 'idOrCode' is set
        if ($idOrCode === null || (is_array($idOrCode) && count($idOrCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $idOrCode when calling deleteCatalogItem'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteCatalogItem'
            );
        }


        $resourcePath = '/api/Catalog/{catalogName}/{idOrCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }
        // path params
        if ($idOrCode !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrCode' . '}',
                ObjectSerializer::toPathValue($idOrCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCatalogs
     *
     * Get a list of all catalogs
     *
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCatalogs'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\CatalogItem[]
     */
    public function getAllCatalogs(
        string $domain,
        string $contentType = self::contentTypes['getAllCatalogs'][0]
    ): array
    {
        list($response) = $this->getAllCatalogsWithHttpInfo($domain, $contentType);
        return $response;
    }

    /**
     * Operation getAllCatalogsWithHttpInfo
     *
     * Get a list of all catalogs
     *
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCatalogs'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\CatalogItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCatalogsWithHttpInfo(
        string $domain,
        string $contentType = self::contentTypes['getAllCatalogs'][0]
    ): array
    {
        $request = $this->getAllCatalogsRequest($domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\CatalogItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\CatalogItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\CatalogItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\CatalogItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\CatalogItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCatalogsAsync
     *
     * Get a list of all catalogs
     *
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCatalogs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllCatalogsAsync(
        string $domain,
        string $contentType = self::contentTypes['getAllCatalogs'][0]
    ): PromiseInterface
    {
        return $this->getAllCatalogsAsyncWithHttpInfo($domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCatalogsAsyncWithHttpInfo
     *
     * Get a list of all catalogs
     *
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCatalogs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllCatalogsAsyncWithHttpInfo(
        $domain,
        string $contentType = self::contentTypes['getAllCatalogs'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\CatalogItem[]';
        $request = $this->getAllCatalogsRequest($domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCatalogs'
     *
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCatalogs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllCatalogsRequest(
        $domain,
        string $contentType = self::contentTypes['getAllCatalogs'][0]
    ): Request
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getAllCatalogs'
            );
        }


        $resourcePath = '/api/Catalog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCatalog
     *
     * Get all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCatalog'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\CatalogItem[]
     */
    public function getCatalog(
        string $catalogName,
        string $domain,
        string $contentType = self::contentTypes['getCatalog'][0]
    ): array
    {
        list($response) = $this->getCatalogWithHttpInfo($catalogName, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getCatalogWithHttpInfo
     *
     * Get all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCatalog'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\CatalogItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCatalogWithHttpInfo(
        string $catalogName,
        string $domain,
        string $contentType = self::contentTypes['getCatalog'][0]
    ): array
    {
        $request = $this->getCatalogRequest($catalogName, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\CatalogItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\CatalogItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\CatalogItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\CatalogItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\CatalogItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCatalogAsync
     *
     * Get all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCatalog'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCatalogAsync(
        string $catalogName,
        string $domain,
        string $contentType = self::contentTypes['getCatalog'][0]
    ): PromiseInterface
    {
        return $this->getCatalogAsyncWithHttpInfo($catalogName, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCatalogAsyncWithHttpInfo
     *
     * Get all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCatalog'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCatalogAsyncWithHttpInfo(
        $catalogName,
        $domain,
        string $contentType = self::contentTypes['getCatalog'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\CatalogItem[]';
        $request = $this->getCatalogRequest($catalogName, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCatalog'
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCatalog'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCatalogRequest(
        $catalogName,
        $domain,
        string $contentType = self::contentTypes['getCatalog'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling getCatalog'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getCatalog'
            );
        }


        $resourcePath = '/api/Catalog/{catalogName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lockCatalogItem
     *
     * Lock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function lockCatalogItem(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['lockCatalogItem'][0]
    ): void
    {
        $this->lockCatalogItemWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItem, $contentType);
    }

    /**
     * Operation lockCatalogItemWithHttpInfo
     *
     * Lock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lockCatalogItemWithHttpInfo(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['lockCatalogItem'][0]
    ): array
    {
        $request = $this->lockCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItem, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lockCatalogItemAsync
     *
     * Lock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockCatalogItemAsync(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['lockCatalogItem'][0]
    ): PromiseInterface
    {
        return $this->lockCatalogItemAsyncWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItem, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lockCatalogItemAsyncWithHttpInfo
     *
     * Lock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockCatalogItemAsyncWithHttpInfo(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItem = null,
        string $contentType = self::contentTypes['lockCatalogItem'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->lockCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItem, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lockCatalogItem'
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lockCatalogItemRequest(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItem = null,
        string $contentType = self::contentTypes['lockCatalogItem'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling lockCatalogItem'
            );
        }

        // verify the required parameter 'idOrCode' is set
        if ($idOrCode === null || (is_array($idOrCode) && count($idOrCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $idOrCode when calling lockCatalogItem'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling lockCatalogItem'
            );
        }



        $resourcePath = '/api/Catalog/{catalogName}/{idOrCode}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }
        // path params
        if ($idOrCode !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrCode' . '}',
                ObjectSerializer::toPathValue($idOrCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($catalogItem)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($catalogItem));
            } else {
                $httpBody = $catalogItem;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceCatalogItems
     *
     * Replace all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate[]|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceCatalogItems'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function replaceCatalogItems(
        string $catalogName,
        string $domain,
        ?array $catalogItemCreate = null,
        string $contentType = self::contentTypes['replaceCatalogItems'][0]
    ): void
    {
        $this->replaceCatalogItemsWithHttpInfo($catalogName, $domain, $catalogItemCreate, $contentType);
    }

    /**
     * Operation replaceCatalogItemsWithHttpInfo
     *
     * Replace all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate[]|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceCatalogItems'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceCatalogItemsWithHttpInfo(
        string $catalogName,
        string $domain,
        ?array $catalogItemCreate = null,
        string $contentType = self::contentTypes['replaceCatalogItems'][0]
    ): array
    {
        $request = $this->replaceCatalogItemsRequest($catalogName, $domain, $catalogItemCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation replaceCatalogItemsAsync
     *
     * Replace all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate[]|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceCatalogItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceCatalogItemsAsync(
        string $catalogName,
        string $domain,
        ?array $catalogItemCreate = null,
        string $contentType = self::contentTypes['replaceCatalogItems'][0]
    ): PromiseInterface
    {
        return $this->replaceCatalogItemsAsyncWithHttpInfo($catalogName, $domain, $catalogItemCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceCatalogItemsAsyncWithHttpInfo
     *
     * Replace all items in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate[]|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceCatalogItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceCatalogItemsAsyncWithHttpInfo(
        $catalogName,
        $domain,
        $catalogItemCreate = null,
        string $contentType = self::contentTypes['replaceCatalogItems'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->replaceCatalogItemsRequest($catalogName, $domain, $catalogItemCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceCatalogItems'
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemCreate[]|null $catalogItemCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceCatalogItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceCatalogItemsRequest(
        $catalogName,
        $domain,
        $catalogItemCreate = null,
        string $contentType = self::contentTypes['replaceCatalogItems'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling replaceCatalogItems'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling replaceCatalogItems'
            );
        }



        $resourcePath = '/api/Catalog/{catalogName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($catalogItemCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($catalogItemCreate));
            } else {
                $httpBody = $catalogItemCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlockCatalogItem
     *
     * Unlock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function unlockCatalogItem(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['unlockCatalogItem'][0]
    ): void
    {
        $this->unlockCatalogItemWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItem, $contentType);
    }

    /**
     * Operation unlockCatalogItemWithHttpInfo
     *
     * Unlock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlockCatalogItemWithHttpInfo(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['unlockCatalogItem'][0]
    ): array
    {
        $request = $this->unlockCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItem, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unlockCatalogItemAsync
     *
     * Unlock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockCatalogItemAsync(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItem $catalogItem = null,
        string $contentType = self::contentTypes['unlockCatalogItem'][0]
    ): PromiseInterface
    {
        return $this->unlockCatalogItemAsyncWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItem, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlockCatalogItemAsyncWithHttpInfo
     *
     * Unlock a catalog item
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockCatalogItemAsyncWithHttpInfo(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItem = null,
        string $contentType = self::contentTypes['unlockCatalogItem'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->unlockCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItem, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlockCatalogItem'
     *
     * @param  string $catalogName Name of the catalog to update (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItem|null $catalogItem  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unlockCatalogItemRequest(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItem = null,
        string $contentType = self::contentTypes['unlockCatalogItem'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling unlockCatalogItem'
            );
        }

        // verify the required parameter 'idOrCode' is set
        if ($idOrCode === null || (is_array($idOrCode) && count($idOrCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $idOrCode when calling unlockCatalogItem'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling unlockCatalogItem'
            );
        }



        $resourcePath = '/api/Catalog/{catalogName}/{idOrCode}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }
        // path params
        if ($idOrCode !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrCode' . '}',
                ObjectSerializer::toPathValue($idOrCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($catalogItem)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($catalogItem));
            } else {
                $httpBody = $catalogItem;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCatalogItem
     *
     * Update an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemUpdate|null $catalogItemUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function updateCatalogItem(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemUpdate $catalogItemUpdate = null,
        string $contentType = self::contentTypes['updateCatalogItem'][0]
    ): void
    {
        $this->updateCatalogItemWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItemUpdate, $contentType);
    }

    /**
     * Operation updateCatalogItemWithHttpInfo
     *
     * Update an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemUpdate|null $catalogItemUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCatalogItem'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCatalogItemWithHttpInfo(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemUpdate $catalogItemUpdate = null,
        string $contentType = self::contentTypes['updateCatalogItem'][0]
    ): array
    {
        $request = $this->updateCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItemUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateCatalogItemAsync
     *
     * Update an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemUpdate|null $catalogItemUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCatalogItemAsync(
        string $catalogName,
        string $idOrCode,
        string $domain,
        ?\SynergiTech\Iplicit\Model\CatalogItemUpdate $catalogItemUpdate = null,
        string $contentType = self::contentTypes['updateCatalogItem'][0]
    ): PromiseInterface
    {
        return $this->updateCatalogItemAsyncWithHttpInfo($catalogName, $idOrCode, $domain, $catalogItemUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCatalogItemAsyncWithHttpInfo
     *
     * Update an item in a catalog
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemUpdate|null $catalogItemUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCatalogItemAsyncWithHttpInfo(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItemUpdate = null,
        string $contentType = self::contentTypes['updateCatalogItem'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->updateCatalogItemRequest($catalogName, $idOrCode, $domain, $catalogItemUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCatalogItem'
     *
     * @param  string $catalogName Name of the catalog (required)
     * @param  string $idOrCode Id or code of the catalog item (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\CatalogItemUpdate|null $catalogItemUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCatalogItem'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCatalogItemRequest(
        $catalogName,
        $idOrCode,
        $domain,
        $catalogItemUpdate = null,
        string $contentType = self::contentTypes['updateCatalogItem'][0]
    ): Request
    {

        // verify the required parameter 'catalogName' is set
        if ($catalogName === null || (is_array($catalogName) && count($catalogName) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $catalogName when calling updateCatalogItem'
            );
        }

        // verify the required parameter 'idOrCode' is set
        if ($idOrCode === null || (is_array($idOrCode) && count($idOrCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $idOrCode when calling updateCatalogItem'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling updateCatalogItem'
            );
        }



        $resourcePath = '/api/Catalog/{catalogName}/{idOrCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($catalogName !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogName' . '}',
                ObjectSerializer::toPathValue($catalogName),
                $resourcePath
            );
        }
        // path params
        if ($idOrCode !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrCode' . '}',
                ObjectSerializer::toPathValue($idOrCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($catalogItemUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($catalogItemUpdate));
            } else {
                $httpBody = $catalogItemUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
