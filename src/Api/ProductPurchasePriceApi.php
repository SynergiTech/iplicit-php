<?php
/**
 * ProductPurchasePriceApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Iplicit\ApiException;
use SynergiTech\Iplicit\Configuration;
use SynergiTech\Iplicit\HeaderSelector;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ProductPurchasePriceApi Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductPurchasePriceApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createProductPurchasePrice' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteProductPurchasePrice' => [
            'application/json',
        ],
        'getProductPurchasePrice' => [
            'application/json',
        ],
        'getProductPurchasePrices' => [
            'application/json',
        ],
        'lockProductPurchasePrice' => [
            'application/json',
        ],
        'unlockProductPurchasePrice' => [
            'application/json',
        ],
        'updateProductPurchasePrice' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createProductPurchasePrice
     *
     * Create a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceCreate|null $productPurchasePriceCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function createProductPurchasePrice(
        string $productRef,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceCreate $productPurchasePriceCreate = null,
        string $contentType = self::contentTypes['createProductPurchasePrice'][0]
    ): string
    {
        list($response) = $this->createProductPurchasePriceWithHttpInfo($productRef, $domain, $productPurchasePriceCreate, $contentType);
        return $response;
    }

    /**
     * Operation createProductPurchasePriceWithHttpInfo
     *
     * Create a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceCreate|null $productPurchasePriceCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceCreate $productPurchasePriceCreate = null,
        string $contentType = self::contentTypes['createProductPurchasePrice'][0]
    ): array
    {
        $request = $this->createProductPurchasePriceRequest($productRef, $domain, $productPurchasePriceCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductPurchasePriceAsync
     *
     * Create a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceCreate|null $productPurchasePriceCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createProductPurchasePriceAsync(
        string $productRef,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceCreate $productPurchasePriceCreate = null,
        string $contentType = self::contentTypes['createProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->createProductPurchasePriceAsyncWithHttpInfo($productRef, $domain, $productPurchasePriceCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductPurchasePriceAsyncWithHttpInfo
     *
     * Create a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceCreate|null $productPurchasePriceCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $domain,
        $productPurchasePriceCreate = null,
        string $contentType = self::contentTypes['createProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->createProductPurchasePriceRequest($productRef, $domain, $productPurchasePriceCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceCreate|null $productPurchasePriceCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProductPurchasePriceRequest(
        $productRef,
        $domain,
        $productPurchasePriceCreate = null,
        string $contentType = self::contentTypes['createProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling createProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling createProductPurchasePrice'
            );
        }



        $resourcePath = '/api/Product/{productRef}/PurchasePrice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($productPurchasePriceCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($productPurchasePriceCreate));
            } else {
                $httpBody = $productPurchasePriceCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProductPurchasePrice
     *
     * Delete a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function deleteProductPurchasePrice(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['deleteProductPurchasePrice'][0]
    ): string
    {
        list($response) = $this->deleteProductPurchasePriceWithHttpInfo($productRef, $priceId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation deleteProductPurchasePriceWithHttpInfo
     *
     * Delete a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['deleteProductPurchasePrice'][0]
    ): array
    {
        $request = $this->deleteProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductPurchasePriceAsync
     *
     * Delete a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProductPurchasePriceAsync(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['deleteProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->deleteProductPurchasePriceAsyncWithHttpInfo($productRef, $priceId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductPurchasePriceAsyncWithHttpInfo
     *
     * Delete a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['deleteProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->deleteProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductPurchasePriceRequest(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['deleteProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling deleteProductPurchasePrice'
            );
        }

        // verify the required parameter 'priceId' is set
        if ($priceId === null || (is_array($priceId) && count($priceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $priceId when calling deleteProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteProductPurchasePrice'
            );
        }


        $resourcePath = '/api/Product/{productRef}/PurchasePrice/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductPurchasePrice
     *
     * Get a product purchase price from priceId
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\ProductPurchasePriceRead
     */
    public function getProductPurchasePrice(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrice'][0]
    ): \SynergiTech\Iplicit\Model\ProductPurchasePriceRead
    {
        list($response) = $this->getProductPurchasePriceWithHttpInfo($productRef, $priceId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getProductPurchasePriceWithHttpInfo
     *
     * Get a product purchase price from priceId
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\ProductPurchasePriceRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrice'][0]
    ): array
    {
        $request = $this->getProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\ProductPurchasePriceRead', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProductPurchasePriceRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductPurchasePriceAsync
     *
     * Get a product purchase price from priceId
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductPurchasePriceAsync(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->getProductPurchasePriceAsyncWithHttpInfo($productRef, $priceId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductPurchasePriceAsyncWithHttpInfo
     *
     * Get a product purchase price from priceId
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['getProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead';
        $request = $this->getProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductPurchasePriceRequest(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['getProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling getProductPurchasePrice'
            );
        }

        // verify the required parameter 'priceId' is set
        if ($priceId === null || (is_array($priceId) && count($priceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $priceId when calling getProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getProductPurchasePrice'
            );
        }


        $resourcePath = '/api/Product/{productRef}/PurchasePrice/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductPurchasePrices
     *
     * Get all product purchase prices for productRef
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrices'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]
     */
    public function getProductPurchasePrices(
        string $productRef,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrices'][0]
    ): array
    {
        list($response) = $this->getProductPurchasePricesWithHttpInfo($productRef, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getProductPurchasePricesWithHttpInfo
     *
     * Get all product purchase prices for productRef
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrices'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\ProductPurchasePriceRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPurchasePricesWithHttpInfo(
        string $productRef,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrices'][0]
    ): array
    {
        $request = $this->getProductPurchasePricesRequest($productRef, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductPurchasePricesAsync
     *
     * Get all product purchase prices for productRef
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrices'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductPurchasePricesAsync(
        string $productRef,
        string $domain,
        string $contentType = self::contentTypes['getProductPurchasePrices'][0]
    ): PromiseInterface
    {
        return $this->getProductPurchasePricesAsyncWithHttpInfo($productRef, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductPurchasePricesAsyncWithHttpInfo
     *
     * Get all product purchase prices for productRef
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrices'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductPurchasePricesAsyncWithHttpInfo(
        $productRef,
        $domain,
        string $contentType = self::contentTypes['getProductPurchasePrices'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\ProductPurchasePriceRead[]';
        $request = $this->getProductPurchasePricesRequest($productRef, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductPurchasePrices'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPurchasePrices'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductPurchasePricesRequest(
        $productRef,
        $domain,
        string $contentType = self::contentTypes['getProductPurchasePrices'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling getProductPurchasePrices'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling getProductPurchasePrices'
            );
        }


        $resourcePath = '/api/Product/{productRef}/PurchasePrice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lockProductPurchasePrice
     *
     * Lock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function lockProductPurchasePrice(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['lockProductPurchasePrice'][0]
    ): string
    {
        list($response) = $this->lockProductPurchasePriceWithHttpInfo($productRef, $priceId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation lockProductPurchasePriceWithHttpInfo
     *
     * Lock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function lockProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['lockProductPurchasePrice'][0]
    ): array
    {
        $request = $this->lockProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation lockProductPurchasePriceAsync
     *
     * Lock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockProductPurchasePriceAsync(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['lockProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->lockProductPurchasePriceAsyncWithHttpInfo($productRef, $priceId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lockProductPurchasePriceAsyncWithHttpInfo
     *
     * Lock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['lockProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->lockProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lockProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lockProductPurchasePriceRequest(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['lockProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling lockProductPurchasePrice'
            );
        }

        // verify the required parameter 'priceId' is set
        if ($priceId === null || (is_array($priceId) && count($priceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $priceId when calling lockProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling lockProductPurchasePrice'
            );
        }


        $resourcePath = '/api/Product/{productRef}/PurchasePrice/{priceId}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlockProductPurchasePrice
     *
     * Unlock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function unlockProductPurchasePrice(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['unlockProductPurchasePrice'][0]
    ): string
    {
        list($response) = $this->unlockProductPurchasePriceWithHttpInfo($productRef, $priceId, $domain, $contentType);
        return $response;
    }

    /**
     * Operation unlockProductPurchasePriceWithHttpInfo
     *
     * Unlock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlockProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['unlockProductPurchasePrice'][0]
    ): array
    {
        $request = $this->unlockProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unlockProductPurchasePriceAsync
     *
     * Unlock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockProductPurchasePriceAsync(
        string $productRef,
        string $priceId,
        string $domain,
        string $contentType = self::contentTypes['unlockProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->unlockProductPurchasePriceAsyncWithHttpInfo($productRef, $priceId, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlockProductPurchasePriceAsyncWithHttpInfo
     *
     * Unlock a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['unlockProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->unlockProductPurchasePriceRequest($productRef, $priceId, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlockProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unlockProductPurchasePriceRequest(
        $productRef,
        $priceId,
        $domain,
        string $contentType = self::contentTypes['unlockProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling unlockProductPurchasePrice'
            );
        }

        // verify the required parameter 'priceId' is set
        if ($priceId === null || (is_array($priceId) && count($priceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $priceId when calling unlockProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling unlockProductPurchasePrice'
            );
        }


        $resourcePath = '/api/Product/{productRef}/PurchasePrice/{priceId}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProductPurchasePrice
     *
     * Update a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate|null $productPurchasePriceUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function updateProductPurchasePrice(
        string $productRef,
        string $priceId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate $productPurchasePriceUpdate = null,
        string $contentType = self::contentTypes['updateProductPurchasePrice'][0]
    ): string
    {
        list($response) = $this->updateProductPurchasePriceWithHttpInfo($productRef, $priceId, $domain, $productPurchasePriceUpdate, $contentType);
        return $response;
    }

    /**
     * Operation updateProductPurchasePriceWithHttpInfo
     *
     * Update a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate|null $productPurchasePriceUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductPurchasePriceWithHttpInfo(
        string $productRef,
        string $priceId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate $productPurchasePriceUpdate = null,
        string $contentType = self::contentTypes['updateProductPurchasePrice'][0]
    ): array
    {
        $request = $this->updateProductPurchasePriceRequest($productRef, $priceId, $domain, $productPurchasePriceUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProductPurchasePriceAsync
     *
     * Update a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate|null $productPurchasePriceUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateProductPurchasePriceAsync(
        string $productRef,
        string $priceId,
        string $domain,
        ?\SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate $productPurchasePriceUpdate = null,
        string $contentType = self::contentTypes['updateProductPurchasePrice'][0]
    ): PromiseInterface
    {
        return $this->updateProductPurchasePriceAsyncWithHttpInfo($productRef, $priceId, $domain, $productPurchasePriceUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProductPurchasePriceAsyncWithHttpInfo
     *
     * Update a product purchase price
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate|null $productPurchasePriceUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateProductPurchasePriceAsyncWithHttpInfo(
        $productRef,
        $priceId,
        $domain,
        $productPurchasePriceUpdate = null,
        string $contentType = self::contentTypes['updateProductPurchasePrice'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->updateProductPurchasePriceRequest($productRef, $priceId, $domain, $productPurchasePriceUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProductPurchasePrice'
     *
     * @param  string $productRef Id or code of the product (required)
     * @param  string $priceId Id of the product price (required)
     * @param  string $domain Your assigned domain name. Required for all API requests. (required)
     * @param  \SynergiTech\Iplicit\Model\ProductPurchasePriceUpdate|null $productPurchasePriceUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductPurchasePrice'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProductPurchasePriceRequest(
        $productRef,
        $priceId,
        $domain,
        $productPurchasePriceUpdate = null,
        string $contentType = self::contentTypes['updateProductPurchasePrice'][0]
    ): Request
    {

        // verify the required parameter 'productRef' is set
        if ($productRef === null || (is_array($productRef) && count($productRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $productRef when calling updateProductPurchasePrice'
            );
        }

        // verify the required parameter 'priceId' is set
        if ($priceId === null || (is_array($priceId) && count($priceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $priceId when calling updateProductPurchasePrice'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain when calling updateProductPurchasePrice'
            );
        }



        $resourcePath = '/api/Product/{productRef}/PurchasePrice/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($domain !== null) {
            $headerParams['Domain'] = ObjectSerializer::toHeaderValue($domain);
        }

        // path params
        if ($productRef !== null) {
            $resourcePath = str_replace(
                '{' . 'productRef' . '}',
                ObjectSerializer::toPathValue($productRef),
                $resourcePath
            );
        }
        // path params
        if ($priceId !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($priceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($productPurchasePriceUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($productPurchasePriceUpdate));
            } else {
                $httpBody = $productPurchasePriceUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
