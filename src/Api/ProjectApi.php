<?php
/**
 * ProjectApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Iplicit\ApiException;
use SynergiTech\Iplicit\Configuration;
use SynergiTech\Iplicit\HeaderSelector;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ProjectApi Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProjectApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addProjectMilstones' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'addProjectResourceAvailability' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createProject' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteProjectMilstones' => [
            'application/json',
        ],
        'deleteProjectResourceAvailability' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getProject' => [
            'application/json',
        ],
        'getProjectResourceAvailability' => [
            'application/json',
        ],
        'getProjects' => [
            'application/json',
        ],
        'lockProject' => [
            'application/json',
        ],
        'projectMilstones' => [
            'application/json',
        ],
        'replaceProjectMilstones' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'replaceProjectResourceAvailability' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'unlockProject' => [
            'application/json',
        ],
        'updateProject' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addProjectMilstones
     *
     * Add a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate|null $projectMilestoneCreate projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function addProjectMilstones(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectMilestoneCreate $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['addProjectMilstones'][0]
    ): void
    {
        $this->addProjectMilstonesWithHttpInfo($projectRef, $projectMilestoneCreate, $contentType);
    }

    /**
     * Operation addProjectMilstonesWithHttpInfo
     *
     * Add a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProjectMilstonesWithHttpInfo(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectMilestoneCreate $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['addProjectMilstones'][0]
    ): array
    {
        $request = $this->addProjectMilstonesRequest($projectRef, $projectMilestoneCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addProjectMilstonesAsync
     *
     * Add a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addProjectMilstonesAsync(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectMilestoneCreate $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['addProjectMilstones'][0]
    ): PromiseInterface
    {
        return $this->addProjectMilstonesAsyncWithHttpInfo($projectRef, $projectMilestoneCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addProjectMilstonesAsyncWithHttpInfo
     *
     * Add a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addProjectMilstonesAsyncWithHttpInfo(
        $projectRef,
        $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['addProjectMilstones'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->addProjectMilstonesRequest($projectRef, $projectMilestoneCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addProjectMilstones'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addProjectMilstonesRequest(
        $projectRef,
        $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['addProjectMilstones'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling addProjectMilstones'
            );
        }



        $resourcePath = '/api/Project/{projectRef}/milestone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectMilestoneCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectMilestoneCreate));
            } else {
                $httpBody = $projectMilestoneCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addProjectResourceAvailability
     *
     * Add a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function addProjectResourceAvailability(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['addProjectResourceAvailability'][0]
    ): void
    {
        $this->addProjectResourceAvailabilityWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType);
    }

    /**
     * Operation addProjectResourceAvailabilityWithHttpInfo
     *
     * Add a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProjectResourceAvailabilityWithHttpInfo(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['addProjectResourceAvailability'][0]
    ): array
    {
        $request = $this->addProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addProjectResourceAvailabilityAsync
     *
     * Add a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addProjectResourceAvailabilityAsync(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['addProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        return $this->addProjectResourceAvailabilityAsyncWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addProjectResourceAvailabilityAsyncWithHttpInfo
     *
     * Add a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addProjectResourceAvailabilityAsyncWithHttpInfo(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['addProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->addProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addProjectResourceAvailability'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addProjectResourceAvailabilityRequest(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['addProjectResourceAvailability'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling addProjectResourceAvailability'
            );
        }



        $resourcePath = '/api/Project/{projectRef}/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectAvailabilityCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectAvailabilityCreate));
            } else {
                $httpBody = $projectAvailabilityCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProject
     *
     * Create a project
     *
     * @param  \SynergiTech\Iplicit\Model\ProjectCreate|null $projectCreate projectCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function createProject(
        ?\SynergiTech\Iplicit\Model\ProjectCreate $projectCreate = null,
        string $contentType = self::contentTypes['createProject'][0]
    ): string
    {
        list($response) = $this->createProjectWithHttpInfo($projectCreate, $contentType);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * Create a project
     *
     * @param  \SynergiTech\Iplicit\Model\ProjectCreate|null $projectCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo(
        ?\SynergiTech\Iplicit\Model\ProjectCreate $projectCreate = null,
        string $contentType = self::contentTypes['createProject'][0]
    ): array
    {
        $request = $this->createProjectRequest($projectCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectAsync
     *
     * Create a project
     *
     * @param  \SynergiTech\Iplicit\Model\ProjectCreate|null $projectCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createProjectAsync(
        ?\SynergiTech\Iplicit\Model\ProjectCreate $projectCreate = null,
        string $contentType = self::contentTypes['createProject'][0]
    ): PromiseInterface
    {
        return $this->createProjectAsyncWithHttpInfo($projectCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProjectAsyncWithHttpInfo
     *
     * Create a project
     *
     * @param  \SynergiTech\Iplicit\Model\ProjectCreate|null $projectCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createProjectAsyncWithHttpInfo(
        $projectCreate = null,
        string $contentType = self::contentTypes['createProject'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->createProjectRequest($projectCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProject'
     *
     * @param  \SynergiTech\Iplicit\Model\ProjectCreate|null $projectCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProjectRequest(
        $projectCreate = null,
        string $contentType = self::contentTypes['createProject'][0]
    ): Request
    {



        $resourcePath = '/api/Project';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectCreate));
            } else {
                $httpBody = $projectCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectMilstones
     *
     * Delete a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $milestoneIdOrCode milestoneIdOrCode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteProjectMilstones(
        string $projectRef,
        string $milestoneIdOrCode,
        string $contentType = self::contentTypes['deleteProjectMilstones'][0]
    ): void
    {
        $this->deleteProjectMilstonesWithHttpInfo($projectRef, $milestoneIdOrCode, $contentType);
    }

    /**
     * Operation deleteProjectMilstonesWithHttpInfo
     *
     * Delete a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $milestoneIdOrCode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectMilstonesWithHttpInfo(
        string $projectRef,
        string $milestoneIdOrCode,
        string $contentType = self::contentTypes['deleteProjectMilstones'][0]
    ): array
    {
        $request = $this->deleteProjectMilstonesRequest($projectRef, $milestoneIdOrCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectMilstonesAsync
     *
     * Delete a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $milestoneIdOrCode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProjectMilstonesAsync(
        string $projectRef,
        string $milestoneIdOrCode,
        string $contentType = self::contentTypes['deleteProjectMilstones'][0]
    ): PromiseInterface
    {
        return $this->deleteProjectMilstonesAsyncWithHttpInfo($projectRef, $milestoneIdOrCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectMilstonesAsyncWithHttpInfo
     *
     * Delete a project milestone
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $milestoneIdOrCode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProjectMilstonesAsyncWithHttpInfo(
        $projectRef,
        $milestoneIdOrCode,
        string $contentType = self::contentTypes['deleteProjectMilstones'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteProjectMilstonesRequest($projectRef, $milestoneIdOrCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectMilstones'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $milestoneIdOrCode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectMilstonesRequest(
        $projectRef,
        $milestoneIdOrCode,
        string $contentType = self::contentTypes['deleteProjectMilstones'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling deleteProjectMilstones'
            );
        }

        // verify the required parameter 'milestoneIdOrCode' is set
        if ($milestoneIdOrCode === null || (is_array($milestoneIdOrCode) && count($milestoneIdOrCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $milestoneIdOrCode when calling deleteProjectMilstones'
            );
        }


        $resourcePath = '/api/Project/{projectRef}/milestone/{milestoneIdOrCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }
        // path params
        if ($milestoneIdOrCode !== null) {
            $resourcePath = str_replace(
                '{' . 'milestoneIdOrCode' . '}',
                ObjectSerializer::toPathValue($milestoneIdOrCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectResourceAvailability
     *
     * Delete a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteProjectResourceAvailability(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['deleteProjectResourceAvailability'][0]
    ): void
    {
        $this->deleteProjectResourceAvailabilityWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType);
    }

    /**
     * Operation deleteProjectResourceAvailabilityWithHttpInfo
     *
     * Delete a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectResourceAvailabilityWithHttpInfo(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['deleteProjectResourceAvailability'][0]
    ): array
    {
        $request = $this->deleteProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectResourceAvailabilityAsync
     *
     * Delete a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProjectResourceAvailabilityAsync(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['deleteProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        return $this->deleteProjectResourceAvailabilityAsyncWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectResourceAvailabilityAsyncWithHttpInfo
     *
     * Delete a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteProjectResourceAvailabilityAsyncWithHttpInfo(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['deleteProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectResourceAvailability'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectResourceAvailabilityRequest(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['deleteProjectResourceAvailability'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling deleteProjectResourceAvailability'
            );
        }



        $resourcePath = '/api/Project/{projectRef}/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectAvailabilityCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectAvailabilityCreate));
            } else {
                $httpBody = $projectAvailabilityCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProject
     *
     * Get a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\Project
     */
    public function getProject(
        string $projectRef,
        ?string $include = null,
        string $contentType = self::contentTypes['getProject'][0]
    ): \SynergiTech\Iplicit\Model\Project
    {
        list($response) = $this->getProjectWithHttpInfo($projectRef, $include, $contentType);
        return $response;
    }

    /**
     * Operation getProjectWithHttpInfo
     *
     * Get a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWithHttpInfo(
        string $projectRef,
        ?string $include = null,
        string $contentType = self::contentTypes['getProject'][0]
    ): array
    {
        $request = $this->getProjectRequest($projectRef, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\Project', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\Project' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\Project', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\Project';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAsync
     *
     * Get a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectAsync(
        string $projectRef,
        ?string $include = null,
        string $contentType = self::contentTypes['getProject'][0]
    ): PromiseInterface
    {
        return $this->getProjectAsyncWithHttpInfo($projectRef, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectAsyncWithHttpInfo
     *
     * Get a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectAsyncWithHttpInfo(
        $projectRef,
        $include = null,
        string $contentType = self::contentTypes['getProject'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\Project';
        $request = $this->getProjectRequest($projectRef, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProject'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectRequest(
        $projectRef,
        $include = null,
        string $contentType = self::contentTypes['getProject'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling getProject'
            );
        }



        $resourcePath = '/api/Project/{projectRef}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectResourceAvailability
     *
     * Get a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\ProjectAvailability[]
     */
    public function getProjectResourceAvailability(
        string $projectRef,
        string $contentType = self::contentTypes['getProjectResourceAvailability'][0]
    ): array
    {
        list($response) = $this->getProjectResourceAvailabilityWithHttpInfo($projectRef, $contentType);
        return $response;
    }

    /**
     * Operation getProjectResourceAvailabilityWithHttpInfo
     *
     * Get a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\ProjectAvailability[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectResourceAvailabilityWithHttpInfo(
        string $projectRef,
        string $contentType = self::contentTypes['getProjectResourceAvailability'][0]
    ): array
    {
        $request = $this->getProjectResourceAvailabilityRequest($projectRef, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\ProjectAvailability[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProjectAvailability[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProjectAvailability[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\ProjectAvailability[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProjectAvailability[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectResourceAvailabilityAsync
     *
     * Get a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectResourceAvailabilityAsync(
        string $projectRef,
        string $contentType = self::contentTypes['getProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        return $this->getProjectResourceAvailabilityAsyncWithHttpInfo($projectRef, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectResourceAvailabilityAsyncWithHttpInfo
     *
     * Get a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectResourceAvailabilityAsyncWithHttpInfo(
        $projectRef,
        string $contentType = self::contentTypes['getProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\ProjectAvailability[]';
        $request = $this->getProjectResourceAvailabilityRequest($projectRef, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectResourceAvailability'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectResourceAvailabilityRequest(
        $projectRef,
        string $contentType = self::contentTypes['getProjectResourceAvailability'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling getProjectResourceAvailability'
            );
        }


        $resourcePath = '/api/Project/{projectRef}/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjects
     *
     * Get a list of projects with a search filter
     *
     * @param  string|null $projectGroupCode projectGroupCode (optional)
     * @param  string|null $projectGroupId projectGroupId (optional)
     * @param  string|null $parentProjectCode parentProjectCode (optional)
     * @param  string|null $parentProjectId parentProjectId (optional)
     * @param  string|null $legalEntityCode legalEntityCode (optional)
     * @param  string|null $legalEntityId legalEntityId (optional)
     * @param  string|null $contactAccountCode contactAccountCode (optional)
     * @param  string|null $contactAccountId contactAccountId (optional)
     * @param  \DateTime|null $lastModifiedFrom lastModifiedFrom (optional)
     * @param  \DateTime|null $lastModifiedTo lastModifiedTo (optional)
     * @param  bool|null $includeClosed By default, only active projects will be returned. Set this to true to include closed projects. (optional)
     * @param  bool|null $isActive Search by active status. True&#x3D;only active projects, False&#x3D; only closed projects (optional)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  int|null $take Number of records to select. Default &#x3D; 100. Max 500. (optional, default to 100)
     * @param  int|null $skip Number of records to skip. Used for pagination. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\Project[]
     */
    public function getProjects(
        ?string $projectGroupCode = null,
        ?string $projectGroupId = null,
        ?string $parentProjectCode = null,
        ?string $parentProjectId = null,
        ?string $legalEntityCode = null,
        ?string $legalEntityId = null,
        ?string $contactAccountCode = null,
        ?string $contactAccountId = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $includeClosed = null,
        ?bool $isActive = null,
        ?string $include = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getProjects'][0]
    ): array
    {
        list($response) = $this->getProjectsWithHttpInfo($projectGroupCode, $projectGroupId, $parentProjectCode, $parentProjectId, $legalEntityCode, $legalEntityId, $contactAccountCode, $contactAccountId, $lastModifiedFrom, $lastModifiedTo, $includeClosed, $isActive, $include, $take, $skip, $contentType);
        return $response;
    }

    /**
     * Operation getProjectsWithHttpInfo
     *
     * Get a list of projects with a search filter
     *
     * @param  string|null $projectGroupCode (optional)
     * @param  string|null $projectGroupId (optional)
     * @param  string|null $parentProjectCode (optional)
     * @param  string|null $parentProjectId (optional)
     * @param  string|null $legalEntityCode (optional)
     * @param  string|null $legalEntityId (optional)
     * @param  string|null $contactAccountCode (optional)
     * @param  string|null $contactAccountId (optional)
     * @param  \DateTime|null $lastModifiedFrom (optional)
     * @param  \DateTime|null $lastModifiedTo (optional)
     * @param  bool|null $includeClosed By default, only active projects will be returned. Set this to true to include closed projects. (optional)
     * @param  bool|null $isActive Search by active status. True&#x3D;only active projects, False&#x3D; only closed projects (optional)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  int|null $take Number of records to select. Default &#x3D; 100. Max 500. (optional, default to 100)
     * @param  int|null $skip Number of records to skip. Used for pagination. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectsWithHttpInfo(
        ?string $projectGroupCode = null,
        ?string $projectGroupId = null,
        ?string $parentProjectCode = null,
        ?string $parentProjectId = null,
        ?string $legalEntityCode = null,
        ?string $legalEntityId = null,
        ?string $contactAccountCode = null,
        ?string $contactAccountId = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $includeClosed = null,
        ?bool $isActive = null,
        ?string $include = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getProjects'][0]
    ): array
    {
        $request = $this->getProjectsRequest($projectGroupCode, $projectGroupId, $parentProjectCode, $parentProjectId, $legalEntityCode, $legalEntityId, $contactAccountCode, $contactAccountId, $lastModifiedFrom, $lastModifiedTo, $includeClosed, $isActive, $include, $take, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\Project[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\Project[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\Project[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\Project[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\Project[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectsAsync
     *
     * Get a list of projects with a search filter
     *
     * @param  string|null $projectGroupCode (optional)
     * @param  string|null $projectGroupId (optional)
     * @param  string|null $parentProjectCode (optional)
     * @param  string|null $parentProjectId (optional)
     * @param  string|null $legalEntityCode (optional)
     * @param  string|null $legalEntityId (optional)
     * @param  string|null $contactAccountCode (optional)
     * @param  string|null $contactAccountId (optional)
     * @param  \DateTime|null $lastModifiedFrom (optional)
     * @param  \DateTime|null $lastModifiedTo (optional)
     * @param  bool|null $includeClosed By default, only active projects will be returned. Set this to true to include closed projects. (optional)
     * @param  bool|null $isActive Search by active status. True&#x3D;only active projects, False&#x3D; only closed projects (optional)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  int|null $take Number of records to select. Default &#x3D; 100. Max 500. (optional, default to 100)
     * @param  int|null $skip Number of records to skip. Used for pagination. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectsAsync(
        ?string $projectGroupCode = null,
        ?string $projectGroupId = null,
        ?string $parentProjectCode = null,
        ?string $parentProjectId = null,
        ?string $legalEntityCode = null,
        ?string $legalEntityId = null,
        ?string $contactAccountCode = null,
        ?string $contactAccountId = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $includeClosed = null,
        ?bool $isActive = null,
        ?string $include = null,
        ?int $take = 100,
        ?int $skip = 0,
        string $contentType = self::contentTypes['getProjects'][0]
    ): PromiseInterface
    {
        return $this->getProjectsAsyncWithHttpInfo($projectGroupCode, $projectGroupId, $parentProjectCode, $parentProjectId, $legalEntityCode, $legalEntityId, $contactAccountCode, $contactAccountId, $lastModifiedFrom, $lastModifiedTo, $includeClosed, $isActive, $include, $take, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectsAsyncWithHttpInfo
     *
     * Get a list of projects with a search filter
     *
     * @param  string|null $projectGroupCode (optional)
     * @param  string|null $projectGroupId (optional)
     * @param  string|null $parentProjectCode (optional)
     * @param  string|null $parentProjectId (optional)
     * @param  string|null $legalEntityCode (optional)
     * @param  string|null $legalEntityId (optional)
     * @param  string|null $contactAccountCode (optional)
     * @param  string|null $contactAccountId (optional)
     * @param  \DateTime|null $lastModifiedFrom (optional)
     * @param  \DateTime|null $lastModifiedTo (optional)
     * @param  bool|null $includeClosed By default, only active projects will be returned. Set this to true to include closed projects. (optional)
     * @param  bool|null $isActive Search by active status. True&#x3D;only active projects, False&#x3D; only closed projects (optional)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  int|null $take Number of records to select. Default &#x3D; 100. Max 500. (optional, default to 100)
     * @param  int|null $skip Number of records to skip. Used for pagination. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProjectsAsyncWithHttpInfo(
        $projectGroupCode = null,
        $projectGroupId = null,
        $parentProjectCode = null,
        $parentProjectId = null,
        $legalEntityCode = null,
        $legalEntityId = null,
        $contactAccountCode = null,
        $contactAccountId = null,
        $lastModifiedFrom = null,
        $lastModifiedTo = null,
        $includeClosed = null,
        $isActive = null,
        $include = null,
        $take = 100,
        $skip = 0,
        string $contentType = self::contentTypes['getProjects'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\Project[]';
        $request = $this->getProjectsRequest($projectGroupCode, $projectGroupId, $parentProjectCode, $parentProjectId, $legalEntityCode, $legalEntityId, $contactAccountCode, $contactAccountId, $lastModifiedFrom, $lastModifiedTo, $includeClosed, $isActive, $include, $take, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjects'
     *
     * @param  string|null $projectGroupCode (optional)
     * @param  string|null $projectGroupId (optional)
     * @param  string|null $parentProjectCode (optional)
     * @param  string|null $parentProjectId (optional)
     * @param  string|null $legalEntityCode (optional)
     * @param  string|null $legalEntityId (optional)
     * @param  string|null $contactAccountCode (optional)
     * @param  string|null $contactAccountId (optional)
     * @param  \DateTime|null $lastModifiedFrom (optional)
     * @param  \DateTime|null $lastModifiedTo (optional)
     * @param  bool|null $includeClosed By default, only active projects will be returned. Set this to true to include closed projects. (optional)
     * @param  bool|null $isActive Search by active status. True&#x3D;only active projects, False&#x3D; only closed projects (optional)
     * @param  string|null $include Comma separated list of details to include: &#x60;address&#x60;, &#x60;ext&#x60;, &#x60;availability&#x60;, &#x60;milestones&#x60;, &#x60;subProjects&#x60;. (optional)
     * @param  int|null $take Number of records to select. Default &#x3D; 100. Max 500. (optional, default to 100)
     * @param  int|null $skip Number of records to skip. Used for pagination. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectsRequest(
        $projectGroupCode = null,
        $projectGroupId = null,
        $parentProjectCode = null,
        $parentProjectId = null,
        $legalEntityCode = null,
        $legalEntityId = null,
        $contactAccountCode = null,
        $contactAccountId = null,
        $lastModifiedFrom = null,
        $lastModifiedTo = null,
        $includeClosed = null,
        $isActive = null,
        $include = null,
        $take = 100,
        $skip = 0,
        string $contentType = self::contentTypes['getProjects'][0]
    ): Request
    {

















        $resourcePath = '/api/Project';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projectGroupCode,
            'ProjectGroupCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projectGroupId,
            'ProjectGroupId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parentProjectCode,
            'ParentProjectCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parentProjectId,
            'ParentProjectId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $legalEntityCode,
            'LegalEntityCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $legalEntityId,
            'LegalEntityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactAccountCode,
            'ContactAccountCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactAccountId,
            'ContactAccountId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastModifiedFrom,
            'LastModifiedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastModifiedTo,
            'LastModifiedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeClosed,
            'IncludeClosed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isActive,
            'IsActive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lockProject
     *
     * Lock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function lockProject(
        string $projectRef,
        string $contentType = self::contentTypes['lockProject'][0]
    ): void
    {
        $this->lockProjectWithHttpInfo($projectRef, $contentType);
    }

    /**
     * Operation lockProjectWithHttpInfo
     *
     * Lock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lockProjectWithHttpInfo(
        string $projectRef,
        string $contentType = self::contentTypes['lockProject'][0]
    ): array
    {
        $request = $this->lockProjectRequest($projectRef, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lockProjectAsync
     *
     * Lock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockProjectAsync(
        string $projectRef,
        string $contentType = self::contentTypes['lockProject'][0]
    ): PromiseInterface
    {
        return $this->lockProjectAsyncWithHttpInfo($projectRef, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lockProjectAsyncWithHttpInfo
     *
     * Lock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lockProjectAsyncWithHttpInfo(
        $projectRef,
        string $contentType = self::contentTypes['lockProject'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->lockProjectRequest($projectRef, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lockProject'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lockProjectRequest(
        $projectRef,
        string $contentType = self::contentTypes['lockProject'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling lockProject'
            );
        }


        $resourcePath = '/api/Project/{projectRef}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectMilstones
     *
     * Get a project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\ProjectMilestone[]
     */
    public function projectMilstones(
        string $projectRef,
        string $contentType = self::contentTypes['projectMilstones'][0]
    ): array
    {
        list($response) = $this->projectMilstonesWithHttpInfo($projectRef, $contentType);
        return $response;
    }

    /**
     * Operation projectMilstonesWithHttpInfo
     *
     * Get a project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\ProjectMilestone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectMilstonesWithHttpInfo(
        string $projectRef,
        string $contentType = self::contentTypes['projectMilstones'][0]
    ): array
    {
        $request = $this->projectMilstonesRequest($projectRef, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\ProjectMilestone[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProjectMilestone[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProjectMilestone[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\ProjectMilestone[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProjectMilestone[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectMilstonesAsync
     *
     * Get a project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectMilstonesAsync(
        string $projectRef,
        string $contentType = self::contentTypes['projectMilstones'][0]
    ): PromiseInterface
    {
        return $this->projectMilstonesAsyncWithHttpInfo($projectRef, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation projectMilstonesAsyncWithHttpInfo
     *
     * Get a project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function projectMilstonesAsyncWithHttpInfo(
        $projectRef,
        string $contentType = self::contentTypes['projectMilstones'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\ProjectMilestone[]';
        $request = $this->projectMilstonesRequest($projectRef, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'projectMilstones'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectMilstonesRequest(
        $projectRef,
        string $contentType = self::contentTypes['projectMilstones'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling projectMilstones'
            );
        }


        $resourcePath = '/api/Project/{projectRef}/milestone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceProjectMilstones
     *
     * Replace all project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate[]|null $projectMilestoneCreate projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function replaceProjectMilstones(
        string $projectRef,
        ?array $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['replaceProjectMilstones'][0]
    ): void
    {
        $this->replaceProjectMilstonesWithHttpInfo($projectRef, $projectMilestoneCreate, $contentType);
    }

    /**
     * Operation replaceProjectMilstonesWithHttpInfo
     *
     * Replace all project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate[]|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectMilstones'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProjectMilstonesWithHttpInfo(
        string $projectRef,
        ?array $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['replaceProjectMilstones'][0]
    ): array
    {
        $request = $this->replaceProjectMilstonesRequest($projectRef, $projectMilestoneCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation replaceProjectMilstonesAsync
     *
     * Replace all project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate[]|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceProjectMilstonesAsync(
        string $projectRef,
        ?array $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['replaceProjectMilstones'][0]
    ): PromiseInterface
    {
        return $this->replaceProjectMilstonesAsyncWithHttpInfo($projectRef, $projectMilestoneCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceProjectMilstonesAsyncWithHttpInfo
     *
     * Replace all project milestones
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate[]|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceProjectMilstonesAsyncWithHttpInfo(
        $projectRef,
        $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['replaceProjectMilstones'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->replaceProjectMilstonesRequest($projectRef, $projectMilestoneCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceProjectMilstones'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectMilestoneCreate[]|null $projectMilestoneCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectMilstones'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceProjectMilstonesRequest(
        $projectRef,
        $projectMilestoneCreate = null,
        string $contentType = self::contentTypes['replaceProjectMilstones'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling replaceProjectMilstones'
            );
        }



        $resourcePath = '/api/Project/{projectRef}/milestone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectMilestoneCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectMilestoneCreate));
            } else {
                $httpBody = $projectMilestoneCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceProjectResourceAvailability
     *
     * Replace a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function replaceProjectResourceAvailability(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['replaceProjectResourceAvailability'][0]
    ): void
    {
        $this->replaceProjectResourceAvailabilityWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType);
    }

    /**
     * Operation replaceProjectResourceAvailabilityWithHttpInfo
     *
     * Replace a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProjectResourceAvailabilityWithHttpInfo(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['replaceProjectResourceAvailability'][0]
    ): array
    {
        $request = $this->replaceProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation replaceProjectResourceAvailabilityAsync
     *
     * Replace a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceProjectResourceAvailabilityAsync(
        string $projectRef,
        ?array $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['replaceProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        return $this->replaceProjectResourceAvailabilityAsyncWithHttpInfo($projectRef, $projectAvailabilityCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceProjectResourceAvailabilityAsyncWithHttpInfo
     *
     * Replace a project resource availability
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function replaceProjectResourceAvailabilityAsyncWithHttpInfo(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['replaceProjectResourceAvailability'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->replaceProjectResourceAvailabilityRequest($projectRef, $projectAvailabilityCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceProjectResourceAvailability'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectAvailabilityCreate[]|null $projectAvailabilityCreate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceProjectResourceAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceProjectResourceAvailabilityRequest(
        $projectRef,
        $projectAvailabilityCreate = null,
        string $contentType = self::contentTypes['replaceProjectResourceAvailability'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling replaceProjectResourceAvailability'
            );
        }



        $resourcePath = '/api/Project/{projectRef}/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectAvailabilityCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectAvailabilityCreate));
            } else {
                $httpBody = $projectAvailabilityCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlockProject
     *
     * Unlock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function unlockProject(
        string $projectRef,
        string $contentType = self::contentTypes['unlockProject'][0]
    ): void
    {
        $this->unlockProjectWithHttpInfo($projectRef, $contentType);
    }

    /**
     * Operation unlockProjectWithHttpInfo
     *
     * Unlock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlockProjectWithHttpInfo(
        string $projectRef,
        string $contentType = self::contentTypes['unlockProject'][0]
    ): array
    {
        $request = $this->unlockProjectRequest($projectRef, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unlockProjectAsync
     *
     * Unlock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockProjectAsync(
        string $projectRef,
        string $contentType = self::contentTypes['unlockProject'][0]
    ): PromiseInterface
    {
        return $this->unlockProjectAsyncWithHttpInfo($projectRef, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlockProjectAsyncWithHttpInfo
     *
     * Unlock a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function unlockProjectAsyncWithHttpInfo(
        $projectRef,
        string $contentType = self::contentTypes['unlockProject'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->unlockProjectRequest($projectRef, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlockProject'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unlockProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unlockProjectRequest(
        $projectRef,
        string $contentType = self::contentTypes['unlockProject'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling unlockProject'
            );
        }


        $resourcePath = '/api/Project/{projectRef}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProject
     *
     * Update a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectUpdate|null $projectUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function updateProject(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectUpdate $projectUpdate = null,
        string $contentType = self::contentTypes['updateProject'][0]
    ): string
    {
        list($response) = $this->updateProjectWithHttpInfo($projectRef, $projectUpdate, $contentType);
        return $response;
    }

    /**
     * Operation updateProjectWithHttpInfo
     *
     * Update a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectUpdate|null $projectUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProjectWithHttpInfo(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectUpdate $projectUpdate = null,
        string $contentType = self::contentTypes['updateProject'][0]
    ): array
    {
        $request = $this->updateProjectRequest($projectRef, $projectUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProjectAsync
     *
     * Update a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectUpdate|null $projectUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateProjectAsync(
        string $projectRef,
        ?\SynergiTech\Iplicit\Model\ProjectUpdate $projectUpdate = null,
        string $contentType = self::contentTypes['updateProject'][0]
    ): PromiseInterface
    {
        return $this->updateProjectAsyncWithHttpInfo($projectRef, $projectUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProjectAsyncWithHttpInfo
     *
     * Update a project
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectUpdate|null $projectUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateProjectAsyncWithHttpInfo(
        $projectRef,
        $projectUpdate = null,
        string $contentType = self::contentTypes['updateProject'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->updateProjectRequest($projectRef, $projectUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProject'
     *
     * @param  string $projectRef Id, code or &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;internal reference&lt;/a&gt; of the project (required)
     * @param  \SynergiTech\Iplicit\Model\ProjectUpdate|null $projectUpdate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProjectRequest(
        $projectRef,
        $projectUpdate = null,
        string $contentType = self::contentTypes['updateProject'][0]
    ): Request
    {

        // verify the required parameter 'projectRef' is set
        if ($projectRef === null || (is_array($projectRef) && count($projectRef) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $projectRef when calling updateProject'
            );
        }



        $resourcePath = '/api/Project/{projectRef}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectRef !== null) {
            $resourcePath = str_replace(
                '{' . 'projectRef' . '}',
                ObjectSerializer::toPathValue($projectRef),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectUpdate));
            } else {
                $httpBody = $projectUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
