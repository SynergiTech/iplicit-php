<?php
/**
 * PurchaseOrderApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Iplicit\ApiException;
use SynergiTech\Iplicit\Configuration;
use SynergiTech\Iplicit\HeaderSelector;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * PurchaseOrderApi Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseOrderApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPurchaseOrder' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getPurchaseOrder' => [
            'application/json',
        ],
        'getPurchaseOrders' => [
            'application/json',
        ],
        'submitPurchaseOrder' => [
            'application/json',
        ],
        'updatePurchaseOrder' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createPurchaseOrder
     *
     * Create a purchase order.
     *
     * @param  \SynergiTech\Iplicit\Model\DocCreate|null $docCreate docCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function createPurchaseOrder(
        ?\SynergiTech\Iplicit\Model\DocCreate $docCreate = null,
        string $contentType = self::contentTypes['createPurchaseOrder'][0]
    ): string
    {
        list($response) = $this->createPurchaseOrderWithHttpInfo($docCreate, $contentType);
        return $response;
    }

    /**
     * Operation createPurchaseOrderWithHttpInfo
     *
     * Create a purchase order.
     *
     * @param  \SynergiTech\Iplicit\Model\DocCreate|null $docCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPurchaseOrderWithHttpInfo(
        ?\SynergiTech\Iplicit\Model\DocCreate $docCreate = null,
        string $contentType = self::contentTypes['createPurchaseOrder'][0]
    ): array
    {
        $request = $this->createPurchaseOrderRequest($docCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPurchaseOrderAsync
     *
     * Create a purchase order.
     *
     * @param  \SynergiTech\Iplicit\Model\DocCreate|null $docCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPurchaseOrderAsync(
        ?\SynergiTech\Iplicit\Model\DocCreate $docCreate = null,
        string $contentType = self::contentTypes['createPurchaseOrder'][0]
    ): PromiseInterface
    {
        return $this->createPurchaseOrderAsyncWithHttpInfo($docCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPurchaseOrderAsyncWithHttpInfo
     *
     * Create a purchase order.
     *
     * @param  \SynergiTech\Iplicit\Model\DocCreate|null $docCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPurchaseOrderAsyncWithHttpInfo(
        $docCreate = null,
        string $contentType = self::contentTypes['createPurchaseOrder'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->createPurchaseOrderRequest($docCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPurchaseOrder'
     *
     * @param  \SynergiTech\Iplicit\Model\DocCreate|null $docCreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPurchaseOrderRequest(
        $docCreate = null,
        string $contentType = self::contentTypes['createPurchaseOrder'][0]
    ): Request
    {



        $resourcePath = '/api/PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($docCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($docCreate));
            } else {
                $httpBody = $docCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrder
     *
     * Get a purchase order.
     *
     * @param  string $id Id or document number of the purchase order (required)
     * @param  string|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\Doc
     */
    public function getPurchaseOrder(
        string $id,
        ?string $include = null,
        string $contentType = self::contentTypes['getPurchaseOrder'][0]
    ): \SynergiTech\Iplicit\Model\Doc
    {
        list($response) = $this->getPurchaseOrderWithHttpInfo($id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getPurchaseOrderWithHttpInfo
     *
     * Get a purchase order.
     *
     * @param  string $id Id or document number of the purchase order (required)
     * @param  string|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\Doc, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrderWithHttpInfo(
        string $id,
        ?string $include = null,
        string $contentType = self::contentTypes['getPurchaseOrder'][0]
    ): array
    {
        $request = $this->getPurchaseOrderRequest($id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\Doc', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\Doc' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\Doc', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\Doc';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\Doc',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrderAsync
     *
     * Get a purchase order.
     *
     * @param  string $id Id or document number of the purchase order (required)
     * @param  string|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPurchaseOrderAsync(
        string $id,
        ?string $include = null,
        string $contentType = self::contentTypes['getPurchaseOrder'][0]
    ): PromiseInterface
    {
        return $this->getPurchaseOrderAsyncWithHttpInfo($id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrderAsyncWithHttpInfo
     *
     * Get a purchase order.
     *
     * @param  string $id Id or document number of the purchase order (required)
     * @param  string|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPurchaseOrderAsyncWithHttpInfo(
        $id,
        $include = null,
        string $contentType = self::contentTypes['getPurchaseOrder'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\Doc';
        $request = $this->getPurchaseOrderRequest($id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrder'
     *
     * @param  string $id Id or document number of the purchase order (required)
     * @param  string|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPurchaseOrderRequest(
        $id,
        $include = null,
        string $contentType = self::contentTypes['getPurchaseOrder'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPurchaseOrder'
            );
        }



        $resourcePath = '/api/PurchaseOrder/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrders
     *
     * Get a list of purchase orders with a search filter
     *
     * @param  string|null $docNo The document number (optional)
     * @param  string|null $docType The document type code (optional)
     * @param  string|null $docTypeId The document type id (optional)
     * @param  string|null $contactAccount The document contact account code (optional)
     * @param  string|null $contactAccountId The document contact account id (optional)
     * @param  string|null $legalEntity The document legal entity code (optional)
     * @param  string|null $legalEntityId The document legal entity id (optional)
     * @param  string|null $currency The document currency (optional)
     * @param  string|null $project The document project code (optional)
     * @param  string|null $projectId The document project id (optional)
     * @param  string|null $description The document description (optional)
     * @param  string|null $descriptionContains The document description contains (optional)
     * @param  string|null $theirRef An external reference code (optional)
     * @param  string|null $intRef Optional interface reference. If provided, it must be unique. &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;Learn more&lt;/a&gt; (optional)
     * @param  string|null $legacyRef Alternative / legacy reference code (optional)
     * @param  string|null $theirDocNo An external document number (optional)
     * @param  DocClass|null $docClass The document class (optional)
     * @param  \DateTime|null $docDateFrom The document from date (optional)
     * @param  \DateTime|null $docDateTo The document to date (optional)
     * @param  \DateTime|null $dueDateFrom The document due from date (optional)
     * @param  \DateTime|null $dueDateTo The document due to date (optional)
     * @param  \DateTime|null $lastModifiedFrom The document last modified from date (optional)
     * @param  \DateTime|null $lastModifiedTo The document last modified to date (optional)
     * @param  bool|null $outstanding The document outstanding flag (optional)
     * @param  bool|null $unmatched The document unmatched flag (optional)
     * @param  bool|null $draft The document draft flag (optional)
     * @param  bool|null $abandoned The document abandoned flag (optional)
     * @param  bool|null $posted The document posted (optional)
     * @param  bool|null $approved The document approved flag (optional)
     * @param  bool|null $reversed The document reversed flag (optional)
     * @param  int|null $take The number of documents to take (optional)
     * @param  int|null $skip The number of documents to skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrders'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Iplicit\Model\DocSummary[]|\SynergiTech\Iplicit\Model\ProblemDetails|\SynergiTech\Iplicit\Model\ProblemDetails
     */
    public function getPurchaseOrders(
        ?string $docNo = null,
        ?string $docType = null,
        ?string $docTypeId = null,
        ?string $contactAccount = null,
        ?string $contactAccountId = null,
        ?string $legalEntity = null,
        ?string $legalEntityId = null,
        ?string $currency = null,
        ?string $project = null,
        ?string $projectId = null,
        ?string $description = null,
        ?string $descriptionContains = null,
        ?string $theirRef = null,
        ?string $intRef = null,
        ?string $legacyRef = null,
        ?string $theirDocNo = null,
        ?DocClass $docClass = null,
        ?\DateTime $docDateFrom = null,
        ?\DateTime $docDateTo = null,
        ?\DateTime $dueDateFrom = null,
        ?\DateTime $dueDateTo = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $outstanding = null,
        ?bool $unmatched = null,
        ?bool $draft = null,
        ?bool $abandoned = null,
        ?bool $posted = null,
        ?bool $approved = null,
        ?bool $reversed = null,
        ?int $take = null,
        ?int $skip = null,
        string $contentType = self::contentTypes['getPurchaseOrders'][0]
    ): array
    {
        list($response) = $this->getPurchaseOrdersWithHttpInfo($docNo, $docType, $docTypeId, $contactAccount, $contactAccountId, $legalEntity, $legalEntityId, $currency, $project, $projectId, $description, $descriptionContains, $theirRef, $intRef, $legacyRef, $theirDocNo, $docClass, $docDateFrom, $docDateTo, $dueDateFrom, $dueDateTo, $lastModifiedFrom, $lastModifiedTo, $outstanding, $unmatched, $draft, $abandoned, $posted, $approved, $reversed, $take, $skip, $contentType);
        return $response;
    }

    /**
     * Operation getPurchaseOrdersWithHttpInfo
     *
     * Get a list of purchase orders with a search filter
     *
     * @param  string|null $docNo The document number (optional)
     * @param  string|null $docType The document type code (optional)
     * @param  string|null $docTypeId The document type id (optional)
     * @param  string|null $contactAccount The document contact account code (optional)
     * @param  string|null $contactAccountId The document contact account id (optional)
     * @param  string|null $legalEntity The document legal entity code (optional)
     * @param  string|null $legalEntityId The document legal entity id (optional)
     * @param  string|null $currency The document currency (optional)
     * @param  string|null $project The document project code (optional)
     * @param  string|null $projectId The document project id (optional)
     * @param  string|null $description The document description (optional)
     * @param  string|null $descriptionContains The document description contains (optional)
     * @param  string|null $theirRef An external reference code (optional)
     * @param  string|null $intRef Optional interface reference. If provided, it must be unique. &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;Learn more&lt;/a&gt; (optional)
     * @param  string|null $legacyRef Alternative / legacy reference code (optional)
     * @param  string|null $theirDocNo An external document number (optional)
     * @param  DocClass|null $docClass The document class (optional)
     * @param  \DateTime|null $docDateFrom The document from date (optional)
     * @param  \DateTime|null $docDateTo The document to date (optional)
     * @param  \DateTime|null $dueDateFrom The document due from date (optional)
     * @param  \DateTime|null $dueDateTo The document due to date (optional)
     * @param  \DateTime|null $lastModifiedFrom The document last modified from date (optional)
     * @param  \DateTime|null $lastModifiedTo The document last modified to date (optional)
     * @param  bool|null $outstanding The document outstanding flag (optional)
     * @param  bool|null $unmatched The document unmatched flag (optional)
     * @param  bool|null $draft The document draft flag (optional)
     * @param  bool|null $abandoned The document abandoned flag (optional)
     * @param  bool|null $posted The document posted (optional)
     * @param  bool|null $approved The document approved flag (optional)
     * @param  bool|null $reversed The document reversed flag (optional)
     * @param  int|null $take The number of documents to take (optional)
     * @param  int|null $skip The number of documents to skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrders'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Iplicit\Model\DocSummary[]|\SynergiTech\Iplicit\Model\ProblemDetails|\SynergiTech\Iplicit\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrdersWithHttpInfo(
        ?string $docNo = null,
        ?string $docType = null,
        ?string $docTypeId = null,
        ?string $contactAccount = null,
        ?string $contactAccountId = null,
        ?string $legalEntity = null,
        ?string $legalEntityId = null,
        ?string $currency = null,
        ?string $project = null,
        ?string $projectId = null,
        ?string $description = null,
        ?string $descriptionContains = null,
        ?string $theirRef = null,
        ?string $intRef = null,
        ?string $legacyRef = null,
        ?string $theirDocNo = null,
        ?DocClass $docClass = null,
        ?\DateTime $docDateFrom = null,
        ?\DateTime $docDateTo = null,
        ?\DateTime $dueDateFrom = null,
        ?\DateTime $dueDateTo = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $outstanding = null,
        ?bool $unmatched = null,
        ?bool $draft = null,
        ?bool $abandoned = null,
        ?bool $posted = null,
        ?bool $approved = null,
        ?bool $reversed = null,
        ?int $take = null,
        ?int $skip = null,
        string $contentType = self::contentTypes['getPurchaseOrders'][0]
    ): array
    {
        $request = $this->getPurchaseOrdersRequest($docNo, $docType, $docTypeId, $contactAccount, $contactAccountId, $legalEntity, $legalEntityId, $currency, $project, $projectId, $description, $descriptionContains, $theirRef, $intRef, $legacyRef, $theirDocNo, $docClass, $docDateFrom, $docDateTo, $dueDateFrom, $dueDateTo, $lastModifiedFrom, $lastModifiedTo, $outstanding, $unmatched, $draft, $abandoned, $posted, $approved, $reversed, $take, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Iplicit\Model\DocSummary[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\DocSummary[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\DocSummary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\SynergiTech\Iplicit\Model\ProblemDetails', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\SynergiTech\Iplicit\Model\ProblemDetails', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Iplicit\Model\ProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Iplicit\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SynergiTech\Iplicit\Model\DocSummary[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\DocSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Iplicit\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrdersAsync
     *
     * Get a list of purchase orders with a search filter
     *
     * @param  string|null $docNo The document number (optional)
     * @param  string|null $docType The document type code (optional)
     * @param  string|null $docTypeId The document type id (optional)
     * @param  string|null $contactAccount The document contact account code (optional)
     * @param  string|null $contactAccountId The document contact account id (optional)
     * @param  string|null $legalEntity The document legal entity code (optional)
     * @param  string|null $legalEntityId The document legal entity id (optional)
     * @param  string|null $currency The document currency (optional)
     * @param  string|null $project The document project code (optional)
     * @param  string|null $projectId The document project id (optional)
     * @param  string|null $description The document description (optional)
     * @param  string|null $descriptionContains The document description contains (optional)
     * @param  string|null $theirRef An external reference code (optional)
     * @param  string|null $intRef Optional interface reference. If provided, it must be unique. &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;Learn more&lt;/a&gt; (optional)
     * @param  string|null $legacyRef Alternative / legacy reference code (optional)
     * @param  string|null $theirDocNo An external document number (optional)
     * @param  DocClass|null $docClass The document class (optional)
     * @param  \DateTime|null $docDateFrom The document from date (optional)
     * @param  \DateTime|null $docDateTo The document to date (optional)
     * @param  \DateTime|null $dueDateFrom The document due from date (optional)
     * @param  \DateTime|null $dueDateTo The document due to date (optional)
     * @param  \DateTime|null $lastModifiedFrom The document last modified from date (optional)
     * @param  \DateTime|null $lastModifiedTo The document last modified to date (optional)
     * @param  bool|null $outstanding The document outstanding flag (optional)
     * @param  bool|null $unmatched The document unmatched flag (optional)
     * @param  bool|null $draft The document draft flag (optional)
     * @param  bool|null $abandoned The document abandoned flag (optional)
     * @param  bool|null $posted The document posted (optional)
     * @param  bool|null $approved The document approved flag (optional)
     * @param  bool|null $reversed The document reversed flag (optional)
     * @param  int|null $take The number of documents to take (optional)
     * @param  int|null $skip The number of documents to skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrders'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPurchaseOrdersAsync(
        ?string $docNo = null,
        ?string $docType = null,
        ?string $docTypeId = null,
        ?string $contactAccount = null,
        ?string $contactAccountId = null,
        ?string $legalEntity = null,
        ?string $legalEntityId = null,
        ?string $currency = null,
        ?string $project = null,
        ?string $projectId = null,
        ?string $description = null,
        ?string $descriptionContains = null,
        ?string $theirRef = null,
        ?string $intRef = null,
        ?string $legacyRef = null,
        ?string $theirDocNo = null,
        ?DocClass $docClass = null,
        ?\DateTime $docDateFrom = null,
        ?\DateTime $docDateTo = null,
        ?\DateTime $dueDateFrom = null,
        ?\DateTime $dueDateTo = null,
        ?\DateTime $lastModifiedFrom = null,
        ?\DateTime $lastModifiedTo = null,
        ?bool $outstanding = null,
        ?bool $unmatched = null,
        ?bool $draft = null,
        ?bool $abandoned = null,
        ?bool $posted = null,
        ?bool $approved = null,
        ?bool $reversed = null,
        ?int $take = null,
        ?int $skip = null,
        string $contentType = self::contentTypes['getPurchaseOrders'][0]
    ): PromiseInterface
    {
        return $this->getPurchaseOrdersAsyncWithHttpInfo($docNo, $docType, $docTypeId, $contactAccount, $contactAccountId, $legalEntity, $legalEntityId, $currency, $project, $projectId, $description, $descriptionContains, $theirRef, $intRef, $legacyRef, $theirDocNo, $docClass, $docDateFrom, $docDateTo, $dueDateFrom, $dueDateTo, $lastModifiedFrom, $lastModifiedTo, $outstanding, $unmatched, $draft, $abandoned, $posted, $approved, $reversed, $take, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrdersAsyncWithHttpInfo
     *
     * Get a list of purchase orders with a search filter
     *
     * @param  string|null $docNo The document number (optional)
     * @param  string|null $docType The document type code (optional)
     * @param  string|null $docTypeId The document type id (optional)
     * @param  string|null $contactAccount The document contact account code (optional)
     * @param  string|null $contactAccountId The document contact account id (optional)
     * @param  string|null $legalEntity The document legal entity code (optional)
     * @param  string|null $legalEntityId The document legal entity id (optional)
     * @param  string|null $currency The document currency (optional)
     * @param  string|null $project The document project code (optional)
     * @param  string|null $projectId The document project id (optional)
     * @param  string|null $description The document description (optional)
     * @param  string|null $descriptionContains The document description contains (optional)
     * @param  string|null $theirRef An external reference code (optional)
     * @param  string|null $intRef Optional interface reference. If provided, it must be unique. &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;Learn more&lt;/a&gt; (optional)
     * @param  string|null $legacyRef Alternative / legacy reference code (optional)
     * @param  string|null $theirDocNo An external document number (optional)
     * @param  DocClass|null $docClass The document class (optional)
     * @param  \DateTime|null $docDateFrom The document from date (optional)
     * @param  \DateTime|null $docDateTo The document to date (optional)
     * @param  \DateTime|null $dueDateFrom The document due from date (optional)
     * @param  \DateTime|null $dueDateTo The document due to date (optional)
     * @param  \DateTime|null $lastModifiedFrom The document last modified from date (optional)
     * @param  \DateTime|null $lastModifiedTo The document last modified to date (optional)
     * @param  bool|null $outstanding The document outstanding flag (optional)
     * @param  bool|null $unmatched The document unmatched flag (optional)
     * @param  bool|null $draft The document draft flag (optional)
     * @param  bool|null $abandoned The document abandoned flag (optional)
     * @param  bool|null $posted The document posted (optional)
     * @param  bool|null $approved The document approved flag (optional)
     * @param  bool|null $reversed The document reversed flag (optional)
     * @param  int|null $take The number of documents to take (optional)
     * @param  int|null $skip The number of documents to skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrders'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPurchaseOrdersAsyncWithHttpInfo(
        $docNo = null,
        $docType = null,
        $docTypeId = null,
        $contactAccount = null,
        $contactAccountId = null,
        $legalEntity = null,
        $legalEntityId = null,
        $currency = null,
        $project = null,
        $projectId = null,
        $description = null,
        $descriptionContains = null,
        $theirRef = null,
        $intRef = null,
        $legacyRef = null,
        $theirDocNo = null,
        $docClass = null,
        $docDateFrom = null,
        $docDateTo = null,
        $dueDateFrom = null,
        $dueDateTo = null,
        $lastModifiedFrom = null,
        $lastModifiedTo = null,
        $outstanding = null,
        $unmatched = null,
        $draft = null,
        $abandoned = null,
        $posted = null,
        $approved = null,
        $reversed = null,
        $take = null,
        $skip = null,
        string $contentType = self::contentTypes['getPurchaseOrders'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Iplicit\Model\DocSummary[]';
        $request = $this->getPurchaseOrdersRequest($docNo, $docType, $docTypeId, $contactAccount, $contactAccountId, $legalEntity, $legalEntityId, $currency, $project, $projectId, $description, $descriptionContains, $theirRef, $intRef, $legacyRef, $theirDocNo, $docClass, $docDateFrom, $docDateTo, $dueDateFrom, $dueDateTo, $lastModifiedFrom, $lastModifiedTo, $outstanding, $unmatched, $draft, $abandoned, $posted, $approved, $reversed, $take, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrders'
     *
     * @param  string|null $docNo The document number (optional)
     * @param  string|null $docType The document type code (optional)
     * @param  string|null $docTypeId The document type id (optional)
     * @param  string|null $contactAccount The document contact account code (optional)
     * @param  string|null $contactAccountId The document contact account id (optional)
     * @param  string|null $legalEntity The document legal entity code (optional)
     * @param  string|null $legalEntityId The document legal entity id (optional)
     * @param  string|null $currency The document currency (optional)
     * @param  string|null $project The document project code (optional)
     * @param  string|null $projectId The document project id (optional)
     * @param  string|null $description The document description (optional)
     * @param  string|null $descriptionContains The document description contains (optional)
     * @param  string|null $theirRef An external reference code (optional)
     * @param  string|null $intRef Optional interface reference. If provided, it must be unique. &lt;a href&#x3D;\&quot;https://docs.iplicit.com/dev/guide/identifiers/index.html\&quot;&gt;Learn more&lt;/a&gt; (optional)
     * @param  string|null $legacyRef Alternative / legacy reference code (optional)
     * @param  string|null $theirDocNo An external document number (optional)
     * @param  DocClass|null $docClass The document class (optional)
     * @param  \DateTime|null $docDateFrom The document from date (optional)
     * @param  \DateTime|null $docDateTo The document to date (optional)
     * @param  \DateTime|null $dueDateFrom The document due from date (optional)
     * @param  \DateTime|null $dueDateTo The document due to date (optional)
     * @param  \DateTime|null $lastModifiedFrom The document last modified from date (optional)
     * @param  \DateTime|null $lastModifiedTo The document last modified to date (optional)
     * @param  bool|null $outstanding The document outstanding flag (optional)
     * @param  bool|null $unmatched The document unmatched flag (optional)
     * @param  bool|null $draft The document draft flag (optional)
     * @param  bool|null $abandoned The document abandoned flag (optional)
     * @param  bool|null $posted The document posted (optional)
     * @param  bool|null $approved The document approved flag (optional)
     * @param  bool|null $reversed The document reversed flag (optional)
     * @param  int|null $take The number of documents to take (optional)
     * @param  int|null $skip The number of documents to skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPurchaseOrders'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPurchaseOrdersRequest(
        $docNo = null,
        $docType = null,
        $docTypeId = null,
        $contactAccount = null,
        $contactAccountId = null,
        $legalEntity = null,
        $legalEntityId = null,
        $currency = null,
        $project = null,
        $projectId = null,
        $description = null,
        $descriptionContains = null,
        $theirRef = null,
        $intRef = null,
        $legacyRef = null,
        $theirDocNo = null,
        $docClass = null,
        $docDateFrom = null,
        $docDateTo = null,
        $dueDateFrom = null,
        $dueDateTo = null,
        $lastModifiedFrom = null,
        $lastModifiedTo = null,
        $outstanding = null,
        $unmatched = null,
        $draft = null,
        $abandoned = null,
        $posted = null,
        $approved = null,
        $reversed = null,
        $take = null,
        $skip = null,
        string $contentType = self::contentTypes['getPurchaseOrders'][0]
    ): Request
    {


































        $resourcePath = '/api/PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docNo,
            'DocNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docType,
            'DocType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docTypeId,
            'DocTypeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactAccount,
            'ContactAccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactAccountId,
            'ContactAccountId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $legalEntity,
            'LegalEntity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $legalEntityId,
            'LegalEntityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'Currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project,
            'Project', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projectId,
            'ProjectId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'Description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $descriptionContains,
            'DescriptionContains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $theirRef,
            'TheirRef', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $intRef,
            'IntRef', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $legacyRef,
            'LegacyRef', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $theirDocNo,
            'TheirDocNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docClass,
            'DocClass', // param base name
            'DocClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docDateFrom,
            'DocDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $docDateTo,
            'DocDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dueDateFrom,
            'DueDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dueDateTo,
            'DueDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastModifiedFrom,
            'LastModifiedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastModifiedTo,
            'LastModifiedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $outstanding,
            'Outstanding', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unmatched,
            'Unmatched', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $draft,
            'Draft', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abandoned,
            'Abandoned', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $posted,
            'Posted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $approved,
            'Approved', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reversed,
            'Reversed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitPurchaseOrder
     *
     * Submit a purchase order for authorisation.
     *
     * @param  string $id Id of the purchase order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function submitPurchaseOrder(
        string $id,
        string $contentType = self::contentTypes['submitPurchaseOrder'][0]
    ): void
    {
        $this->submitPurchaseOrderWithHttpInfo($id, $contentType);
    }

    /**
     * Operation submitPurchaseOrderWithHttpInfo
     *
     * Submit a purchase order for authorisation.
     *
     * @param  string $id Id of the purchase order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitPurchaseOrderWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['submitPurchaseOrder'][0]
    ): array
    {
        $request = $this->submitPurchaseOrderRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitPurchaseOrderAsync
     *
     * Submit a purchase order for authorisation.
     *
     * @param  string $id Id of the purchase order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitPurchaseOrderAsync(
        string $id,
        string $contentType = self::contentTypes['submitPurchaseOrder'][0]
    ): PromiseInterface
    {
        return $this->submitPurchaseOrderAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitPurchaseOrderAsyncWithHttpInfo
     *
     * Submit a purchase order for authorisation.
     *
     * @param  string $id Id of the purchase order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitPurchaseOrderAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['submitPurchaseOrder'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->submitPurchaseOrderRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitPurchaseOrder'
     *
     * @param  string $id Id of the purchase order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitPurchaseOrderRequest(
        $id,
        string $contentType = self::contentTypes['submitPurchaseOrder'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling submitPurchaseOrder'
            );
        }


        $resourcePath = '/api/PurchaseOrder/{id}/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePurchaseOrder
     *
     * Update a purchase order.
     *
     * @param  string $idOrDocNo Id or document number of the purchase order (required)
     * @param  \SynergiTech\Iplicit\Model\DocUpdate|null $docUpdate docUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function updatePurchaseOrder(
        string $idOrDocNo,
        ?\SynergiTech\Iplicit\Model\DocUpdate $docUpdate = null,
        string $contentType = self::contentTypes['updatePurchaseOrder'][0]
    ): void
    {
        $this->updatePurchaseOrderWithHttpInfo($idOrDocNo, $docUpdate, $contentType);
    }

    /**
     * Operation updatePurchaseOrderWithHttpInfo
     *
     * Update a purchase order.
     *
     * @param  string $idOrDocNo Id or document number of the purchase order (required)
     * @param  \SynergiTech\Iplicit\Model\DocUpdate|null $docUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePurchaseOrder'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePurchaseOrderWithHttpInfo(
        string $idOrDocNo,
        ?\SynergiTech\Iplicit\Model\DocUpdate $docUpdate = null,
        string $contentType = self::contentTypes['updatePurchaseOrder'][0]
    ): array
    {
        $request = $this->updatePurchaseOrderRequest($idOrDocNo, $docUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePurchaseOrderAsync
     *
     * Update a purchase order.
     *
     * @param  string $idOrDocNo Id or document number of the purchase order (required)
     * @param  \SynergiTech\Iplicit\Model\DocUpdate|null $docUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePurchaseOrderAsync(
        string $idOrDocNo,
        ?\SynergiTech\Iplicit\Model\DocUpdate $docUpdate = null,
        string $contentType = self::contentTypes['updatePurchaseOrder'][0]
    ): PromiseInterface
    {
        return $this->updatePurchaseOrderAsyncWithHttpInfo($idOrDocNo, $docUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePurchaseOrderAsyncWithHttpInfo
     *
     * Update a purchase order.
     *
     * @param  string $idOrDocNo Id or document number of the purchase order (required)
     * @param  \SynergiTech\Iplicit\Model\DocUpdate|null $docUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePurchaseOrderAsyncWithHttpInfo(
        $idOrDocNo,
        $docUpdate = null,
        string $contentType = self::contentTypes['updatePurchaseOrder'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->updatePurchaseOrderRequest($idOrDocNo, $docUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePurchaseOrder'
     *
     * @param  string $idOrDocNo Id or document number of the purchase order (required)
     * @param  \SynergiTech\Iplicit\Model\DocUpdate|null $docUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePurchaseOrder'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePurchaseOrderRequest(
        $idOrDocNo,
        $docUpdate = null,
        string $contentType = self::contentTypes['updatePurchaseOrder'][0]
    ): Request
    {

        // verify the required parameter 'idOrDocNo' is set
        if ($idOrDocNo === null || (is_array($idOrDocNo) && count($idOrDocNo) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $idOrDocNo when calling updatePurchaseOrder'
            );
        }



        $resourcePath = '/api/PurchaseOrder/{idOrDocNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idOrDocNo !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrDocNo' . '}',
                ObjectSerializer::toPathValue($idOrDocNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($docUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($docUpdate));
            } else {
                $httpBody = $docUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if (!empty($this->config->getDomainHeader())) {
            $headers['Domain'] = $this->config->getDomainHeader();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
