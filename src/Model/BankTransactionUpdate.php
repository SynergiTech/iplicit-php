<?php
/**
 * BankTransactionUpdate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * BankTransactionUpdate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BankTransactionUpdate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BankTransactionUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'description' => 'string',
        'bankDate' => '\DateTime',
        'depositAmount' => 'float',
        'withdrawalAmount' => 'float',
        'postDate' => '\DateTime',
        'bankReference' => 'string',
        'merchantName' => 'string',
        'paymentMethodRef' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'description' => null,
        'bankDate' => 'date',
        'depositAmount' => 'double',
        'withdrawalAmount' => 'double',
        'postDate' => 'date',
        'bankReference' => null,
        'merchantName' => null,
        'paymentMethodRef' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'description' => true,
        'bankDate' => true,
        'depositAmount' => true,
        'withdrawalAmount' => true,
        'postDate' => true,
        'bankReference' => true,
        'merchantName' => true,
        'paymentMethodRef' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'description' => 'description',
        'bankDate' => 'bankDate',
        'depositAmount' => 'depositAmount',
        'withdrawalAmount' => 'withdrawalAmount',
        'postDate' => 'postDate',
        'bankReference' => 'bankReference',
        'merchantName' => 'merchantName',
        'paymentMethodRef' => 'paymentMethodRef'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'description' => 'setDescription',
        'bankDate' => 'setBankDate',
        'depositAmount' => 'setDepositAmount',
        'withdrawalAmount' => 'setWithdrawalAmount',
        'postDate' => 'setPostDate',
        'bankReference' => 'setBankReference',
        'merchantName' => 'setMerchantName',
        'paymentMethodRef' => 'setPaymentMethodRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'description' => 'getDescription',
        'bankDate' => 'getBankDate',
        'depositAmount' => 'getDepositAmount',
        'withdrawalAmount' => 'getWithdrawalAmount',
        'postDate' => 'getPostDate',
        'bankReference' => 'getBankReference',
        'merchantName' => 'getMerchantName',
        'paymentMethodRef' => 'getPaymentMethodRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('bankDate', $data ?? [], null);
        $this->setIfExists('depositAmount', $data ?? [], null);
        $this->setIfExists('withdrawalAmount', $data ?? [], null);
        $this->setIfExists('postDate', $data ?? [], null);
        $this->setIfExists('bankReference', $data ?? [], null);
        $this->setIfExists('merchantName', $data ?? [], null);
        $this->setIfExists('paymentMethodRef', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['bankReference']) && (mb_strlen($this->container['bankReference']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankReference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchantName']) && (mb_strlen($this->container['merchantName']) > 100)) {
            $invalidProperties[] = "invalid value for 'merchantName', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The bank transaction description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 250)) {
            throw new InvalidArgumentException('invalid length for $description when calling BankTransactionUpdate., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets bankDate
     *
     * @return \DateTime|null
     */
    public function getBankDate(): ?\DateTime
    {
        return $this->container['bankDate'];
    }

    /**
     * Sets bankDate
     *
     * @param \DateTime|null $bankDate The bank transaction bank date
     *
     * @return $this
     */
    public function setBankDate(?\DateTime $bankDate): static
    {
        if (is_null($bankDate)) {
            array_push($this->openAPINullablesSetToNull, 'bankDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankDate'] = $bankDate;

        return $this;
    }

    /**
     * Gets depositAmount
     *
     * @return float|null
     */
    public function getDepositAmount(): ?float
    {
        return $this->container['depositAmount'];
    }

    /**
     * Sets depositAmount
     *
     * @param float|null $depositAmount The bank transaction deposit amount
     *
     * @return $this
     */
    public function setDepositAmount(?float $depositAmount): static
    {
        if (is_null($depositAmount)) {
            array_push($this->openAPINullablesSetToNull, 'depositAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depositAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depositAmount'] = $depositAmount;

        return $this;
    }

    /**
     * Gets withdrawalAmount
     *
     * @return float|null
     */
    public function getWithdrawalAmount(): ?float
    {
        return $this->container['withdrawalAmount'];
    }

    /**
     * Sets withdrawalAmount
     *
     * @param float|null $withdrawalAmount The bank transaction withdrawal amount
     *
     * @return $this
     */
    public function setWithdrawalAmount(?float $withdrawalAmount): static
    {
        if (is_null($withdrawalAmount)) {
            array_push($this->openAPINullablesSetToNull, 'withdrawalAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawalAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawalAmount'] = $withdrawalAmount;

        return $this;
    }

    /**
     * Gets postDate
     *
     * @return \DateTime|null
     */
    public function getPostDate(): ?\DateTime
    {
        return $this->container['postDate'];
    }

    /**
     * Sets postDate
     *
     * @param \DateTime|null $postDate The bank transaction post date
     *
     * @return $this
     */
    public function setPostDate(?\DateTime $postDate): static
    {
        if (is_null($postDate)) {
            array_push($this->openAPINullablesSetToNull, 'postDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postDate'] = $postDate;

        return $this;
    }

    /**
     * Gets bankReference
     *
     * @return string|null
     */
    public function getBankReference(): ?string
    {
        return $this->container['bankReference'];
    }

    /**
     * Sets bankReference
     *
     * @param string|null $bankReference The bank transaction bank reference
     *
     * @return $this
     */
    public function setBankReference(?string $bankReference): static
    {
        if (is_null($bankReference)) {
            array_push($this->openAPINullablesSetToNull, 'bankReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankReference) && (mb_strlen($bankReference) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankReference when calling BankTransactionUpdate., must be smaller than or equal to 50.');
        }

        $this->container['bankReference'] = $bankReference;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string|null
     */
    public function getMerchantName(): ?string
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string|null $merchantName The bank transaction merchant name
     *
     * @return $this
     */
    public function setMerchantName(?string $merchantName): static
    {
        if (is_null($merchantName)) {
            array_push($this->openAPINullablesSetToNull, 'merchantName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantName) && (mb_strlen($merchantName) > 100)) {
            throw new InvalidArgumentException('invalid length for $merchantName when calling BankTransactionUpdate., must be smaller than or equal to 100.');
        }

        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets paymentMethodRef
     *
     * @return string|null
     */
    public function getPaymentMethodRef(): ?string
    {
        return $this->container['paymentMethodRef'];
    }

    /**
     * Sets paymentMethodRef
     *
     * @param string|null $paymentMethodRef The bank transaction payment method reference
     *
     * @return $this
     */
    public function setPaymentMethodRef(?string $paymentMethodRef): static
    {
        if (is_null($paymentMethodRef)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethodRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentMethodRef'] = $paymentMethodRef;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


