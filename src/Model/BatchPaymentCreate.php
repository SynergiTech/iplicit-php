<?php
/**
 * BatchPaymentCreate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * BatchPaymentCreate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BatchPaymentCreate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BatchPaymentCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'batchPaymentTypeId' => 'string',
        'legalEntityId' => 'string',
        'bankAccountId' => 'string',
        'paymentDate' => '\DateTime',
        'description' => 'string',
        'bankRef' => 'string',
        'paymentMethodId' => 'string',
        'periodId' => 'string',
        'allocations' => '\SynergiTech\Iplicit\Model\DocAllocationCreate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'batchPaymentTypeId' => null,
        'legalEntityId' => null,
        'bankAccountId' => null,
        'paymentDate' => 'date-time',
        'description' => null,
        'bankRef' => null,
        'paymentMethodId' => null,
        'periodId' => null,
        'allocations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'batchPaymentTypeId' => true,
        'legalEntityId' => true,
        'bankAccountId' => true,
        'paymentDate' => true,
        'description' => true,
        'bankRef' => true,
        'paymentMethodId' => true,
        'periodId' => true,
        'allocations' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'batchPaymentTypeId' => 'batchPaymentTypeId',
        'legalEntityId' => 'legalEntityId',
        'bankAccountId' => 'bankAccountId',
        'paymentDate' => 'paymentDate',
        'description' => 'description',
        'bankRef' => 'bankRef',
        'paymentMethodId' => 'paymentMethodId',
        'periodId' => 'periodId',
        'allocations' => 'allocations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'batchPaymentTypeId' => 'setBatchPaymentTypeId',
        'legalEntityId' => 'setLegalEntityId',
        'bankAccountId' => 'setBankAccountId',
        'paymentDate' => 'setPaymentDate',
        'description' => 'setDescription',
        'bankRef' => 'setBankRef',
        'paymentMethodId' => 'setPaymentMethodId',
        'periodId' => 'setPeriodId',
        'allocations' => 'setAllocations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'batchPaymentTypeId' => 'getBatchPaymentTypeId',
        'legalEntityId' => 'getLegalEntityId',
        'bankAccountId' => 'getBankAccountId',
        'paymentDate' => 'getPaymentDate',
        'description' => 'getDescription',
        'bankRef' => 'getBankRef',
        'paymentMethodId' => 'getPaymentMethodId',
        'periodId' => 'getPeriodId',
        'allocations' => 'getAllocations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('batchPaymentTypeId', $data ?? [], null);
        $this->setIfExists('legalEntityId', $data ?? [], null);
        $this->setIfExists('bankAccountId', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('bankRef', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('periodId', $data ?? [], null);
        $this->setIfExists('allocations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['batchPaymentTypeId']) && (mb_strlen($this->container['batchPaymentTypeId']) > 50)) {
            $invalidProperties[] = "invalid value for 'batchPaymentTypeId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['legalEntityId']) && (mb_strlen($this->container['legalEntityId']) > 50)) {
            $invalidProperties[] = "invalid value for 'legalEntityId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bankAccountId']) && (mb_strlen($this->container['bankAccountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankAccountId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['bankRef']) && (mb_strlen($this->container['bankRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['paymentMethodId']) && (mb_strlen($this->container['paymentMethodId']) > 50)) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['periodId']) && (mb_strlen($this->container['periodId']) > 50)) {
            $invalidProperties[] = "invalid value for 'periodId', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batchPaymentTypeId
     *
     * @return string|null
     */
    public function getBatchPaymentTypeId(): ?string
    {
        return $this->container['batchPaymentTypeId'];
    }

    /**
     * Sets batchPaymentTypeId
     *
     * @param string|null $batchPaymentTypeId If not specified, the default batch payment type will be used.
     *
     * @return $this
     */
    public function setBatchPaymentTypeId(?string $batchPaymentTypeId): static
    {
        if (is_null($batchPaymentTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'batchPaymentTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batchPaymentTypeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batchPaymentTypeId) && (mb_strlen($batchPaymentTypeId) > 50)) {
            throw new InvalidArgumentException('invalid length for $batchPaymentTypeId when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['batchPaymentTypeId'] = $batchPaymentTypeId;

        return $this;
    }

    /**
     * Gets legalEntityId
     *
     * @return string|null
     */
    public function getLegalEntityId(): ?string
    {
        return $this->container['legalEntityId'];
    }

    /**
     * Sets legalEntityId
     *
     * @param string|null $legalEntityId If not specified, the default legal entity will be used. When the bank account is specified, the legal entity can be omitted.
     *
     * @return $this
     */
    public function setLegalEntityId(?string $legalEntityId): static
    {
        if (is_null($legalEntityId)) {
            array_push($this->openAPINullablesSetToNull, 'legalEntityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legalEntityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legalEntityId) && (mb_strlen($legalEntityId) > 50)) {
            throw new InvalidArgumentException('invalid length for $legalEntityId when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['legalEntityId'] = $legalEntityId;

        return $this;
    }

    /**
     * Gets bankAccountId
     *
     * @return string|null
     */
    public function getBankAccountId(): ?string
    {
        return $this->container['bankAccountId'];
    }

    /**
     * Sets bankAccountId
     *
     * @param string|null $bankAccountId If not specified, the default batch payment bank account of the legal entity will be used.
     *
     * @return $this
     */
    public function setBankAccountId(?string $bankAccountId): static
    {
        if (is_null($bankAccountId)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankAccountId) && (mb_strlen($bankAccountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankAccountId when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['bankAccountId'] = $bankAccountId;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate(): ?\DateTime
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate If not specified, it defaults to today.
     *
     * @return $this
     */
    public function setPaymentDate(?\DateTime $paymentDate): static
    {
        if (is_null($paymentDate)) {
            array_push($this->openAPINullablesSetToNull, 'paymentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description If not specified, it defaults to the batch payment number.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 250)) {
            throw new InvalidArgumentException('invalid length for $description when calling BatchPaymentCreate., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets bankRef
     *
     * @return string|null
     */
    public function getBankRef(): ?string
    {
        return $this->container['bankRef'];
    }

    /**
     * Sets bankRef
     *
     * @param string|null $bankRef If not specified, it defaults to the batch payment number.
     *
     * @return $this
     */
    public function setBankRef(?string $bankRef): static
    {
        if (is_null($bankRef)) {
            array_push($this->openAPINullablesSetToNull, 'bankRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankRef) && (mb_strlen($bankRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankRef when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['bankRef'] = $bankRef;

        return $this;
    }

    /**
     * Gets paymentMethodId
     *
     * @return string|null
     */
    public function getPaymentMethodId(): ?string
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId
     *
     * @param string|null $paymentMethodId If not specified, it defaults to the default batch payment method of the bank account.
     *
     * @return $this
     */
    public function setPaymentMethodId(?string $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentMethodId) && (mb_strlen($paymentMethodId) > 50)) {
            throw new InvalidArgumentException('invalid length for $paymentMethodId when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets periodId
     *
     * @return string|null
     */
    public function getPeriodId(): ?string
    {
        return $this->container['periodId'];
    }

    /**
     * Sets periodId
     *
     * @param string|null $periodId If not specified, it is evaluated based on the payment date.
     *
     * @return $this
     */
    public function setPeriodId(?string $periodId): static
    {
        if (is_null($periodId)) {
            array_push($this->openAPINullablesSetToNull, 'periodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($periodId) && (mb_strlen($periodId) > 50)) {
            throw new InvalidArgumentException('invalid length for $periodId when calling BatchPaymentCreate., must be smaller than or equal to 50.');
        }

        $this->container['periodId'] = $periodId;

        return $this;
    }

    /**
     * Gets allocations
     *
     * @return \SynergiTech\Iplicit\Model\DocAllocationCreate[]|null
     */
    public function getAllocations(): ?array
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param \SynergiTech\Iplicit\Model\DocAllocationCreate[]|null $allocations Payment allocations.
     *
     * @return $this
     */
    public function setAllocations(?array $allocations): static
    {
        if (is_null($allocations)) {
            array_push($this->openAPINullablesSetToNull, 'allocations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allocations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allocations'] = $allocations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


