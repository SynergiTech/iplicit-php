<?php
/**
 * ContactBankDetailsUpdateable
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ContactBankDetailsUpdateable Class Doc Comment
 *
 * @description All fields are optional at the API level.  The fields required to process payments may vary based on the bank and interface used.
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContactBankDetailsUpdateable implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ContactBankDetailsUpdateable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'iban' => 'string',
        'accountNo' => 'string',
        'sortCode' => 'string',
        'bic' => 'string',
        'routingCode' => 'string',
        'currency' => 'string',
        'legacyRef' => 'string',
        'bankId' => 'string',
        'bankRef' => 'string',
        'countryCode' => 'string',
        'bankAddress' => 'string',
        'accountName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'iban' => null,
        'accountNo' => null,
        'sortCode' => null,
        'bic' => null,
        'routingCode' => null,
        'currency' => null,
        'legacyRef' => null,
        'bankId' => null,
        'bankRef' => null,
        'countryCode' => null,
        'bankAddress' => null,
        'accountName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'iban' => true,
        'accountNo' => true,
        'sortCode' => true,
        'bic' => true,
        'routingCode' => true,
        'currency' => true,
        'legacyRef' => true,
        'bankId' => true,
        'bankRef' => true,
        'countryCode' => true,
        'bankAddress' => true,
        'accountName' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'iban' => 'iban',
        'accountNo' => 'accountNo',
        'sortCode' => 'sortCode',
        'bic' => 'bic',
        'routingCode' => 'routingCode',
        'currency' => 'currency',
        'legacyRef' => 'legacyRef',
        'bankId' => 'bankId',
        'bankRef' => 'bankRef',
        'countryCode' => 'countryCode',
        'bankAddress' => 'bankAddress',
        'accountName' => 'accountName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'iban' => 'setIban',
        'accountNo' => 'setAccountNo',
        'sortCode' => 'setSortCode',
        'bic' => 'setBic',
        'routingCode' => 'setRoutingCode',
        'currency' => 'setCurrency',
        'legacyRef' => 'setLegacyRef',
        'bankId' => 'setBankId',
        'bankRef' => 'setBankRef',
        'countryCode' => 'setCountryCode',
        'bankAddress' => 'setBankAddress',
        'accountName' => 'setAccountName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'iban' => 'getIban',
        'accountNo' => 'getAccountNo',
        'sortCode' => 'getSortCode',
        'bic' => 'getBic',
        'routingCode' => 'getRoutingCode',
        'currency' => 'getCurrency',
        'legacyRef' => 'getLegacyRef',
        'bankId' => 'getBankId',
        'bankRef' => 'getBankRef',
        'countryCode' => 'getCountryCode',
        'bankAddress' => 'getBankAddress',
        'accountName' => 'getAccountName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('accountNo', $data ?? [], null);
        $this->setIfExists('sortCode', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('routingCode', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('legacyRef', $data ?? [], null);
        $this->setIfExists('bankId', $data ?? [], null);
        $this->setIfExists('bankRef', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('bankAddress', $data ?? [], null);
        $this->setIfExists('accountName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 50)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['accountNo']) && (mb_strlen($this->container['accountNo']) > 30)) {
            $invalidProperties[] = "invalid value for 'accountNo', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sortCode']) && (mb_strlen($this->container['sortCode']) > 8)) {
            $invalidProperties[] = "invalid value for 'sortCode', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['bic']) && (mb_strlen($this->container['bic']) > 50)) {
            $invalidProperties[] = "invalid value for 'bic', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['routingCode']) && (mb_strlen($this->container['routingCode']) > 20)) {
            $invalidProperties[] = "invalid value for 'routingCode', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['legacyRef']) && (mb_strlen($this->container['legacyRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'legacyRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bankId']) && (mb_strlen($this->container['bankId']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bankRef']) && (mb_strlen($this->container['bankRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['countryCode']) && (mb_strlen($this->container['countryCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bankAddress']) && (mb_strlen($this->container['bankAddress']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankAddress', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['accountName']) && (mb_strlen($this->container['accountName']) > 50)) {
            $invalidProperties[] = "invalid value for 'accountName', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban(): ?string
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban International Bank Account Number (IBAN)
     *
     * @return $this
     */
    public function setIban(?string $iban): static
    {
        if (is_null($iban)) {
            array_push($this->openAPINullablesSetToNull, 'iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($iban) && (mb_strlen($iban) > 50)) {
            throw new InvalidArgumentException('invalid length for $iban when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets accountNo
     *
     * @return string|null
     */
    public function getAccountNo(): ?string
    {
        return $this->container['accountNo'];
    }

    /**
     * Sets accountNo
     *
     * @param string|null $accountNo Bank account number
     *
     * @return $this
     */
    public function setAccountNo(?string $accountNo): static
    {
        if (is_null($accountNo)) {
            array_push($this->openAPINullablesSetToNull, 'accountNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountNo) && (mb_strlen($accountNo) > 30)) {
            throw new InvalidArgumentException('invalid length for $accountNo when calling ContactBankDetailsUpdateable., must be smaller than or equal to 30.');
        }

        $this->container['accountNo'] = $accountNo;

        return $this;
    }

    /**
     * Gets sortCode
     *
     * @return string|null
     */
    public function getSortCode(): ?string
    {
        return $this->container['sortCode'];
    }

    /**
     * Sets sortCode
     *
     * @param string|null $sortCode Bank account sort code (UK only)
     *
     * @return $this
     */
    public function setSortCode(?string $sortCode): static
    {
        if (is_null($sortCode)) {
            array_push($this->openAPINullablesSetToNull, 'sortCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sortCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sortCode) && (mb_strlen($sortCode) > 8)) {
            throw new InvalidArgumentException('invalid length for $sortCode when calling ContactBankDetailsUpdateable., must be smaller than or equal to 8.');
        }

        $this->container['sortCode'] = $sortCode;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic(): ?string
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic SWIFT-BIC, BIC, SWIFT ID or SWIFT code (ISO 9362)
     *
     * @return $this
     */
    public function setBic(?string $bic): static
    {
        if (is_null($bic)) {
            array_push($this->openAPINullablesSetToNull, 'bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bic) && (mb_strlen($bic) > 50)) {
            throw new InvalidArgumentException('invalid length for $bic when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets routingCode
     *
     * @return string|null
     */
    public function getRoutingCode(): ?string
    {
        return $this->container['routingCode'];
    }

    /**
     * Sets routingCode
     *
     * @param string|null $routingCode ABA routing transit number (ABA RTN) (US only)
     *
     * @return $this
     */
    public function setRoutingCode(?string $routingCode): static
    {
        if (is_null($routingCode)) {
            array_push($this->openAPINullablesSetToNull, 'routingCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('routingCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($routingCode) && (mb_strlen($routingCode) > 20)) {
            throw new InvalidArgumentException('invalid length for $routingCode when calling ContactBankDetailsUpdateable., must be smaller than or equal to 20.');
        }

        $this->container['routingCode'] = $routingCode;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Bank currency code
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new InvalidArgumentException('invalid length for $currency when calling ContactBankDetailsUpdateable., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets legacyRef
     *
     * @return string|null
     */
    public function getLegacyRef(): ?string
    {
        return $this->container['legacyRef'];
    }

    /**
     * Sets legacyRef
     *
     * @param string|null $legacyRef An optional reference
     *
     * @return $this
     */
    public function setLegacyRef(?string $legacyRef): static
    {
        if (is_null($legacyRef)) {
            array_push($this->openAPINullablesSetToNull, 'legacyRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legacyRef) && (mb_strlen($legacyRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $legacyRef when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['legacyRef'] = $legacyRef;

        return $this;
    }

    /**
     * Gets bankId
     *
     * @return string|null
     */
    public function getBankId(): ?string
    {
        return $this->container['bankId'];
    }

    /**
     * Sets bankId
     *
     * @param string|null $bankId Optional, Bank reference. See `Bank` catalog.
     *
     * @return $this
     */
    public function setBankId(?string $bankId): static
    {
        if (is_null($bankId)) {
            array_push($this->openAPINullablesSetToNull, 'bankId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankId) && (mb_strlen($bankId) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankId when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['bankId'] = $bankId;

        return $this;
    }

    /**
     * Gets bankRef
     *
     * @return string|null
     */
    public function getBankRef(): ?string
    {
        return $this->container['bankRef'];
    }

    /**
     * Sets bankRef
     *
     * @param string|null $bankRef Optional, default *Bank Ref*
     *
     * @return $this
     */
    public function setBankRef(?string $bankRef): static
    {
        if (is_null($bankRef)) {
            array_push($this->openAPINullablesSetToNull, 'bankRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankRef) && (mb_strlen($bankRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankRef when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['bankRef'] = $bankRef;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode(): ?string
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode Country code. See `Country` catalog. (ISO 3166, ALPHA-2)
     *
     * @return $this
     */
    public function setCountryCode(?string $countryCode): static
    {
        if (is_null($countryCode)) {
            array_push($this->openAPINullablesSetToNull, 'countryCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countryCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($countryCode) && (mb_strlen($countryCode) > 2)) {
            throw new InvalidArgumentException('invalid length for $countryCode when calling ContactBankDetailsUpdateable., must be smaller than or equal to 2.');
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets bankAddress
     *
     * @return string|null
     */
    public function getBankAddress(): ?string
    {
        return $this->container['bankAddress'];
    }

    /**
     * Sets bankAddress
     *
     * @param string|null $bankAddress Optional, bank branch address
     *
     * @return $this
     */
    public function setBankAddress(?string $bankAddress): static
    {
        if (is_null($bankAddress)) {
            array_push($this->openAPINullablesSetToNull, 'bankAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankAddress) && (mb_strlen($bankAddress) > 100)) {
            throw new InvalidArgumentException('invalid length for $bankAddress when calling ContactBankDetailsUpdateable., must be smaller than or equal to 100.');
        }

        $this->container['bankAddress'] = $bankAddress;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName(): ?string
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName Optional, account name
     *
     * @return $this
     */
    public function setAccountName(?string $accountName): static
    {
        if (is_null($accountName)) {
            array_push($this->openAPINullablesSetToNull, 'accountName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountName) && (mb_strlen($accountName) > 50)) {
            throw new InvalidArgumentException('invalid length for $accountName when calling ContactBankDetailsUpdateable., must be smaller than or equal to 50.');
        }

        $this->container['accountName'] = $accountName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


