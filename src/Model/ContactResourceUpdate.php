<?php
/**
 * ContactResourceUpdate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ContactResourceUpdate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContactResourceUpdate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ContactResourceUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'isActive' => 'bool',
        'resourceGroupId' => 'string',
        'departmentId' => 'string',
        'locationId' => 'string',
        'nationalInsuranceNo' => 'string',
        'currency' => 'string',
        'absenceGroupId' => 'string',
        'costCentreId' => 'string',
        'managerResourceId' => 'string',
        'uniqueTaxpayerReference' => 'string',
        'isSalesperson' => 'bool',
        'isBuyer' => 'bool',
        'isRequestor' => 'bool',
        'allowExpense' => 'bool',
        'allowTask' => 'bool',
        'allowTimesheet' => 'bool',
        'hasEmployment' => 'bool',
        'hasUmbrella' => 'bool',
        'paymentMethodId' => 'string',
        'paymentTermsId' => 'string',
        'sendRemittance' => 'bool',
        'ext' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'isActive' => null,
        'resourceGroupId' => null,
        'departmentId' => null,
        'locationId' => null,
        'nationalInsuranceNo' => null,
        'currency' => null,
        'absenceGroupId' => null,
        'costCentreId' => null,
        'managerResourceId' => null,
        'uniqueTaxpayerReference' => null,
        'isSalesperson' => null,
        'isBuyer' => null,
        'isRequestor' => null,
        'allowExpense' => null,
        'allowTask' => null,
        'allowTimesheet' => null,
        'hasEmployment' => null,
        'hasUmbrella' => null,
        'paymentMethodId' => null,
        'paymentTermsId' => null,
        'sendRemittance' => null,
        'ext' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'isActive' => true,
        'resourceGroupId' => true,
        'departmentId' => true,
        'locationId' => true,
        'nationalInsuranceNo' => true,
        'currency' => true,
        'absenceGroupId' => true,
        'costCentreId' => true,
        'managerResourceId' => true,
        'uniqueTaxpayerReference' => true,
        'isSalesperson' => true,
        'isBuyer' => true,
        'isRequestor' => true,
        'allowExpense' => true,
        'allowTask' => true,
        'allowTimesheet' => true,
        'hasEmployment' => true,
        'hasUmbrella' => true,
        'paymentMethodId' => true,
        'paymentTermsId' => true,
        'sendRemittance' => true,
        'ext' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'isActive' => 'isActive',
        'resourceGroupId' => 'resourceGroupId',
        'departmentId' => 'departmentId',
        'locationId' => 'locationId',
        'nationalInsuranceNo' => 'nationalInsuranceNo',
        'currency' => 'currency',
        'absenceGroupId' => 'absenceGroupId',
        'costCentreId' => 'costCentreId',
        'managerResourceId' => 'managerResourceId',
        'uniqueTaxpayerReference' => 'uniqueTaxpayerReference',
        'isSalesperson' => 'isSalesperson',
        'isBuyer' => 'isBuyer',
        'isRequestor' => 'isRequestor',
        'allowExpense' => 'allowExpense',
        'allowTask' => 'allowTask',
        'allowTimesheet' => 'allowTimesheet',
        'hasEmployment' => 'hasEmployment',
        'hasUmbrella' => 'hasUmbrella',
        'paymentMethodId' => 'paymentMethodId',
        'paymentTermsId' => 'paymentTermsId',
        'sendRemittance' => 'sendRemittance',
        'ext' => 'ext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'isActive' => 'setIsActive',
        'resourceGroupId' => 'setResourceGroupId',
        'departmentId' => 'setDepartmentId',
        'locationId' => 'setLocationId',
        'nationalInsuranceNo' => 'setNationalInsuranceNo',
        'currency' => 'setCurrency',
        'absenceGroupId' => 'setAbsenceGroupId',
        'costCentreId' => 'setCostCentreId',
        'managerResourceId' => 'setManagerResourceId',
        'uniqueTaxpayerReference' => 'setUniqueTaxpayerReference',
        'isSalesperson' => 'setIsSalesperson',
        'isBuyer' => 'setIsBuyer',
        'isRequestor' => 'setIsRequestor',
        'allowExpense' => 'setAllowExpense',
        'allowTask' => 'setAllowTask',
        'allowTimesheet' => 'setAllowTimesheet',
        'hasEmployment' => 'setHasEmployment',
        'hasUmbrella' => 'setHasUmbrella',
        'paymentMethodId' => 'setPaymentMethodId',
        'paymentTermsId' => 'setPaymentTermsId',
        'sendRemittance' => 'setSendRemittance',
        'ext' => 'setExt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'isActive' => 'getIsActive',
        'resourceGroupId' => 'getResourceGroupId',
        'departmentId' => 'getDepartmentId',
        'locationId' => 'getLocationId',
        'nationalInsuranceNo' => 'getNationalInsuranceNo',
        'currency' => 'getCurrency',
        'absenceGroupId' => 'getAbsenceGroupId',
        'costCentreId' => 'getCostCentreId',
        'managerResourceId' => 'getManagerResourceId',
        'uniqueTaxpayerReference' => 'getUniqueTaxpayerReference',
        'isSalesperson' => 'getIsSalesperson',
        'isBuyer' => 'getIsBuyer',
        'isRequestor' => 'getIsRequestor',
        'allowExpense' => 'getAllowExpense',
        'allowTask' => 'getAllowTask',
        'allowTimesheet' => 'getAllowTimesheet',
        'hasEmployment' => 'getHasEmployment',
        'hasUmbrella' => 'getHasUmbrella',
        'paymentMethodId' => 'getPaymentMethodId',
        'paymentTermsId' => 'getPaymentTermsId',
        'sendRemittance' => 'getSendRemittance',
        'ext' => 'getExt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('resourceGroupId', $data ?? [], null);
        $this->setIfExists('departmentId', $data ?? [], null);
        $this->setIfExists('locationId', $data ?? [], null);
        $this->setIfExists('nationalInsuranceNo', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('absenceGroupId', $data ?? [], null);
        $this->setIfExists('costCentreId', $data ?? [], null);
        $this->setIfExists('managerResourceId', $data ?? [], null);
        $this->setIfExists('uniqueTaxpayerReference', $data ?? [], null);
        $this->setIfExists('isSalesperson', $data ?? [], null);
        $this->setIfExists('isBuyer', $data ?? [], null);
        $this->setIfExists('isRequestor', $data ?? [], null);
        $this->setIfExists('allowExpense', $data ?? [], null);
        $this->setIfExists('allowTask', $data ?? [], null);
        $this->setIfExists('allowTimesheet', $data ?? [], null);
        $this->setIfExists('hasEmployment', $data ?? [], null);
        $this->setIfExists('hasUmbrella', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('paymentTermsId', $data ?? [], null);
        $this->setIfExists('sendRemittance', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['nationalInsuranceNo']) && (mb_strlen($this->container['nationalInsuranceNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'nationalInsuranceNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['uniqueTaxpayerReference']) && (mb_strlen($this->container['uniqueTaxpayerReference']) > 50)) {
            $invalidProperties[] = "invalid value for 'uniqueTaxpayerReference', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive isActive
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            array_push($this->openAPINullablesSetToNull, 'isActive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isActive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets resourceGroupId
     *
     * @return string|null
     */
    public function getResourceGroupId(): ?string
    {
        return $this->container['resourceGroupId'];
    }

    /**
     * Sets resourceGroupId
     *
     * @param string|null $resourceGroupId Resource group id
     *
     * @return $this
     */
    public function setResourceGroupId(?string $resourceGroupId): static
    {
        if (is_null($resourceGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'resourceGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resourceGroupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resourceGroupId'] = $resourceGroupId;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string|null
     */
    public function getDepartmentId(): ?string
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string|null $departmentId Resource department id or code
     *
     * @return $this
     */
    public function setDepartmentId(?string $departmentId): static
    {
        if (is_null($departmentId)) {
            array_push($this->openAPINullablesSetToNull, 'departmentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentId'] = $departmentId;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return string|null
     */
    public function getLocationId(): ?string
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param string|null $locationId Resource location id or code
     *
     * @return $this
     */
    public function setLocationId(?string $locationId): static
    {
        if (is_null($locationId)) {
            array_push($this->openAPINullablesSetToNull, 'locationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets nationalInsuranceNo
     *
     * @return string|null
     */
    public function getNationalInsuranceNo(): ?string
    {
        return $this->container['nationalInsuranceNo'];
    }

    /**
     * Sets nationalInsuranceNo
     *
     * @param string|null $nationalInsuranceNo Resource national insurance number
     *
     * @return $this
     */
    public function setNationalInsuranceNo(?string $nationalInsuranceNo): static
    {
        if (is_null($nationalInsuranceNo)) {
            array_push($this->openAPINullablesSetToNull, 'nationalInsuranceNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nationalInsuranceNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nationalInsuranceNo) && (mb_strlen($nationalInsuranceNo) > 50)) {
            throw new InvalidArgumentException('invalid length for $nationalInsuranceNo when calling ContactResourceUpdate., must be smaller than or equal to 50.');
        }

        $this->container['nationalInsuranceNo'] = $nationalInsuranceNo;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 5)) {
            throw new InvalidArgumentException('invalid length for $currency when calling ContactResourceUpdate., must be smaller than or equal to 5.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets absenceGroupId
     *
     * @return string|null
     */
    public function getAbsenceGroupId(): ?string
    {
        return $this->container['absenceGroupId'];
    }

    /**
     * Sets absenceGroupId
     *
     * @param string|null $absenceGroupId Resource absence group id or code
     *
     * @return $this
     */
    public function setAbsenceGroupId(?string $absenceGroupId): static
    {
        if (is_null($absenceGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'absenceGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('absenceGroupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['absenceGroupId'] = $absenceGroupId;

        return $this;
    }

    /**
     * Gets costCentreId
     *
     * @return string|null
     */
    public function getCostCentreId(): ?string
    {
        return $this->container['costCentreId'];
    }

    /**
     * Sets costCentreId
     *
     * @param string|null $costCentreId Resource cost centre id or code
     *
     * @return $this
     */
    public function setCostCentreId(?string $costCentreId): static
    {
        if (is_null($costCentreId)) {
            array_push($this->openAPINullablesSetToNull, 'costCentreId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentreId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentreId'] = $costCentreId;

        return $this;
    }

    /**
     * Gets managerResourceId
     *
     * @return string|null
     */
    public function getManagerResourceId(): ?string
    {
        return $this->container['managerResourceId'];
    }

    /**
     * Sets managerResourceId
     *
     * @param string|null $managerResourceId Resource manager id or code
     *
     * @return $this
     */
    public function setManagerResourceId(?string $managerResourceId): static
    {
        if (is_null($managerResourceId)) {
            array_push($this->openAPINullablesSetToNull, 'managerResourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('managerResourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['managerResourceId'] = $managerResourceId;

        return $this;
    }

    /**
     * Gets uniqueTaxpayerReference
     *
     * @return string|null
     */
    public function getUniqueTaxpayerReference(): ?string
    {
        return $this->container['uniqueTaxpayerReference'];
    }

    /**
     * Sets uniqueTaxpayerReference
     *
     * @param string|null $uniqueTaxpayerReference Resource tax reference
     *
     * @return $this
     */
    public function setUniqueTaxpayerReference(?string $uniqueTaxpayerReference): static
    {
        if (is_null($uniqueTaxpayerReference)) {
            array_push($this->openAPINullablesSetToNull, 'uniqueTaxpayerReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uniqueTaxpayerReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uniqueTaxpayerReference) && (mb_strlen($uniqueTaxpayerReference) > 50)) {
            throw new InvalidArgumentException('invalid length for $uniqueTaxpayerReference when calling ContactResourceUpdate., must be smaller than or equal to 50.');
        }

        $this->container['uniqueTaxpayerReference'] = $uniqueTaxpayerReference;

        return $this;
    }

    /**
     * Gets isSalesperson
     *
     * @return bool|null
     */
    public function getIsSalesperson(): ?bool
    {
        return $this->container['isSalesperson'];
    }

    /**
     * Sets isSalesperson
     *
     * @param bool|null $isSalesperson Resource is a sales person
     *
     * @return $this
     */
    public function setIsSalesperson(?bool $isSalesperson): static
    {
        if (is_null($isSalesperson)) {
            array_push($this->openAPINullablesSetToNull, 'isSalesperson');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isSalesperson', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isSalesperson'] = $isSalesperson;

        return $this;
    }

    /**
     * Gets isBuyer
     *
     * @return bool|null
     */
    public function getIsBuyer(): ?bool
    {
        return $this->container['isBuyer'];
    }

    /**
     * Sets isBuyer
     *
     * @param bool|null $isBuyer Resource is responsible for purchase orders
     *
     * @return $this
     */
    public function setIsBuyer(?bool $isBuyer): static
    {
        if (is_null($isBuyer)) {
            array_push($this->openAPINullablesSetToNull, 'isBuyer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isBuyer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isBuyer'] = $isBuyer;

        return $this;
    }

    /**
     * Gets isRequestor
     *
     * @return bool|null
     */
    public function getIsRequestor(): ?bool
    {
        return $this->container['isRequestor'];
    }

    /**
     * Sets isRequestor
     *
     * @param bool|null $isRequestor Resource is responsible for requisitions
     *
     * @return $this
     */
    public function setIsRequestor(?bool $isRequestor): static
    {
        if (is_null($isRequestor)) {
            array_push($this->openAPINullablesSetToNull, 'isRequestor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isRequestor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isRequestor'] = $isRequestor;

        return $this;
    }

    /**
     * Gets allowExpense
     *
     * @return bool|null
     */
    public function getAllowExpense(): ?bool
    {
        return $this->container['allowExpense'];
    }

    /**
     * Sets allowExpense
     *
     * @param bool|null $allowExpense Resource is allowed expenses
     *
     * @return $this
     */
    public function setAllowExpense(?bool $allowExpense): static
    {
        if (is_null($allowExpense)) {
            array_push($this->openAPINullablesSetToNull, 'allowExpense');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowExpense', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowExpense'] = $allowExpense;

        return $this;
    }

    /**
     * Gets allowTask
     *
     * @return bool|null
     */
    public function getAllowTask(): ?bool
    {
        return $this->container['allowTask'];
    }

    /**
     * Sets allowTask
     *
     * @param bool|null $allowTask Resource can be allocated tasks
     *
     * @return $this
     */
    public function setAllowTask(?bool $allowTask): static
    {
        if (is_null($allowTask)) {
            array_push($this->openAPINullablesSetToNull, 'allowTask');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowTask', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowTask'] = $allowTask;

        return $this;
    }

    /**
     * Gets allowTimesheet
     *
     * @return bool|null
     */
    public function getAllowTimesheet(): ?bool
    {
        return $this->container['allowTimesheet'];
    }

    /**
     * Sets allowTimesheet
     *
     * @param bool|null $allowTimesheet Resource can record timesheets
     *
     * @return $this
     */
    public function setAllowTimesheet(?bool $allowTimesheet): static
    {
        if (is_null($allowTimesheet)) {
            array_push($this->openAPINullablesSetToNull, 'allowTimesheet');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowTimesheet', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowTimesheet'] = $allowTimesheet;

        return $this;
    }

    /**
     * Gets hasEmployment
     *
     * @return bool|null
     */
    public function getHasEmployment(): ?bool
    {
        return $this->container['hasEmployment'];
    }

    /**
     * Sets hasEmployment
     *
     * @param bool|null $hasEmployment Resource can record employment
     *
     * @return $this
     */
    public function setHasEmployment(?bool $hasEmployment): static
    {
        if (is_null($hasEmployment)) {
            array_push($this->openAPINullablesSetToNull, 'hasEmployment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasEmployment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasEmployment'] = $hasEmployment;

        return $this;
    }

    /**
     * Gets hasUmbrella
     *
     * @return bool|null
     */
    public function getHasUmbrella(): ?bool
    {
        return $this->container['hasUmbrella'];
    }

    /**
     * Sets hasUmbrella
     *
     * @param bool|null $hasUmbrella Resource can record umbrella supplier
     *
     * @return $this
     */
    public function setHasUmbrella(?bool $hasUmbrella): static
    {
        if (is_null($hasUmbrella)) {
            array_push($this->openAPINullablesSetToNull, 'hasUmbrella');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasUmbrella', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasUmbrella'] = $hasUmbrella;

        return $this;
    }

    /**
     * Gets paymentMethodId
     *
     * @return string|null
     */
    public function getPaymentMethodId(): ?string
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId
     *
     * @param string|null $paymentMethodId Expense payment method id or code
     *
     * @return $this
     */
    public function setPaymentMethodId(?string $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets paymentTermsId
     *
     * @return string|null
     */
    public function getPaymentTermsId(): ?string
    {
        return $this->container['paymentTermsId'];
    }

    /**
     * Sets paymentTermsId
     *
     * @param string|null $paymentTermsId Expense payment terms id or code
     *
     * @return $this
     */
    public function setPaymentTermsId(?string $paymentTermsId): static
    {
        if (is_null($paymentTermsId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentTermsId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTermsId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTermsId'] = $paymentTermsId;

        return $this;
    }

    /**
     * Gets sendRemittance
     *
     * @return bool|null
     */
    public function getSendRemittance(): ?bool
    {
        return $this->container['sendRemittance'];
    }

    /**
     * Sets sendRemittance
     *
     * @param bool|null $sendRemittance Expense remittance advice produced
     *
     * @return $this
     */
    public function setSendRemittance(?bool $sendRemittance): static
    {
        if (is_null($sendRemittance)) {
            array_push($this->openAPINullablesSetToNull, 'sendRemittance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendRemittance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendRemittance'] = $sendRemittance;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return array<string,mixed>|null
     */
    public function getExt(): ?array
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,mixed>|null $ext Custom fields
     *
     * @return $this
     */
    public function setExt(?array $ext): static
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


