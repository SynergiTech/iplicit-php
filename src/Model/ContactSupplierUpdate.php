<?php
/**
 * ContactSupplierUpdate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ContactSupplierUpdate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContactSupplierUpdate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ContactSupplierUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'contactGroupSupplierId' => 'string',
        'allowInvoiceDuplication' => 'bool',
        'currency' => 'string',
        'paymentMethodId' => 'string',
        'payTermId' => 'string',
        'sendRemittance' => 'bool',
        'creditLimit' => 'float',
        'taxBandId' => 'string',
        'taxBandFixed' => 'bool',
        'taxAuthorityId' => 'string',
        'isActive' => 'bool',
        'projectId' => 'string',
        'applyDomesticReverseCharge' => 'bool',
        'costCentreId' => 'string',
        'costCentreFixed' => 'bool',
        'departmentId' => 'string',
        'departmentFixed' => 'bool',
        'productId' => 'string',
        'accountId' => 'string',
        'warningMessage' => 'string',
        'ext' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'contactGroupSupplierId' => null,
        'allowInvoiceDuplication' => null,
        'currency' => null,
        'paymentMethodId' => null,
        'payTermId' => null,
        'sendRemittance' => null,
        'creditLimit' => 'double',
        'taxBandId' => null,
        'taxBandFixed' => null,
        'taxAuthorityId' => null,
        'isActive' => null,
        'projectId' => null,
        'applyDomesticReverseCharge' => null,
        'costCentreId' => null,
        'costCentreFixed' => null,
        'departmentId' => null,
        'departmentFixed' => null,
        'productId' => null,
        'accountId' => null,
        'warningMessage' => null,
        'ext' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'contactGroupSupplierId' => true,
        'allowInvoiceDuplication' => true,
        'currency' => true,
        'paymentMethodId' => true,
        'payTermId' => true,
        'sendRemittance' => true,
        'creditLimit' => true,
        'taxBandId' => true,
        'taxBandFixed' => true,
        'taxAuthorityId' => true,
        'isActive' => true,
        'projectId' => true,
        'applyDomesticReverseCharge' => true,
        'costCentreId' => true,
        'costCentreFixed' => true,
        'departmentId' => true,
        'departmentFixed' => true,
        'productId' => true,
        'accountId' => true,
        'warningMessage' => true,
        'ext' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'contactGroupSupplierId' => 'contactGroupSupplierId',
        'allowInvoiceDuplication' => 'allowInvoiceDuplication',
        'currency' => 'currency',
        'paymentMethodId' => 'paymentMethodId',
        'payTermId' => 'payTermId',
        'sendRemittance' => 'sendRemittance',
        'creditLimit' => 'creditLimit',
        'taxBandId' => 'taxBandId',
        'taxBandFixed' => 'taxBandFixed',
        'taxAuthorityId' => 'taxAuthorityId',
        'isActive' => 'isActive',
        'projectId' => 'projectId',
        'applyDomesticReverseCharge' => 'applyDomesticReverseCharge',
        'costCentreId' => 'costCentreId',
        'costCentreFixed' => 'costCentreFixed',
        'departmentId' => 'departmentId',
        'departmentFixed' => 'departmentFixed',
        'productId' => 'productId',
        'accountId' => 'accountId',
        'warningMessage' => 'warningMessage',
        'ext' => 'ext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'contactGroupSupplierId' => 'setContactGroupSupplierId',
        'allowInvoiceDuplication' => 'setAllowInvoiceDuplication',
        'currency' => 'setCurrency',
        'paymentMethodId' => 'setPaymentMethodId',
        'payTermId' => 'setPayTermId',
        'sendRemittance' => 'setSendRemittance',
        'creditLimit' => 'setCreditLimit',
        'taxBandId' => 'setTaxBandId',
        'taxBandFixed' => 'setTaxBandFixed',
        'taxAuthorityId' => 'setTaxAuthorityId',
        'isActive' => 'setIsActive',
        'projectId' => 'setProjectId',
        'applyDomesticReverseCharge' => 'setApplyDomesticReverseCharge',
        'costCentreId' => 'setCostCentreId',
        'costCentreFixed' => 'setCostCentreFixed',
        'departmentId' => 'setDepartmentId',
        'departmentFixed' => 'setDepartmentFixed',
        'productId' => 'setProductId',
        'accountId' => 'setAccountId',
        'warningMessage' => 'setWarningMessage',
        'ext' => 'setExt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'contactGroupSupplierId' => 'getContactGroupSupplierId',
        'allowInvoiceDuplication' => 'getAllowInvoiceDuplication',
        'currency' => 'getCurrency',
        'paymentMethodId' => 'getPaymentMethodId',
        'payTermId' => 'getPayTermId',
        'sendRemittance' => 'getSendRemittance',
        'creditLimit' => 'getCreditLimit',
        'taxBandId' => 'getTaxBandId',
        'taxBandFixed' => 'getTaxBandFixed',
        'taxAuthorityId' => 'getTaxAuthorityId',
        'isActive' => 'getIsActive',
        'projectId' => 'getProjectId',
        'applyDomesticReverseCharge' => 'getApplyDomesticReverseCharge',
        'costCentreId' => 'getCostCentreId',
        'costCentreFixed' => 'getCostCentreFixed',
        'departmentId' => 'getDepartmentId',
        'departmentFixed' => 'getDepartmentFixed',
        'productId' => 'getProductId',
        'accountId' => 'getAccountId',
        'warningMessage' => 'getWarningMessage',
        'ext' => 'getExt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contactGroupSupplierId', $data ?? [], null);
        $this->setIfExists('allowInvoiceDuplication', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('payTermId', $data ?? [], null);
        $this->setIfExists('sendRemittance', $data ?? [], null);
        $this->setIfExists('creditLimit', $data ?? [], null);
        $this->setIfExists('taxBandId', $data ?? [], null);
        $this->setIfExists('taxBandFixed', $data ?? [], null);
        $this->setIfExists('taxAuthorityId', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('applyDomesticReverseCharge', $data ?? [], null);
        $this->setIfExists('costCentreId', $data ?? [], null);
        $this->setIfExists('costCentreFixed', $data ?? [], null);
        $this->setIfExists('departmentId', $data ?? [], null);
        $this->setIfExists('departmentFixed', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('warningMessage', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['contactGroupSupplierId']) && (mb_strlen($this->container['contactGroupSupplierId']) > 50)) {
            $invalidProperties[] = "invalid value for 'contactGroupSupplierId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['paymentMethodId']) && (mb_strlen($this->container['paymentMethodId']) > 50)) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['payTermId']) && (mb_strlen($this->container['payTermId']) > 50)) {
            $invalidProperties[] = "invalid value for 'payTermId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxBandId']) && (mb_strlen($this->container['taxBandId']) > 50)) {
            $invalidProperties[] = "invalid value for 'taxBandId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxAuthorityId']) && (mb_strlen($this->container['taxAuthorityId']) > 50)) {
            $invalidProperties[] = "invalid value for 'taxAuthorityId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['projectId']) && (mb_strlen($this->container['projectId']) > 50)) {
            $invalidProperties[] = "invalid value for 'projectId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['costCentreId']) && (mb_strlen($this->container['costCentreId']) > 50)) {
            $invalidProperties[] = "invalid value for 'costCentreId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['departmentId']) && (mb_strlen($this->container['departmentId']) > 50)) {
            $invalidProperties[] = "invalid value for 'departmentId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['productId']) && (mb_strlen($this->container['productId']) > 50)) {
            $invalidProperties[] = "invalid value for 'productId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['accountId']) && (mb_strlen($this->container['accountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactGroupSupplierId
     *
     * @return string|null
     */
    public function getContactGroupSupplierId(): ?string
    {
        return $this->container['contactGroupSupplierId'];
    }

    /**
     * Sets contactGroupSupplierId
     *
     * @param string|null $contactGroupSupplierId The *Supplier group*. See `ContactGroupSupplier` catalog.
     *
     * @return $this
     */
    public function setContactGroupSupplierId(?string $contactGroupSupplierId): static
    {
        if (is_null($contactGroupSupplierId)) {
            array_push($this->openAPINullablesSetToNull, 'contactGroupSupplierId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactGroupSupplierId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contactGroupSupplierId) && (mb_strlen($contactGroupSupplierId) > 50)) {
            throw new InvalidArgumentException('invalid length for $contactGroupSupplierId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['contactGroupSupplierId'] = $contactGroupSupplierId;

        return $this;
    }

    /**
     * Gets allowInvoiceDuplication
     *
     * @return bool|null
     */
    public function getAllowInvoiceDuplication(): ?bool
    {
        return $this->container['allowInvoiceDuplication'];
    }

    /**
     * Sets allowInvoiceDuplication
     *
     * @param bool|null $allowInvoiceDuplication allowInvoiceDuplication
     *
     * @return $this
     */
    public function setAllowInvoiceDuplication(?bool $allowInvoiceDuplication): static
    {
        if (is_null($allowInvoiceDuplication)) {
            array_push($this->openAPINullablesSetToNull, 'allowInvoiceDuplication');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowInvoiceDuplication', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowInvoiceDuplication'] = $allowInvoiceDuplication;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new InvalidArgumentException('invalid length for $currency when calling ContactSupplierUpdate., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets paymentMethodId
     *
     * @return string|null
     */
    public function getPaymentMethodId(): ?string
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId
     *
     * @param string|null $paymentMethodId paymentMethodId
     *
     * @return $this
     */
    public function setPaymentMethodId(?string $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentMethodId) && (mb_strlen($paymentMethodId) > 50)) {
            throw new InvalidArgumentException('invalid length for $paymentMethodId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets payTermId
     *
     * @return string|null
     */
    public function getPayTermId(): ?string
    {
        return $this->container['payTermId'];
    }

    /**
     * Sets payTermId
     *
     * @param string|null $payTermId payTermId
     *
     * @return $this
     */
    public function setPayTermId(?string $payTermId): static
    {
        if (is_null($payTermId)) {
            array_push($this->openAPINullablesSetToNull, 'payTermId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payTermId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payTermId) && (mb_strlen($payTermId) > 50)) {
            throw new InvalidArgumentException('invalid length for $payTermId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['payTermId'] = $payTermId;

        return $this;
    }

    /**
     * Gets sendRemittance
     *
     * @return bool|null
     */
    public function getSendRemittance(): ?bool
    {
        return $this->container['sendRemittance'];
    }

    /**
     * Sets sendRemittance
     *
     * @param bool|null $sendRemittance sendRemittance
     *
     * @return $this
     */
    public function setSendRemittance(?bool $sendRemittance): static
    {
        if (is_null($sendRemittance)) {
            array_push($this->openAPINullablesSetToNull, 'sendRemittance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendRemittance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendRemittance'] = $sendRemittance;

        return $this;
    }

    /**
     * Gets creditLimit
     *
     * @return float|null
     */
    public function getCreditLimit(): ?float
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     *
     * @param float|null $creditLimit creditLimit
     *
     * @return $this
     */
    public function setCreditLimit(?float $creditLimit): static
    {
        if (is_null($creditLimit)) {
            array_push($this->openAPINullablesSetToNull, 'creditLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creditLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets taxBandId
     *
     * @return string|null
     */
    public function getTaxBandId(): ?string
    {
        return $this->container['taxBandId'];
    }

    /**
     * Sets taxBandId
     *
     * @param string|null $taxBandId taxBandId
     *
     * @return $this
     */
    public function setTaxBandId(?string $taxBandId): static
    {
        if (is_null($taxBandId)) {
            array_push($this->openAPINullablesSetToNull, 'taxBandId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxBandId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxBandId) && (mb_strlen($taxBandId) > 50)) {
            throw new InvalidArgumentException('invalid length for $taxBandId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['taxBandId'] = $taxBandId;

        return $this;
    }

    /**
     * Gets taxBandFixed
     *
     * @return bool|null
     */
    public function getTaxBandFixed(): ?bool
    {
        return $this->container['taxBandFixed'];
    }

    /**
     * Sets taxBandFixed
     *
     * @param bool|null $taxBandFixed taxBandFixed
     *
     * @return $this
     */
    public function setTaxBandFixed(?bool $taxBandFixed): static
    {
        if (is_null($taxBandFixed)) {
            array_push($this->openAPINullablesSetToNull, 'taxBandFixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxBandFixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxBandFixed'] = $taxBandFixed;

        return $this;
    }

    /**
     * Gets taxAuthorityId
     *
     * @return string|null
     */
    public function getTaxAuthorityId(): ?string
    {
        return $this->container['taxAuthorityId'];
    }

    /**
     * Sets taxAuthorityId
     *
     * @param string|null $taxAuthorityId taxAuthorityId
     *
     * @return $this
     */
    public function setTaxAuthorityId(?string $taxAuthorityId): static
    {
        if (is_null($taxAuthorityId)) {
            array_push($this->openAPINullablesSetToNull, 'taxAuthorityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxAuthorityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxAuthorityId) && (mb_strlen($taxAuthorityId) > 50)) {
            throw new InvalidArgumentException('invalid length for $taxAuthorityId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['taxAuthorityId'] = $taxAuthorityId;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive isActive
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            array_push($this->openAPINullablesSetToNull, 'isActive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isActive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId(): ?string
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId projectId
     *
     * @return $this
     */
    public function setProjectId(?string $projectId): static
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($projectId) && (mb_strlen($projectId) > 50)) {
            throw new InvalidArgumentException('invalid length for $projectId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets applyDomesticReverseCharge
     *
     * @return bool|null
     */
    public function getApplyDomesticReverseCharge(): ?bool
    {
        return $this->container['applyDomesticReverseCharge'];
    }

    /**
     * Sets applyDomesticReverseCharge
     *
     * @param bool|null $applyDomesticReverseCharge applyDomesticReverseCharge
     *
     * @return $this
     */
    public function setApplyDomesticReverseCharge(?bool $applyDomesticReverseCharge): static
    {
        if (is_null($applyDomesticReverseCharge)) {
            array_push($this->openAPINullablesSetToNull, 'applyDomesticReverseCharge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applyDomesticReverseCharge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applyDomesticReverseCharge'] = $applyDomesticReverseCharge;

        return $this;
    }

    /**
     * Gets costCentreId
     *
     * @return string|null
     */
    public function getCostCentreId(): ?string
    {
        return $this->container['costCentreId'];
    }

    /**
     * Sets costCentreId
     *
     * @param string|null $costCentreId Default cost centre id or code
     *
     * @return $this
     */
    public function setCostCentreId(?string $costCentreId): static
    {
        if (is_null($costCentreId)) {
            array_push($this->openAPINullablesSetToNull, 'costCentreId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentreId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($costCentreId) && (mb_strlen($costCentreId) > 50)) {
            throw new InvalidArgumentException('invalid length for $costCentreId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['costCentreId'] = $costCentreId;

        return $this;
    }

    /**
     * Gets costCentreFixed
     *
     * @return bool|null
     */
    public function getCostCentreFixed(): ?bool
    {
        return $this->container['costCentreFixed'];
    }

    /**
     * Sets costCentreFixed
     *
     * @param bool|null $costCentreFixed costCentreFixed
     *
     * @return $this
     */
    public function setCostCentreFixed(?bool $costCentreFixed): static
    {
        if (is_null($costCentreFixed)) {
            array_push($this->openAPINullablesSetToNull, 'costCentreFixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentreFixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentreFixed'] = $costCentreFixed;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string|null
     */
    public function getDepartmentId(): ?string
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string|null $departmentId Default department id or code
     *
     * @return $this
     */
    public function setDepartmentId(?string $departmentId): static
    {
        if (is_null($departmentId)) {
            array_push($this->openAPINullablesSetToNull, 'departmentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($departmentId) && (mb_strlen($departmentId) > 50)) {
            throw new InvalidArgumentException('invalid length for $departmentId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['departmentId'] = $departmentId;

        return $this;
    }

    /**
     * Gets departmentFixed
     *
     * @return bool|null
     */
    public function getDepartmentFixed(): ?bool
    {
        return $this->container['departmentFixed'];
    }

    /**
     * Sets departmentFixed
     *
     * @param bool|null $departmentFixed departmentFixed
     *
     * @return $this
     */
    public function setDepartmentFixed(?bool $departmentFixed): static
    {
        if (is_null($departmentFixed)) {
            array_push($this->openAPINullablesSetToNull, 'departmentFixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentFixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentFixed'] = $departmentFixed;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId Default product id or code
     *
     * @return $this
     */
    public function setProductId(?string $productId): static
    {
        if (is_null($productId)) {
            array_push($this->openAPINullablesSetToNull, 'productId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productId) && (mb_strlen($productId) > 50)) {
            throw new InvalidArgumentException('invalid length for $productId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId Default account id or code
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): static
    {
        if (is_null($accountId)) {
            array_push($this->openAPINullablesSetToNull, 'accountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountId) && (mb_strlen($accountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $accountId when calling ContactSupplierUpdate., must be smaller than or equal to 50.');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets warningMessage
     *
     * @return string|null
     */
    public function getWarningMessage(): ?string
    {
        return $this->container['warningMessage'];
    }

    /**
     * Sets warningMessage
     *
     * @param string|null $warningMessage warningMessage
     *
     * @return $this
     */
    public function setWarningMessage(?string $warningMessage): static
    {
        if (is_null($warningMessage)) {
            array_push($this->openAPINullablesSetToNull, 'warningMessage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warningMessage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warningMessage'] = $warningMessage;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return array<string,mixed>|null
     */
    public function getExt(): ?array
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,mixed>|null $ext Custom fields
     *
     * @return $this
     */
    public function setExt(?array $ext): static
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


