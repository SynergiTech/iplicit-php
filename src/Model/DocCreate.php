<?php
/**
 * DocCreate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * DocCreate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DocCreate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DocCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'docNo' => 'string',
        'transNo' => 'int',
        'docSerieId' => 'string',
        'docTypeId' => 'string',
        'legalEntityId' => 'string',
        'cdacId' => 'string',
        'contactAccountId' => 'string',
        'periodId' => 'string',
        'accountId' => 'string',
        'post' => 'array<string,string>',
        'taxAuthorityId' => 'string',
        'paymentMethodId' => 'string',
        'responsibleResourceId' => 'string',
        'projectId' => 'string',
        'docDate' => '\DateTime',
        'description' => 'string',
        'taxDate' => '\DateTime',
        'dueDate' => '\DateTime',
        'currency' => 'string',
        'currencyRate' => 'float',
        'isNetEntry' => 'bool',
        'explicitAmounts' => 'bool',
        'theirDocNo' => 'string',
        'theirRef' => 'string',
        'intRef' => 'string',
        'legacyRef' => 'string',
        'details' => '\SynergiTech\Iplicit\Model\DocDetailCreate[]',
        'bankAccountId' => 'string',
        'bankCurrencyRate' => 'float',
        'bankCurrencyAmount' => 'float',
        'bankRef' => 'string',
        'currencyAmount' => 'float',
        'allocateAuto' => 'bool',
        'allocations' => '\SynergiTech\Iplicit\Model\DocAllocationCreate[]',
        'deliveryAddress' => '\SynergiTech\Iplicit\Model\ContactAddressInline',
        'billingAddress' => '\SynergiTech\Iplicit\Model\ContactAddressInline',
        'netCurrencyAmount' => 'float',
        'taxCurrencyAmount' => 'float',
        'grossCurrencyAmount' => 'float',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'grossAmount' => 'float',
        'fromStockLocationId' => 'string',
        'toStockLocationId' => 'string',
        'stockDate' => '\DateTime',
        'paymentTermsId' => 'string',
        'ext' => 'array<string,mixed>',
        'textHeader' => 'string',
        'textFooter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'docNo' => null,
        'transNo' => 'int64',
        'docSerieId' => null,
        'docTypeId' => null,
        'legalEntityId' => null,
        'cdacId' => null,
        'contactAccountId' => null,
        'periodId' => null,
        'accountId' => null,
        'post' => null,
        'taxAuthorityId' => null,
        'paymentMethodId' => null,
        'responsibleResourceId' => null,
        'projectId' => null,
        'docDate' => 'date-time',
        'description' => null,
        'taxDate' => 'date-time',
        'dueDate' => 'date-time',
        'currency' => null,
        'currencyRate' => 'double',
        'isNetEntry' => null,
        'explicitAmounts' => null,
        'theirDocNo' => null,
        'theirRef' => null,
        'intRef' => null,
        'legacyRef' => null,
        'details' => null,
        'bankAccountId' => null,
        'bankCurrencyRate' => 'double',
        'bankCurrencyAmount' => 'double',
        'bankRef' => null,
        'currencyAmount' => 'double',
        'allocateAuto' => null,
        'allocations' => null,
        'deliveryAddress' => null,
        'billingAddress' => null,
        'netCurrencyAmount' => 'double',
        'taxCurrencyAmount' => 'double',
        'grossCurrencyAmount' => 'double',
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'grossAmount' => 'double',
        'fromStockLocationId' => null,
        'toStockLocationId' => null,
        'stockDate' => 'date-time',
        'paymentTermsId' => null,
        'ext' => null,
        'textHeader' => null,
        'textFooter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'docNo' => true,
        'transNo' => true,
        'docSerieId' => true,
        'docTypeId' => false,
        'legalEntityId' => true,
        'cdacId' => true,
        'contactAccountId' => true,
        'periodId' => true,
        'accountId' => true,
        'post' => true,
        'taxAuthorityId' => true,
        'paymentMethodId' => true,
        'responsibleResourceId' => true,
        'projectId' => true,
        'docDate' => true,
        'description' => true,
        'taxDate' => true,
        'dueDate' => true,
        'currency' => true,
        'currencyRate' => true,
        'isNetEntry' => true,
        'explicitAmounts' => true,
        'theirDocNo' => true,
        'theirRef' => true,
        'intRef' => true,
        'legacyRef' => true,
        'details' => true,
        'bankAccountId' => true,
        'bankCurrencyRate' => true,
        'bankCurrencyAmount' => true,
        'bankRef' => true,
        'currencyAmount' => true,
        'allocateAuto' => true,
        'allocations' => true,
        'deliveryAddress' => false,
        'billingAddress' => false,
        'netCurrencyAmount' => true,
        'taxCurrencyAmount' => true,
        'grossCurrencyAmount' => true,
        'netAmount' => true,
        'taxAmount' => true,
        'grossAmount' => true,
        'fromStockLocationId' => true,
        'toStockLocationId' => true,
        'stockDate' => true,
        'paymentTermsId' => true,
        'ext' => true,
        'textHeader' => true,
        'textFooter' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'docNo' => 'docNo',
        'transNo' => 'transNo',
        'docSerieId' => 'docSerieId',
        'docTypeId' => 'docTypeId',
        'legalEntityId' => 'legalEntityId',
        'cdacId' => 'cdacId',
        'contactAccountId' => 'contactAccountId',
        'periodId' => 'periodId',
        'accountId' => 'accountId',
        'post' => 'post',
        'taxAuthorityId' => 'taxAuthorityId',
        'paymentMethodId' => 'paymentMethodId',
        'responsibleResourceId' => 'responsibleResourceId',
        'projectId' => 'projectId',
        'docDate' => 'docDate',
        'description' => 'description',
        'taxDate' => 'taxDate',
        'dueDate' => 'dueDate',
        'currency' => 'currency',
        'currencyRate' => 'currencyRate',
        'isNetEntry' => 'isNetEntry',
        'explicitAmounts' => 'explicitAmounts',
        'theirDocNo' => 'theirDocNo',
        'theirRef' => 'theirRef',
        'intRef' => 'intRef',
        'legacyRef' => 'legacyRef',
        'details' => 'details',
        'bankAccountId' => 'bankAccountId',
        'bankCurrencyRate' => 'bankCurrencyRate',
        'bankCurrencyAmount' => 'bankCurrencyAmount',
        'bankRef' => 'bankRef',
        'currencyAmount' => 'currencyAmount',
        'allocateAuto' => 'allocateAuto',
        'allocations' => 'allocations',
        'deliveryAddress' => 'deliveryAddress',
        'billingAddress' => 'billingAddress',
        'netCurrencyAmount' => 'netCurrencyAmount',
        'taxCurrencyAmount' => 'taxCurrencyAmount',
        'grossCurrencyAmount' => 'grossCurrencyAmount',
        'netAmount' => 'netAmount',
        'taxAmount' => 'taxAmount',
        'grossAmount' => 'grossAmount',
        'fromStockLocationId' => 'fromStockLocationId',
        'toStockLocationId' => 'toStockLocationId',
        'stockDate' => 'stockDate',
        'paymentTermsId' => 'paymentTermsId',
        'ext' => 'ext',
        'textHeader' => 'textHeader',
        'textFooter' => 'textFooter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'docNo' => 'setDocNo',
        'transNo' => 'setTransNo',
        'docSerieId' => 'setDocSerieId',
        'docTypeId' => 'setDocTypeId',
        'legalEntityId' => 'setLegalEntityId',
        'cdacId' => 'setCdacId',
        'contactAccountId' => 'setContactAccountId',
        'periodId' => 'setPeriodId',
        'accountId' => 'setAccountId',
        'post' => 'setPost',
        'taxAuthorityId' => 'setTaxAuthorityId',
        'paymentMethodId' => 'setPaymentMethodId',
        'responsibleResourceId' => 'setResponsibleResourceId',
        'projectId' => 'setProjectId',
        'docDate' => 'setDocDate',
        'description' => 'setDescription',
        'taxDate' => 'setTaxDate',
        'dueDate' => 'setDueDate',
        'currency' => 'setCurrency',
        'currencyRate' => 'setCurrencyRate',
        'isNetEntry' => 'setIsNetEntry',
        'explicitAmounts' => 'setExplicitAmounts',
        'theirDocNo' => 'setTheirDocNo',
        'theirRef' => 'setTheirRef',
        'intRef' => 'setIntRef',
        'legacyRef' => 'setLegacyRef',
        'details' => 'setDetails',
        'bankAccountId' => 'setBankAccountId',
        'bankCurrencyRate' => 'setBankCurrencyRate',
        'bankCurrencyAmount' => 'setBankCurrencyAmount',
        'bankRef' => 'setBankRef',
        'currencyAmount' => 'setCurrencyAmount',
        'allocateAuto' => 'setAllocateAuto',
        'allocations' => 'setAllocations',
        'deliveryAddress' => 'setDeliveryAddress',
        'billingAddress' => 'setBillingAddress',
        'netCurrencyAmount' => 'setNetCurrencyAmount',
        'taxCurrencyAmount' => 'setTaxCurrencyAmount',
        'grossCurrencyAmount' => 'setGrossCurrencyAmount',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'grossAmount' => 'setGrossAmount',
        'fromStockLocationId' => 'setFromStockLocationId',
        'toStockLocationId' => 'setToStockLocationId',
        'stockDate' => 'setStockDate',
        'paymentTermsId' => 'setPaymentTermsId',
        'ext' => 'setExt',
        'textHeader' => 'setTextHeader',
        'textFooter' => 'setTextFooter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'docNo' => 'getDocNo',
        'transNo' => 'getTransNo',
        'docSerieId' => 'getDocSerieId',
        'docTypeId' => 'getDocTypeId',
        'legalEntityId' => 'getLegalEntityId',
        'cdacId' => 'getCdacId',
        'contactAccountId' => 'getContactAccountId',
        'periodId' => 'getPeriodId',
        'accountId' => 'getAccountId',
        'post' => 'getPost',
        'taxAuthorityId' => 'getTaxAuthorityId',
        'paymentMethodId' => 'getPaymentMethodId',
        'responsibleResourceId' => 'getResponsibleResourceId',
        'projectId' => 'getProjectId',
        'docDate' => 'getDocDate',
        'description' => 'getDescription',
        'taxDate' => 'getTaxDate',
        'dueDate' => 'getDueDate',
        'currency' => 'getCurrency',
        'currencyRate' => 'getCurrencyRate',
        'isNetEntry' => 'getIsNetEntry',
        'explicitAmounts' => 'getExplicitAmounts',
        'theirDocNo' => 'getTheirDocNo',
        'theirRef' => 'getTheirRef',
        'intRef' => 'getIntRef',
        'legacyRef' => 'getLegacyRef',
        'details' => 'getDetails',
        'bankAccountId' => 'getBankAccountId',
        'bankCurrencyRate' => 'getBankCurrencyRate',
        'bankCurrencyAmount' => 'getBankCurrencyAmount',
        'bankRef' => 'getBankRef',
        'currencyAmount' => 'getCurrencyAmount',
        'allocateAuto' => 'getAllocateAuto',
        'allocations' => 'getAllocations',
        'deliveryAddress' => 'getDeliveryAddress',
        'billingAddress' => 'getBillingAddress',
        'netCurrencyAmount' => 'getNetCurrencyAmount',
        'taxCurrencyAmount' => 'getTaxCurrencyAmount',
        'grossCurrencyAmount' => 'getGrossCurrencyAmount',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'grossAmount' => 'getGrossAmount',
        'fromStockLocationId' => 'getFromStockLocationId',
        'toStockLocationId' => 'getToStockLocationId',
        'stockDate' => 'getStockDate',
        'paymentTermsId' => 'getPaymentTermsId',
        'ext' => 'getExt',
        'textHeader' => 'getTextHeader',
        'textFooter' => 'getTextFooter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('docNo', $data ?? [], null);
        $this->setIfExists('transNo', $data ?? [], null);
        $this->setIfExists('docSerieId', $data ?? [], null);
        $this->setIfExists('docTypeId', $data ?? [], null);
        $this->setIfExists('legalEntityId', $data ?? [], null);
        $this->setIfExists('cdacId', $data ?? [], null);
        $this->setIfExists('contactAccountId', $data ?? [], null);
        $this->setIfExists('periodId', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('post', $data ?? [], null);
        $this->setIfExists('taxAuthorityId', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('responsibleResourceId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('docDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('taxDate', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('currencyRate', $data ?? [], null);
        $this->setIfExists('isNetEntry', $data ?? [], null);
        $this->setIfExists('explicitAmounts', $data ?? [], null);
        $this->setIfExists('theirDocNo', $data ?? [], null);
        $this->setIfExists('theirRef', $data ?? [], null);
        $this->setIfExists('intRef', $data ?? [], null);
        $this->setIfExists('legacyRef', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('bankAccountId', $data ?? [], null);
        $this->setIfExists('bankCurrencyRate', $data ?? [], null);
        $this->setIfExists('bankCurrencyAmount', $data ?? [], null);
        $this->setIfExists('bankRef', $data ?? [], null);
        $this->setIfExists('currencyAmount', $data ?? [], null);
        $this->setIfExists('allocateAuto', $data ?? [], null);
        $this->setIfExists('allocations', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('netCurrencyAmount', $data ?? [], null);
        $this->setIfExists('taxCurrencyAmount', $data ?? [], null);
        $this->setIfExists('grossCurrencyAmount', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('grossAmount', $data ?? [], null);
        $this->setIfExists('fromStockLocationId', $data ?? [], null);
        $this->setIfExists('toStockLocationId', $data ?? [], null);
        $this->setIfExists('stockDate', $data ?? [], null);
        $this->setIfExists('paymentTermsId', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('textHeader', $data ?? [], null);
        $this->setIfExists('textFooter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['docNo']) && (mb_strlen($this->container['docNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'docNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['docSerieId']) && (mb_strlen($this->container['docSerieId']) > 50)) {
            $invalidProperties[] = "invalid value for 'docSerieId', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['docTypeId'] === null) {
            $invalidProperties[] = "'docTypeId' can't be null";
        }
        if ((mb_strlen($this->container['docTypeId']) > 50)) {
            $invalidProperties[] = "invalid value for 'docTypeId', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['docTypeId']) < 1)) {
            $invalidProperties[] = "invalid value for 'docTypeId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['legalEntityId']) && (mb_strlen($this->container['legalEntityId']) > 50)) {
            $invalidProperties[] = "invalid value for 'legalEntityId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cdacId']) && (mb_strlen($this->container['cdacId']) > 50)) {
            $invalidProperties[] = "invalid value for 'cdacId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contactAccountId']) && (mb_strlen($this->container['contactAccountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'contactAccountId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['periodId']) && (mb_strlen($this->container['periodId']) > 50)) {
            $invalidProperties[] = "invalid value for 'periodId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['accountId']) && (mb_strlen($this->container['accountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxAuthorityId']) && (mb_strlen($this->container['taxAuthorityId']) > 50)) {
            $invalidProperties[] = "invalid value for 'taxAuthorityId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['paymentMethodId']) && (mb_strlen($this->container['paymentMethodId']) > 50)) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['responsibleResourceId']) && (mb_strlen($this->container['responsibleResourceId']) > 50)) {
            $invalidProperties[] = "invalid value for 'responsibleResourceId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['projectId']) && (mb_strlen($this->container['projectId']) > 50)) {
            $invalidProperties[] = "invalid value for 'projectId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['theirDocNo']) && (mb_strlen($this->container['theirDocNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'theirDocNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['theirRef']) && (mb_strlen($this->container['theirRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'theirRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['intRef']) && (mb_strlen($this->container['intRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'intRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['legacyRef']) && (mb_strlen($this->container['legacyRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'legacyRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bankAccountId']) && (mb_strlen($this->container['bankAccountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankAccountId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bankRef']) && (mb_strlen($this->container['bankRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'bankRef', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets docNo
     *
     * @return string|null
     */
    public function getDocNo(): ?string
    {
        return $this->container['docNo'];
    }

    /**
     * Sets docNo
     *
     * @param string|null $docNo The document number
     *
     * @return $this
     */
    public function setDocNo(?string $docNo): static
    {
        if (is_null($docNo)) {
            array_push($this->openAPINullablesSetToNull, 'docNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('docNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($docNo) && (mb_strlen($docNo) > 50)) {
            throw new InvalidArgumentException('invalid length for $docNo when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['docNo'] = $docNo;

        return $this;
    }

    /**
     * Gets transNo
     *
     * @return int|null
     */
    public function getTransNo(): ?int
    {
        return $this->container['transNo'];
    }

    /**
     * Sets transNo
     *
     * @param int|null $transNo The document transaction number
     *
     * @return $this
     */
    public function setTransNo(?int $transNo): static
    {
        if (is_null($transNo)) {
            array_push($this->openAPINullablesSetToNull, 'transNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transNo'] = $transNo;

        return $this;
    }

    /**
     * Gets docSerieId
     *
     * @return string|null
     */
    public function getDocSerieId(): ?string
    {
        return $this->container['docSerieId'];
    }

    /**
     * Sets docSerieId
     *
     * @param string|null $docSerieId The document series id
     *
     * @return $this
     */
    public function setDocSerieId(?string $docSerieId): static
    {
        if (is_null($docSerieId)) {
            array_push($this->openAPINullablesSetToNull, 'docSerieId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('docSerieId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($docSerieId) && (mb_strlen($docSerieId) > 50)) {
            throw new InvalidArgumentException('invalid length for $docSerieId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['docSerieId'] = $docSerieId;

        return $this;
    }

    /**
     * Gets docTypeId
     *
     * @return string
     */
    public function getDocTypeId(): string
    {
        return $this->container['docTypeId'];
    }

    /**
     * Sets docTypeId
     *
     * @param string $docTypeId The document type id
     *
     * @return $this
     */
    public function setDocTypeId(string $docTypeId): static
    {
        if (is_null($docTypeId)) {
            throw new InvalidArgumentException('non-nullable docTypeId cannot be null');
        }
        if ((mb_strlen($docTypeId) > 50)) {
            throw new InvalidArgumentException('invalid length for $docTypeId when calling DocCreate., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($docTypeId) < 1)) {
            throw new InvalidArgumentException('invalid length for $docTypeId when calling DocCreate., must be bigger than or equal to 1.');
        }

        $this->container['docTypeId'] = $docTypeId;

        return $this;
    }

    /**
     * Gets legalEntityId
     *
     * @return string|null
     */
    public function getLegalEntityId(): ?string
    {
        return $this->container['legalEntityId'];
    }

    /**
     * Sets legalEntityId
     *
     * @param string|null $legalEntityId The document legal entity id
     *
     * @return $this
     */
    public function setLegalEntityId(?string $legalEntityId): static
    {
        if (is_null($legalEntityId)) {
            array_push($this->openAPINullablesSetToNull, 'legalEntityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legalEntityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legalEntityId) && (mb_strlen($legalEntityId) > 50)) {
            throw new InvalidArgumentException('invalid length for $legalEntityId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['legalEntityId'] = $legalEntityId;

        return $this;
    }

    /**
     * Gets cdacId
     *
     * @return string|null
     */
    public function getCdacId(): ?string
    {
        return $this->container['cdacId'];
    }

    /**
     * Sets cdacId
     *
     * @param string|null $cdacId The document custom data access control (CDAC) Id
     *
     * @return $this
     */
    public function setCdacId(?string $cdacId): static
    {
        if (is_null($cdacId)) {
            array_push($this->openAPINullablesSetToNull, 'cdacId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cdacId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cdacId) && (mb_strlen($cdacId) > 50)) {
            throw new InvalidArgumentException('invalid length for $cdacId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['cdacId'] = $cdacId;

        return $this;
    }

    /**
     * Gets contactAccountId
     *
     * @return string|null
     */
    public function getContactAccountId(): ?string
    {
        return $this->container['contactAccountId'];
    }

    /**
     * Sets contactAccountId
     *
     * @param string|null $contactAccountId The document contact account id
     *
     * @return $this
     */
    public function setContactAccountId(?string $contactAccountId): static
    {
        if (is_null($contactAccountId)) {
            array_push($this->openAPINullablesSetToNull, 'contactAccountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactAccountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contactAccountId) && (mb_strlen($contactAccountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $contactAccountId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['contactAccountId'] = $contactAccountId;

        return $this;
    }

    /**
     * Gets periodId
     *
     * @return string|null
     */
    public function getPeriodId(): ?string
    {
        return $this->container['periodId'];
    }

    /**
     * Sets periodId
     *
     * @param string|null $periodId The document peroid id
     *
     * @return $this
     */
    public function setPeriodId(?string $periodId): static
    {
        if (is_null($periodId)) {
            array_push($this->openAPINullablesSetToNull, 'periodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($periodId) && (mb_strlen($periodId) > 50)) {
            throw new InvalidArgumentException('invalid length for $periodId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['periodId'] = $periodId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId The document account id
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): static
    {
        if (is_null($accountId)) {
            array_push($this->openAPINullablesSetToNull, 'accountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountId) && (mb_strlen($accountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $accountId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets post
     *
     * @return array<string,string>|null
     */
    public function getPost(): ?array
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     *
     * @param array<string,string>|null $post The document posting attributes
     *
     * @return $this
     */
    public function setPost(?array $post): static
    {
        if (is_null($post)) {
            array_push($this->openAPINullablesSetToNull, 'post');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post'] = $post;

        return $this;
    }

    /**
     * Gets taxAuthorityId
     *
     * @return string|null
     */
    public function getTaxAuthorityId(): ?string
    {
        return $this->container['taxAuthorityId'];
    }

    /**
     * Sets taxAuthorityId
     *
     * @param string|null $taxAuthorityId The document tax authority id
     *
     * @return $this
     */
    public function setTaxAuthorityId(?string $taxAuthorityId): static
    {
        if (is_null($taxAuthorityId)) {
            array_push($this->openAPINullablesSetToNull, 'taxAuthorityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxAuthorityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxAuthorityId) && (mb_strlen($taxAuthorityId) > 50)) {
            throw new InvalidArgumentException('invalid length for $taxAuthorityId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['taxAuthorityId'] = $taxAuthorityId;

        return $this;
    }

    /**
     * Gets paymentMethodId
     *
     * @return string|null
     */
    public function getPaymentMethodId(): ?string
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId
     *
     * @param string|null $paymentMethodId The document payment method id
     *
     * @return $this
     */
    public function setPaymentMethodId(?string $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentMethodId) && (mb_strlen($paymentMethodId) > 50)) {
            throw new InvalidArgumentException('invalid length for $paymentMethodId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets responsibleResourceId
     *
     * @return string|null
     */
    public function getResponsibleResourceId(): ?string
    {
        return $this->container['responsibleResourceId'];
    }

    /**
     * Sets responsibleResourceId
     *
     * @param string|null $responsibleResourceId The document responsible resource id
     *
     * @return $this
     */
    public function setResponsibleResourceId(?string $responsibleResourceId): static
    {
        if (is_null($responsibleResourceId)) {
            array_push($this->openAPINullablesSetToNull, 'responsibleResourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsibleResourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($responsibleResourceId) && (mb_strlen($responsibleResourceId) > 50)) {
            throw new InvalidArgumentException('invalid length for $responsibleResourceId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['responsibleResourceId'] = $responsibleResourceId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId(): ?string
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId The document project id
     *
     * @return $this
     */
    public function setProjectId(?string $projectId): static
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($projectId) && (mb_strlen($projectId) > 50)) {
            throw new InvalidArgumentException('invalid length for $projectId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets docDate
     *
     * @return \DateTime|null
     */
    public function getDocDate(): ?\DateTime
    {
        return $this->container['docDate'];
    }

    /**
     * Sets docDate
     *
     * @param \DateTime|null $docDate The document date
     *
     * @return $this
     */
    public function setDocDate(?\DateTime $docDate): static
    {
        if (is_null($docDate)) {
            array_push($this->openAPINullablesSetToNull, 'docDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('docDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['docDate'] = $docDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The document description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 250)) {
            throw new InvalidArgumentException('invalid length for $description when calling DocCreate., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets taxDate
     *
     * @return \DateTime|null
     */
    public function getTaxDate(): ?\DateTime
    {
        return $this->container['taxDate'];
    }

    /**
     * Sets taxDate
     *
     * @param \DateTime|null $taxDate The document tax date
     *
     * @return $this
     */
    public function setTaxDate(?\DateTime $taxDate): static
    {
        if (is_null($taxDate)) {
            array_push($this->openAPINullablesSetToNull, 'taxDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxDate'] = $taxDate;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate(): ?\DateTime
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate The document due date
     *
     * @return $this
     */
    public function setDueDate(?\DateTime $dueDate): static
    {
        if (is_null($dueDate)) {
            array_push($this->openAPINullablesSetToNull, 'dueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The document currency
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new InvalidArgumentException('invalid length for $currency when calling DocCreate., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return float|null
     */
    public function getCurrencyRate(): ?float
    {
        return $this->container['currencyRate'];
    }

    /**
     * Sets currencyRate
     *
     * @param float|null $currencyRate The document currency rate
     *
     * @return $this
     */
    public function setCurrencyRate(?float $currencyRate): static
    {
        if (is_null($currencyRate)) {
            array_push($this->openAPINullablesSetToNull, 'currencyRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currencyRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets isNetEntry
     *
     * @return bool|null
     */
    public function getIsNetEntry(): ?bool
    {
        return $this->container['isNetEntry'];
    }

    /**
     * Sets isNetEntry
     *
     * @param bool|null $isNetEntry The document is net entry flag
     *
     * @return $this
     */
    public function setIsNetEntry(?bool $isNetEntry): static
    {
        if (is_null($isNetEntry)) {
            array_push($this->openAPINullablesSetToNull, 'isNetEntry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isNetEntry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isNetEntry'] = $isNetEntry;

        return $this;
    }

    /**
     * Gets explicitAmounts
     *
     * @return bool|null
     */
    public function getExplicitAmounts(): ?bool
    {
        return $this->container['explicitAmounts'];
    }

    /**
     * Sets explicitAmounts
     *
     * @param bool|null $explicitAmounts When true, all Amount fields must be specified and they will be accepted as is, with no calculations or rounding checks.
     *
     * @return $this
     */
    public function setExplicitAmounts(?bool $explicitAmounts): static
    {
        if (is_null($explicitAmounts)) {
            array_push($this->openAPINullablesSetToNull, 'explicitAmounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('explicitAmounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['explicitAmounts'] = $explicitAmounts;

        return $this;
    }

    /**
     * Gets theirDocNo
     *
     * @return string|null
     */
    public function getTheirDocNo(): ?string
    {
        return $this->container['theirDocNo'];
    }

    /**
     * Sets theirDocNo
     *
     * @param string|null $theirDocNo An external document number
     *
     * @return $this
     */
    public function setTheirDocNo(?string $theirDocNo): static
    {
        if (is_null($theirDocNo)) {
            array_push($this->openAPINullablesSetToNull, 'theirDocNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('theirDocNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($theirDocNo) && (mb_strlen($theirDocNo) > 50)) {
            throw new InvalidArgumentException('invalid length for $theirDocNo when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['theirDocNo'] = $theirDocNo;

        return $this;
    }

    /**
     * Gets theirRef
     *
     * @return string|null
     */
    public function getTheirRef(): ?string
    {
        return $this->container['theirRef'];
    }

    /**
     * Sets theirRef
     *
     * @param string|null $theirRef An external reference code
     *
     * @return $this
     */
    public function setTheirRef(?string $theirRef): static
    {
        if (is_null($theirRef)) {
            array_push($this->openAPINullablesSetToNull, 'theirRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('theirRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($theirRef) && (mb_strlen($theirRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $theirRef when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['theirRef'] = $theirRef;

        return $this;
    }

    /**
     * Gets intRef
     *
     * @return string|null
     */
    public function getIntRef(): ?string
    {
        return $this->container['intRef'];
    }

    /**
     * Sets intRef
     *
     * @param string|null $intRef Optional interface reference. If provided, it must be unique. <a href=\"https://docs.iplicit.com/dev/guide/identifiers/index.html\">Learn more</a>
     *
     * @return $this
     */
    public function setIntRef(?string $intRef): static
    {
        if (is_null($intRef)) {
            array_push($this->openAPINullablesSetToNull, 'intRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intRef) && (mb_strlen($intRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $intRef when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['intRef'] = $intRef;

        return $this;
    }

    /**
     * Gets legacyRef
     *
     * @return string|null
     */
    public function getLegacyRef(): ?string
    {
        return $this->container['legacyRef'];
    }

    /**
     * Sets legacyRef
     *
     * @param string|null $legacyRef Alternative / legacy reference code
     *
     * @return $this
     */
    public function setLegacyRef(?string $legacyRef): static
    {
        if (is_null($legacyRef)) {
            array_push($this->openAPINullablesSetToNull, 'legacyRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legacyRef) && (mb_strlen($legacyRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $legacyRef when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['legacyRef'] = $legacyRef;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \SynergiTech\Iplicit\Model\DocDetailCreate[]|null
     */
    public function getDetails(): ?array
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \SynergiTech\Iplicit\Model\DocDetailCreate[]|null $details The document line details
     *
     * @return $this
     */
    public function setDetails(?array $details): static
    {
        if (is_null($details)) {
            array_push($this->openAPINullablesSetToNull, 'details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets bankAccountId
     *
     * @return string|null
     */
    public function getBankAccountId(): ?string
    {
        return $this->container['bankAccountId'];
    }

    /**
     * Sets bankAccountId
     *
     * @param string|null $bankAccountId The document bank account id
     *
     * @return $this
     */
    public function setBankAccountId(?string $bankAccountId): static
    {
        if (is_null($bankAccountId)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankAccountId) && (mb_strlen($bankAccountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankAccountId when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['bankAccountId'] = $bankAccountId;

        return $this;
    }

    /**
     * Gets bankCurrencyRate
     *
     * @return float|null
     */
    public function getBankCurrencyRate(): ?float
    {
        return $this->container['bankCurrencyRate'];
    }

    /**
     * Sets bankCurrencyRate
     *
     * @param float|null $bankCurrencyRate The document bank currency rate
     *
     * @return $this
     */
    public function setBankCurrencyRate(?float $bankCurrencyRate): static
    {
        if (is_null($bankCurrencyRate)) {
            array_push($this->openAPINullablesSetToNull, 'bankCurrencyRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankCurrencyRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankCurrencyRate'] = $bankCurrencyRate;

        return $this;
    }

    /**
     * Gets bankCurrencyAmount
     *
     * @return float|null
     */
    public function getBankCurrencyAmount(): ?float
    {
        return $this->container['bankCurrencyAmount'];
    }

    /**
     * Sets bankCurrencyAmount
     *
     * @param float|null $bankCurrencyAmount The document bank currency amount
     *
     * @return $this
     */
    public function setBankCurrencyAmount(?float $bankCurrencyAmount): static
    {
        if (is_null($bankCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'bankCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankCurrencyAmount'] = $bankCurrencyAmount;

        return $this;
    }

    /**
     * Gets bankRef
     *
     * @return string|null
     */
    public function getBankRef(): ?string
    {
        return $this->container['bankRef'];
    }

    /**
     * Sets bankRef
     *
     * @param string|null $bankRef The document bank reference
     *
     * @return $this
     */
    public function setBankRef(?string $bankRef): static
    {
        if (is_null($bankRef)) {
            array_push($this->openAPINullablesSetToNull, 'bankRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankRef) && (mb_strlen($bankRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $bankRef when calling DocCreate., must be smaller than or equal to 50.');
        }

        $this->container['bankRef'] = $bankRef;

        return $this;
    }

    /**
     * Gets currencyAmount
     *
     * @return float|null
     */
    public function getCurrencyAmount(): ?float
    {
        return $this->container['currencyAmount'];
    }

    /**
     * Sets currencyAmount
     *
     * @param float|null $currencyAmount The document currency amount
     *
     * @return $this
     */
    public function setCurrencyAmount(?float $currencyAmount): static
    {
        if (is_null($currencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'currencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currencyAmount'] = $currencyAmount;

        return $this;
    }

    /**
     * Gets allocateAuto
     *
     * @return bool|null
     */
    public function getAllocateAuto(): ?bool
    {
        return $this->container['allocateAuto'];
    }

    /**
     * Sets allocateAuto
     *
     * @param bool|null $allocateAuto The document automatic allocation flag
     *
     * @return $this
     */
    public function setAllocateAuto(?bool $allocateAuto): static
    {
        if (is_null($allocateAuto)) {
            array_push($this->openAPINullablesSetToNull, 'allocateAuto');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allocateAuto', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allocateAuto'] = $allocateAuto;

        return $this;
    }

    /**
     * Gets allocations
     *
     * @return \SynergiTech\Iplicit\Model\DocAllocationCreate[]|null
     */
    public function getAllocations(): ?array
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param \SynergiTech\Iplicit\Model\DocAllocationCreate[]|null $allocations The document allocations
     *
     * @return $this
     */
    public function setAllocations(?array $allocations): static
    {
        if (is_null($allocations)) {
            array_push($this->openAPINullablesSetToNull, 'allocations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allocations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allocations'] = $allocations;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \SynergiTech\Iplicit\Model\ContactAddressInline|null
     */
    public function getDeliveryAddress(): ?\SynergiTech\Iplicit\Model\ContactAddressInline
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \SynergiTech\Iplicit\Model\ContactAddressInline|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress(?\SynergiTech\Iplicit\Model\ContactAddressInline $deliveryAddress): static
    {
        if (is_null($deliveryAddress)) {
            throw new InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \SynergiTech\Iplicit\Model\ContactAddressInline|null
     */
    public function getBillingAddress(): ?\SynergiTech\Iplicit\Model\ContactAddressInline
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \SynergiTech\Iplicit\Model\ContactAddressInline|null $billingAddress billingAddress
     *
     * @return $this
     */
    public function setBillingAddress(?\SynergiTech\Iplicit\Model\ContactAddressInline $billingAddress): static
    {
        if (is_null($billingAddress)) {
            throw new InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets netCurrencyAmount
     *
     * @return float|null
     */
    public function getNetCurrencyAmount(): ?float
    {
        return $this->container['netCurrencyAmount'];
    }

    /**
     * Sets netCurrencyAmount
     *
     * @param float|null $netCurrencyAmount The document net currency amount
     *
     * @return $this
     */
    public function setNetCurrencyAmount(?float $netCurrencyAmount): static
    {
        if (is_null($netCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'netCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netCurrencyAmount'] = $netCurrencyAmount;

        return $this;
    }

    /**
     * Gets taxCurrencyAmount
     *
     * @return float|null
     */
    public function getTaxCurrencyAmount(): ?float
    {
        return $this->container['taxCurrencyAmount'];
    }

    /**
     * Sets taxCurrencyAmount
     *
     * @param float|null $taxCurrencyAmount The document tax currency amount
     *
     * @return $this
     */
    public function setTaxCurrencyAmount(?float $taxCurrencyAmount): static
    {
        if (is_null($taxCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'taxCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCurrencyAmount'] = $taxCurrencyAmount;

        return $this;
    }

    /**
     * Gets grossCurrencyAmount
     *
     * @return float|null
     */
    public function getGrossCurrencyAmount(): ?float
    {
        return $this->container['grossCurrencyAmount'];
    }

    /**
     * Sets grossCurrencyAmount
     *
     * @param float|null $grossCurrencyAmount The document gross currency amount
     *
     * @return $this
     */
    public function setGrossCurrencyAmount(?float $grossCurrencyAmount): static
    {
        if (is_null($grossCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'grossCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossCurrencyAmount'] = $grossCurrencyAmount;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The document net amount
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            array_push($this->openAPINullablesSetToNull, 'netAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The document tax amount
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            array_push($this->openAPINullablesSetToNull, 'taxAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets grossAmount
     *
     * @return float|null
     */
    public function getGrossAmount(): ?float
    {
        return $this->container['grossAmount'];
    }

    /**
     * Sets grossAmount
     *
     * @param float|null $grossAmount The document gross amount
     *
     * @return $this
     */
    public function setGrossAmount(?float $grossAmount): static
    {
        if (is_null($grossAmount)) {
            array_push($this->openAPINullablesSetToNull, 'grossAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossAmount'] = $grossAmount;

        return $this;
    }

    /**
     * Gets fromStockLocationId
     *
     * @return string|null
     */
    public function getFromStockLocationId(): ?string
    {
        return $this->container['fromStockLocationId'];
    }

    /**
     * Sets fromStockLocationId
     *
     * @param string|null $fromStockLocationId The document stock from location id
     *
     * @return $this
     */
    public function setFromStockLocationId(?string $fromStockLocationId): static
    {
        if (is_null($fromStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'fromStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fromStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fromStockLocationId'] = $fromStockLocationId;

        return $this;
    }

    /**
     * Gets toStockLocationId
     *
     * @return string|null
     */
    public function getToStockLocationId(): ?string
    {
        return $this->container['toStockLocationId'];
    }

    /**
     * Sets toStockLocationId
     *
     * @param string|null $toStockLocationId The document stock to location id
     *
     * @return $this
     */
    public function setToStockLocationId(?string $toStockLocationId): static
    {
        if (is_null($toStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'toStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toStockLocationId'] = $toStockLocationId;

        return $this;
    }

    /**
     * Gets stockDate
     *
     * @return \DateTime|null
     */
    public function getStockDate(): ?\DateTime
    {
        return $this->container['stockDate'];
    }

    /**
     * Sets stockDate
     *
     * @param \DateTime|null $stockDate The document stock date
     *
     * @return $this
     */
    public function setStockDate(?\DateTime $stockDate): static
    {
        if (is_null($stockDate)) {
            array_push($this->openAPINullablesSetToNull, 'stockDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stockDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stockDate'] = $stockDate;

        return $this;
    }

    /**
     * Gets paymentTermsId
     *
     * @return string|null
     */
    public function getPaymentTermsId(): ?string
    {
        return $this->container['paymentTermsId'];
    }

    /**
     * Sets paymentTermsId
     *
     * @param string|null $paymentTermsId The document default payment terms. See `PayTerm` catalog.
     *
     * @return $this
     */
    public function setPaymentTermsId(?string $paymentTermsId): static
    {
        if (is_null($paymentTermsId)) {
            array_push($this->openAPINullablesSetToNull, 'paymentTermsId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTermsId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTermsId'] = $paymentTermsId;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return array<string,mixed>|null
     */
    public function getExt(): ?array
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,mixed>|null $ext The document custom fields
     *
     * @return $this
     */
    public function setExt(?array $ext): static
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets textHeader
     *
     * @return string|null
     */
    public function getTextHeader(): ?string
    {
        return $this->container['textHeader'];
    }

    /**
     * Sets textHeader
     *
     * @param string|null $textHeader The document text header
     *
     * @return $this
     */
    public function setTextHeader(?string $textHeader): static
    {
        if (is_null($textHeader)) {
            array_push($this->openAPINullablesSetToNull, 'textHeader');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textHeader', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textHeader'] = $textHeader;

        return $this;
    }

    /**
     * Gets textFooter
     *
     * @return string|null
     */
    public function getTextFooter(): ?string
    {
        return $this->container['textFooter'];
    }

    /**
     * Sets textFooter
     *
     * @param string|null $textFooter The document text footer
     *
     * @return $this
     */
    public function setTextFooter(?string $textFooter): static
    {
        if (is_null($textFooter)) {
            array_push($this->openAPINullablesSetToNull, 'textFooter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textFooter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textFooter'] = $textFooter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


