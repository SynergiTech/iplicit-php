<?php
/**
 * DocDetail
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * DocDetail Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DocDetail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DocDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'lineDate' => '\DateTime',
        'description' => 'string',
        'docClass' => 'string',
        'docId' => 'string',
        'productId' => 'string',
        'projectId' => 'string',
        'taxCodeId' => 'string',
        'taxDate' => '\DateTime',
        'taxRate' => 'float',
        'isNetEntry' => 'bool',
        'netCurrencyUnitPrice' => 'float',
        'grossCurrencyUnitPrice' => 'float',
        'quantity' => 'float',
        'uomId' => 'string',
        'skuQuantity' => 'float',
        'netAmount' => 'float',
        'grossAmount' => 'float',
        'taxAmount' => 'float',
        'orderIndex' => 'int',
        'lastModified' => '\DateTime',
        'lastModifiedBy' => 'string',
        'netCurrencyAmount' => 'float',
        'taxCurrencyAmount' => 'float',
        'grossCurrencyAmount' => 'float',
        'fromStockLocationId' => 'string',
        'toStockLocationId' => 'string',
        'stockDate' => '\DateTime',
        'status' => 'int',
        'accountId' => 'string',
        'currency' => 'string',
        'currencyRate' => 'float',
        'hasAttachments' => 'bool',
        'hasNotes' => 'bool',
        'isTaxAdjustment' => 'bool',
        'isReverseCharge' => 'bool',
        'taxBandId' => 'string',
        'isResale' => 'bool',
        'textPre' => 'string',
        'textPost' => 'string',
        'intRef' => 'string',
        'legacyRef' => 'string',
        'productType' => 'string',
        'isDeferred' => 'bool',
        'deferredDistribution' => '\SynergiTech\Iplicit\Model\DocDetailDeferred',
        'post' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'lineDate' => 'date-time',
        'description' => null,
        'docClass' => null,
        'docId' => 'uuid',
        'productId' => 'uuid',
        'projectId' => 'uuid',
        'taxCodeId' => 'uuid',
        'taxDate' => 'date-time',
        'taxRate' => 'double',
        'isNetEntry' => null,
        'netCurrencyUnitPrice' => 'double',
        'grossCurrencyUnitPrice' => 'double',
        'quantity' => 'double',
        'uomId' => 'uuid',
        'skuQuantity' => 'double',
        'netAmount' => 'double',
        'grossAmount' => 'double',
        'taxAmount' => 'double',
        'orderIndex' => 'int32',
        'lastModified' => 'date-time',
        'lastModifiedBy' => null,
        'netCurrencyAmount' => 'double',
        'taxCurrencyAmount' => 'double',
        'grossCurrencyAmount' => 'double',
        'fromStockLocationId' => 'uuid',
        'toStockLocationId' => 'uuid',
        'stockDate' => 'date-time',
        'status' => 'int64',
        'accountId' => 'uuid',
        'currency' => null,
        'currencyRate' => 'double',
        'hasAttachments' => null,
        'hasNotes' => null,
        'isTaxAdjustment' => null,
        'isReverseCharge' => null,
        'taxBandId' => 'uuid',
        'isResale' => null,
        'textPre' => null,
        'textPost' => null,
        'intRef' => null,
        'legacyRef' => null,
        'productType' => null,
        'isDeferred' => null,
        'deferredDistribution' => null,
        'post' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => true,
        'lineDate' => true,
        'description' => true,
        'docClass' => true,
        'docId' => true,
        'productId' => true,
        'projectId' => true,
        'taxCodeId' => true,
        'taxDate' => true,
        'taxRate' => true,
        'isNetEntry' => false,
        'netCurrencyUnitPrice' => true,
        'grossCurrencyUnitPrice' => true,
        'quantity' => true,
        'uomId' => true,
        'skuQuantity' => true,
        'netAmount' => true,
        'grossAmount' => true,
        'taxAmount' => true,
        'orderIndex' => false,
        'lastModified' => true,
        'lastModifiedBy' => true,
        'netCurrencyAmount' => true,
        'taxCurrencyAmount' => true,
        'grossCurrencyAmount' => true,
        'fromStockLocationId' => true,
        'toStockLocationId' => true,
        'stockDate' => true,
        'status' => false,
        'accountId' => true,
        'currency' => true,
        'currencyRate' => true,
        'hasAttachments' => false,
        'hasNotes' => false,
        'isTaxAdjustment' => false,
        'isReverseCharge' => false,
        'taxBandId' => true,
        'isResale' => false,
        'textPre' => true,
        'textPost' => true,
        'intRef' => true,
        'legacyRef' => true,
        'productType' => true,
        'isDeferred' => true,
        'deferredDistribution' => false,
        'post' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'lineDate' => 'lineDate',
        'description' => 'description',
        'docClass' => 'docClass',
        'docId' => 'docId',
        'productId' => 'productId',
        'projectId' => 'projectId',
        'taxCodeId' => 'taxCodeId',
        'taxDate' => 'taxDate',
        'taxRate' => 'taxRate',
        'isNetEntry' => 'isNetEntry',
        'netCurrencyUnitPrice' => 'netCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'grossCurrencyUnitPrice',
        'quantity' => 'quantity',
        'uomId' => 'uomId',
        'skuQuantity' => 'skuQuantity',
        'netAmount' => 'netAmount',
        'grossAmount' => 'grossAmount',
        'taxAmount' => 'taxAmount',
        'orderIndex' => 'orderIndex',
        'lastModified' => 'lastModified',
        'lastModifiedBy' => 'lastModifiedBy',
        'netCurrencyAmount' => 'netCurrencyAmount',
        'taxCurrencyAmount' => 'taxCurrencyAmount',
        'grossCurrencyAmount' => 'grossCurrencyAmount',
        'fromStockLocationId' => 'fromStockLocationId',
        'toStockLocationId' => 'toStockLocationId',
        'stockDate' => 'stockDate',
        'status' => 'status',
        'accountId' => 'accountId',
        'currency' => 'currency',
        'currencyRate' => 'currencyRate',
        'hasAttachments' => 'hasAttachments',
        'hasNotes' => 'hasNotes',
        'isTaxAdjustment' => 'isTaxAdjustment',
        'isReverseCharge' => 'isReverseCharge',
        'taxBandId' => 'taxBandId',
        'isResale' => 'isResale',
        'textPre' => 'textPre',
        'textPost' => 'textPost',
        'intRef' => 'intRef',
        'legacyRef' => 'legacyRef',
        'productType' => 'productType',
        'isDeferred' => 'isDeferred',
        'deferredDistribution' => 'deferredDistribution',
        'post' => 'post'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'lineDate' => 'setLineDate',
        'description' => 'setDescription',
        'docClass' => 'setDocClass',
        'docId' => 'setDocId',
        'productId' => 'setProductId',
        'projectId' => 'setProjectId',
        'taxCodeId' => 'setTaxCodeId',
        'taxDate' => 'setTaxDate',
        'taxRate' => 'setTaxRate',
        'isNetEntry' => 'setIsNetEntry',
        'netCurrencyUnitPrice' => 'setNetCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'setGrossCurrencyUnitPrice',
        'quantity' => 'setQuantity',
        'uomId' => 'setUomId',
        'skuQuantity' => 'setSkuQuantity',
        'netAmount' => 'setNetAmount',
        'grossAmount' => 'setGrossAmount',
        'taxAmount' => 'setTaxAmount',
        'orderIndex' => 'setOrderIndex',
        'lastModified' => 'setLastModified',
        'lastModifiedBy' => 'setLastModifiedBy',
        'netCurrencyAmount' => 'setNetCurrencyAmount',
        'taxCurrencyAmount' => 'setTaxCurrencyAmount',
        'grossCurrencyAmount' => 'setGrossCurrencyAmount',
        'fromStockLocationId' => 'setFromStockLocationId',
        'toStockLocationId' => 'setToStockLocationId',
        'stockDate' => 'setStockDate',
        'status' => 'setStatus',
        'accountId' => 'setAccountId',
        'currency' => 'setCurrency',
        'currencyRate' => 'setCurrencyRate',
        'hasAttachments' => 'setHasAttachments',
        'hasNotes' => 'setHasNotes',
        'isTaxAdjustment' => 'setIsTaxAdjustment',
        'isReverseCharge' => 'setIsReverseCharge',
        'taxBandId' => 'setTaxBandId',
        'isResale' => 'setIsResale',
        'textPre' => 'setTextPre',
        'textPost' => 'setTextPost',
        'intRef' => 'setIntRef',
        'legacyRef' => 'setLegacyRef',
        'productType' => 'setProductType',
        'isDeferred' => 'setIsDeferred',
        'deferredDistribution' => 'setDeferredDistribution',
        'post' => 'setPost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'lineDate' => 'getLineDate',
        'description' => 'getDescription',
        'docClass' => 'getDocClass',
        'docId' => 'getDocId',
        'productId' => 'getProductId',
        'projectId' => 'getProjectId',
        'taxCodeId' => 'getTaxCodeId',
        'taxDate' => 'getTaxDate',
        'taxRate' => 'getTaxRate',
        'isNetEntry' => 'getIsNetEntry',
        'netCurrencyUnitPrice' => 'getNetCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'getGrossCurrencyUnitPrice',
        'quantity' => 'getQuantity',
        'uomId' => 'getUomId',
        'skuQuantity' => 'getSkuQuantity',
        'netAmount' => 'getNetAmount',
        'grossAmount' => 'getGrossAmount',
        'taxAmount' => 'getTaxAmount',
        'orderIndex' => 'getOrderIndex',
        'lastModified' => 'getLastModified',
        'lastModifiedBy' => 'getLastModifiedBy',
        'netCurrencyAmount' => 'getNetCurrencyAmount',
        'taxCurrencyAmount' => 'getTaxCurrencyAmount',
        'grossCurrencyAmount' => 'getGrossCurrencyAmount',
        'fromStockLocationId' => 'getFromStockLocationId',
        'toStockLocationId' => 'getToStockLocationId',
        'stockDate' => 'getStockDate',
        'status' => 'getStatus',
        'accountId' => 'getAccountId',
        'currency' => 'getCurrency',
        'currencyRate' => 'getCurrencyRate',
        'hasAttachments' => 'getHasAttachments',
        'hasNotes' => 'getHasNotes',
        'isTaxAdjustment' => 'getIsTaxAdjustment',
        'isReverseCharge' => 'getIsReverseCharge',
        'taxBandId' => 'getTaxBandId',
        'isResale' => 'getIsResale',
        'textPre' => 'getTextPre',
        'textPost' => 'getTextPost',
        'intRef' => 'getIntRef',
        'legacyRef' => 'getLegacyRef',
        'productType' => 'getProductType',
        'isDeferred' => 'getIsDeferred',
        'deferredDistribution' => 'getDeferredDistribution',
        'post' => 'getPost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('lineDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('docClass', $data ?? [], null);
        $this->setIfExists('docId', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('taxCodeId', $data ?? [], null);
        $this->setIfExists('taxDate', $data ?? [], null);
        $this->setIfExists('taxRate', $data ?? [], null);
        $this->setIfExists('isNetEntry', $data ?? [], null);
        $this->setIfExists('netCurrencyUnitPrice', $data ?? [], null);
        $this->setIfExists('grossCurrencyUnitPrice', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('uomId', $data ?? [], null);
        $this->setIfExists('skuQuantity', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('grossAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('orderIndex', $data ?? [], null);
        $this->setIfExists('lastModified', $data ?? [], null);
        $this->setIfExists('lastModifiedBy', $data ?? [], null);
        $this->setIfExists('netCurrencyAmount', $data ?? [], null);
        $this->setIfExists('taxCurrencyAmount', $data ?? [], null);
        $this->setIfExists('grossCurrencyAmount', $data ?? [], null);
        $this->setIfExists('fromStockLocationId', $data ?? [], null);
        $this->setIfExists('toStockLocationId', $data ?? [], null);
        $this->setIfExists('stockDate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('currencyRate', $data ?? [], null);
        $this->setIfExists('hasAttachments', $data ?? [], null);
        $this->setIfExists('hasNotes', $data ?? [], null);
        $this->setIfExists('isTaxAdjustment', $data ?? [], null);
        $this->setIfExists('isReverseCharge', $data ?? [], null);
        $this->setIfExists('taxBandId', $data ?? [], null);
        $this->setIfExists('isResale', $data ?? [], null);
        $this->setIfExists('textPre', $data ?? [], null);
        $this->setIfExists('textPost', $data ?? [], null);
        $this->setIfExists('intRef', $data ?? [], null);
        $this->setIfExists('legacyRef', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('isDeferred', $data ?? [], null);
        $this->setIfExists('deferredDistribution', $data ?? [], null);
        $this->setIfExists('post', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The document detail unique id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lineDate
     *
     * @return \DateTime|null
     */
    public function getLineDate(): ?\DateTime
    {
        return $this->container['lineDate'];
    }

    /**
     * Sets lineDate
     *
     * @param \DateTime|null $lineDate The document detail line date
     *
     * @return $this
     */
    public function setLineDate(?\DateTime $lineDate): static
    {
        if (is_null($lineDate)) {
            array_push($this->openAPINullablesSetToNull, 'lineDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lineDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lineDate'] = $lineDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The document detail description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets docClass
     *
     * @return string|null
     */
    public function getDocClass(): ?string
    {
        return $this->container['docClass'];
    }

    /**
     * Sets docClass
     *
     * @param string|null $docClass The document detail class
     *
     * @return $this
     */
    public function setDocClass(?string $docClass): static
    {
        if (is_null($docClass)) {
            array_push($this->openAPINullablesSetToNull, 'docClass');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('docClass', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['docClass'] = $docClass;

        return $this;
    }

    /**
     * Gets docId
     *
     * @return string|null
     */
    public function getDocId(): ?string
    {
        return $this->container['docId'];
    }

    /**
     * Sets docId
     *
     * @param string|null $docId The document detail document id
     *
     * @return $this
     */
    public function setDocId(?string $docId): static
    {
        if (is_null($docId)) {
            array_push($this->openAPINullablesSetToNull, 'docId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('docId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['docId'] = $docId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId The document detail product id
     *
     * @return $this
     */
    public function setProductId(?string $productId): static
    {
        if (is_null($productId)) {
            array_push($this->openAPINullablesSetToNull, 'productId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId(): ?string
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId The document detail project id
     *
     * @return $this
     */
    public function setProjectId(?string $projectId): static
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets taxCodeId
     *
     * @return string|null
     */
    public function getTaxCodeId(): ?string
    {
        return $this->container['taxCodeId'];
    }

    /**
     * Sets taxCodeId
     *
     * @param string|null $taxCodeId The document detail tax code id
     *
     * @return $this
     */
    public function setTaxCodeId(?string $taxCodeId): static
    {
        if (is_null($taxCodeId)) {
            array_push($this->openAPINullablesSetToNull, 'taxCodeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCodeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCodeId'] = $taxCodeId;

        return $this;
    }

    /**
     * Gets taxDate
     *
     * @return \DateTime|null
     */
    public function getTaxDate(): ?\DateTime
    {
        return $this->container['taxDate'];
    }

    /**
     * Sets taxDate
     *
     * @param \DateTime|null $taxDate The document detail tax date
     *
     * @return $this
     */
    public function setTaxDate(?\DateTime $taxDate): static
    {
        if (is_null($taxDate)) {
            array_push($this->openAPINullablesSetToNull, 'taxDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxDate'] = $taxDate;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return float|null
     */
    public function getTaxRate(): ?float
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param float|null $taxRate The document detail tax rate
     *
     * @return $this
     */
    public function setTaxRate(?float $taxRate): static
    {
        if (is_null($taxRate)) {
            array_push($this->openAPINullablesSetToNull, 'taxRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets isNetEntry
     *
     * @return bool|null
     */
    public function getIsNetEntry(): ?bool
    {
        return $this->container['isNetEntry'];
    }

    /**
     * Sets isNetEntry
     *
     * @param bool|null $isNetEntry The document detail is net entry
     *
     * @return $this
     */
    public function setIsNetEntry(?bool $isNetEntry): static
    {
        if (is_null($isNetEntry)) {
            throw new InvalidArgumentException('non-nullable isNetEntry cannot be null');
        }
        $this->container['isNetEntry'] = $isNetEntry;

        return $this;
    }

    /**
     * Gets netCurrencyUnitPrice
     *
     * @return float|null
     */
    public function getNetCurrencyUnitPrice(): ?float
    {
        return $this->container['netCurrencyUnitPrice'];
    }

    /**
     * Sets netCurrencyUnitPrice
     *
     * @param float|null $netCurrencyUnitPrice The document detail net currency unit price
     *
     * @return $this
     */
    public function setNetCurrencyUnitPrice(?float $netCurrencyUnitPrice): static
    {
        if (is_null($netCurrencyUnitPrice)) {
            array_push($this->openAPINullablesSetToNull, 'netCurrencyUnitPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netCurrencyUnitPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netCurrencyUnitPrice'] = $netCurrencyUnitPrice;

        return $this;
    }

    /**
     * Gets grossCurrencyUnitPrice
     *
     * @return float|null
     */
    public function getGrossCurrencyUnitPrice(): ?float
    {
        return $this->container['grossCurrencyUnitPrice'];
    }

    /**
     * Sets grossCurrencyUnitPrice
     *
     * @param float|null $grossCurrencyUnitPrice The document detail gross currency unit price
     *
     * @return $this
     */
    public function setGrossCurrencyUnitPrice(?float $grossCurrencyUnitPrice): static
    {
        if (is_null($grossCurrencyUnitPrice)) {
            array_push($this->openAPINullablesSetToNull, 'grossCurrencyUnitPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossCurrencyUnitPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossCurrencyUnitPrice'] = $grossCurrencyUnitPrice;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The document detail quantity
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uomId
     *
     * @return string|null
     */
    public function getUomId(): ?string
    {
        return $this->container['uomId'];
    }

    /**
     * Sets uomId
     *
     * @param string|null $uomId The document detail unit of measure id
     *
     * @return $this
     */
    public function setUomId(?string $uomId): static
    {
        if (is_null($uomId)) {
            array_push($this->openAPINullablesSetToNull, 'uomId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uomId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uomId'] = $uomId;

        return $this;
    }

    /**
     * Gets skuQuantity
     *
     * @return float|null
     */
    public function getSkuQuantity(): ?float
    {
        return $this->container['skuQuantity'];
    }

    /**
     * Sets skuQuantity
     *
     * @param float|null $skuQuantity The document detail Sku quantity
     *
     * @return $this
     */
    public function setSkuQuantity(?float $skuQuantity): static
    {
        if (is_null($skuQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'skuQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skuQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skuQuantity'] = $skuQuantity;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The document detail net amount
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            array_push($this->openAPINullablesSetToNull, 'netAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets grossAmount
     *
     * @return float|null
     */
    public function getGrossAmount(): ?float
    {
        return $this->container['grossAmount'];
    }

    /**
     * Sets grossAmount
     *
     * @param float|null $grossAmount The document detail gross amount
     *
     * @return $this
     */
    public function setGrossAmount(?float $grossAmount): static
    {
        if (is_null($grossAmount)) {
            array_push($this->openAPINullablesSetToNull, 'grossAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossAmount'] = $grossAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The document detail tax amount
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            array_push($this->openAPINullablesSetToNull, 'taxAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets orderIndex
     *
     * @return int|null
     */
    public function getOrderIndex(): ?int
    {
        return $this->container['orderIndex'];
    }

    /**
     * Sets orderIndex
     *
     * @param int|null $orderIndex The document detail order index
     *
     * @return $this
     */
    public function setOrderIndex(?int $orderIndex): static
    {
        if (is_null($orderIndex)) {
            throw new InvalidArgumentException('non-nullable orderIndex cannot be null');
        }
        $this->container['orderIndex'] = $orderIndex;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return \DateTime|null
     */
    public function getLastModified(): ?\DateTime
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param \DateTime|null $lastModified The date and time this item has been last modified
     *
     * @return $this
     */
    public function setLastModified(?\DateTime $lastModified): static
    {
        if (is_null($lastModified)) {
            array_push($this->openAPINullablesSetToNull, 'lastModified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return string|null
     */
    public function getLastModifiedBy(): ?string
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param string|null $lastModifiedBy The user that last modified this item. See `UserAccount` catalog.
     *
     * @return $this
     */
    public function setLastModifiedBy(?string $lastModifiedBy): static
    {
        if (is_null($lastModifiedBy)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifiedBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifiedBy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets netCurrencyAmount
     *
     * @return float|null
     */
    public function getNetCurrencyAmount(): ?float
    {
        return $this->container['netCurrencyAmount'];
    }

    /**
     * Sets netCurrencyAmount
     *
     * @param float|null $netCurrencyAmount The document detail net currency amount
     *
     * @return $this
     */
    public function setNetCurrencyAmount(?float $netCurrencyAmount): static
    {
        if (is_null($netCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'netCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netCurrencyAmount'] = $netCurrencyAmount;

        return $this;
    }

    /**
     * Gets taxCurrencyAmount
     *
     * @return float|null
     */
    public function getTaxCurrencyAmount(): ?float
    {
        return $this->container['taxCurrencyAmount'];
    }

    /**
     * Sets taxCurrencyAmount
     *
     * @param float|null $taxCurrencyAmount The document detail tax currency amount
     *
     * @return $this
     */
    public function setTaxCurrencyAmount(?float $taxCurrencyAmount): static
    {
        if (is_null($taxCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'taxCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCurrencyAmount'] = $taxCurrencyAmount;

        return $this;
    }

    /**
     * Gets grossCurrencyAmount
     *
     * @return float|null
     */
    public function getGrossCurrencyAmount(): ?float
    {
        return $this->container['grossCurrencyAmount'];
    }

    /**
     * Sets grossCurrencyAmount
     *
     * @param float|null $grossCurrencyAmount The document detail gross currency amount
     *
     * @return $this
     */
    public function setGrossCurrencyAmount(?float $grossCurrencyAmount): static
    {
        if (is_null($grossCurrencyAmount)) {
            array_push($this->openAPINullablesSetToNull, 'grossCurrencyAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossCurrencyAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossCurrencyAmount'] = $grossCurrencyAmount;

        return $this;
    }

    /**
     * Gets fromStockLocationId
     *
     * @return string|null
     */
    public function getFromStockLocationId(): ?string
    {
        return $this->container['fromStockLocationId'];
    }

    /**
     * Sets fromStockLocationId
     *
     * @param string|null $fromStockLocationId The document detail from stock location id
     *
     * @return $this
     */
    public function setFromStockLocationId(?string $fromStockLocationId): static
    {
        if (is_null($fromStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'fromStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fromStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fromStockLocationId'] = $fromStockLocationId;

        return $this;
    }

    /**
     * Gets toStockLocationId
     *
     * @return string|null
     */
    public function getToStockLocationId(): ?string
    {
        return $this->container['toStockLocationId'];
    }

    /**
     * Sets toStockLocationId
     *
     * @param string|null $toStockLocationId The document detail to stock location id
     *
     * @return $this
     */
    public function setToStockLocationId(?string $toStockLocationId): static
    {
        if (is_null($toStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'toStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toStockLocationId'] = $toStockLocationId;

        return $this;
    }

    /**
     * Gets stockDate
     *
     * @return \DateTime|null
     */
    public function getStockDate(): ?\DateTime
    {
        return $this->container['stockDate'];
    }

    /**
     * Sets stockDate
     *
     * @param \DateTime|null $stockDate The document detail stock date
     *
     * @return $this
     */
    public function setStockDate(?\DateTime $stockDate): static
    {
        if (is_null($stockDate)) {
            array_push($this->openAPINullablesSetToNull, 'stockDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stockDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stockDate'] = $stockDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus(): ?int
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status The document detail status
     *
     * @return $this
     */
    public function setStatus(?int $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId The document detail account id
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): static
    {
        if (is_null($accountId)) {
            array_push($this->openAPINullablesSetToNull, 'accountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The document detail currency
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return float|null
     */
    public function getCurrencyRate(): ?float
    {
        return $this->container['currencyRate'];
    }

    /**
     * Sets currencyRate
     *
     * @param float|null $currencyRate The document detail currency rate
     *
     * @return $this
     */
    public function setCurrencyRate(?float $currencyRate): static
    {
        if (is_null($currencyRate)) {
            array_push($this->openAPINullablesSetToNull, 'currencyRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currencyRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments(): ?bool
    {
        return $this->container['hasAttachments'];
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments Flag indicating whether there are any documents attached
     *
     * @return $this
     */
    public function setHasAttachments(?bool $hasAttachments): static
    {
        if (is_null($hasAttachments)) {
            throw new InvalidArgumentException('non-nullable hasAttachments cannot be null');
        }
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets hasNotes
     *
     * @return bool|null
     */
    public function getHasNotes(): ?bool
    {
        return $this->container['hasNotes'];
    }

    /**
     * Sets hasNotes
     *
     * @param bool|null $hasNotes Flag indicating whether there are any notes attached
     *
     * @return $this
     */
    public function setHasNotes(?bool $hasNotes): static
    {
        if (is_null($hasNotes)) {
            throw new InvalidArgumentException('non-nullable hasNotes cannot be null');
        }
        $this->container['hasNotes'] = $hasNotes;

        return $this;
    }

    /**
     * Gets isTaxAdjustment
     *
     * @return bool|null
     */
    public function getIsTaxAdjustment(): ?bool
    {
        return $this->container['isTaxAdjustment'];
    }

    /**
     * Sets isTaxAdjustment
     *
     * @param bool|null $isTaxAdjustment The document detail is tax adjustment flag
     *
     * @return $this
     */
    public function setIsTaxAdjustment(?bool $isTaxAdjustment): static
    {
        if (is_null($isTaxAdjustment)) {
            throw new InvalidArgumentException('non-nullable isTaxAdjustment cannot be null');
        }
        $this->container['isTaxAdjustment'] = $isTaxAdjustment;

        return $this;
    }

    /**
     * Gets isReverseCharge
     *
     * @return bool|null
     */
    public function getIsReverseCharge(): ?bool
    {
        return $this->container['isReverseCharge'];
    }

    /**
     * Sets isReverseCharge
     *
     * @param bool|null $isReverseCharge The document detail is reverse charge flag
     *
     * @return $this
     */
    public function setIsReverseCharge(?bool $isReverseCharge): static
    {
        if (is_null($isReverseCharge)) {
            throw new InvalidArgumentException('non-nullable isReverseCharge cannot be null');
        }
        $this->container['isReverseCharge'] = $isReverseCharge;

        return $this;
    }

    /**
     * Gets taxBandId
     *
     * @return string|null
     */
    public function getTaxBandId(): ?string
    {
        return $this->container['taxBandId'];
    }

    /**
     * Sets taxBandId
     *
     * @param string|null $taxBandId The document detail tax band id
     *
     * @return $this
     */
    public function setTaxBandId(?string $taxBandId): static
    {
        if (is_null($taxBandId)) {
            array_push($this->openAPINullablesSetToNull, 'taxBandId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxBandId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxBandId'] = $taxBandId;

        return $this;
    }

    /**
     * Gets isResale
     *
     * @return bool|null
     */
    public function getIsResale(): ?bool
    {
        return $this->container['isResale'];
    }

    /**
     * Sets isResale
     *
     * @param bool|null $isResale The document detail is resale flag
     *
     * @return $this
     */
    public function setIsResale(?bool $isResale): static
    {
        if (is_null($isResale)) {
            throw new InvalidArgumentException('non-nullable isResale cannot be null');
        }
        $this->container['isResale'] = $isResale;

        return $this;
    }

    /**
     * Gets textPre
     *
     * @return string|null
     */
    public function getTextPre(): ?string
    {
        return $this->container['textPre'];
    }

    /**
     * Sets textPre
     *
     * @param string|null $textPre The document detail pre text
     *
     * @return $this
     */
    public function setTextPre(?string $textPre): static
    {
        if (is_null($textPre)) {
            array_push($this->openAPINullablesSetToNull, 'textPre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textPre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textPre'] = $textPre;

        return $this;
    }

    /**
     * Gets textPost
     *
     * @return string|null
     */
    public function getTextPost(): ?string
    {
        return $this->container['textPost'];
    }

    /**
     * Sets textPost
     *
     * @param string|null $textPost The document detail post text
     *
     * @return $this
     */
    public function setTextPost(?string $textPost): static
    {
        if (is_null($textPost)) {
            array_push($this->openAPINullablesSetToNull, 'textPost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textPost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textPost'] = $textPost;

        return $this;
    }

    /**
     * Gets intRef
     *
     * @return string|null
     */
    public function getIntRef(): ?string
    {
        return $this->container['intRef'];
    }

    /**
     * Sets intRef
     *
     * @param string|null $intRef Optional interface reference. If provided, it must be unique. <a href=\"https://docs.iplicit.com/dev/guide/identifiers/index.html\">Learn more</a>
     *
     * @return $this
     */
    public function setIntRef(?string $intRef): static
    {
        if (is_null($intRef)) {
            array_push($this->openAPINullablesSetToNull, 'intRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intRef'] = $intRef;

        return $this;
    }

    /**
     * Gets legacyRef
     *
     * @return string|null
     */
    public function getLegacyRef(): ?string
    {
        return $this->container['legacyRef'];
    }

    /**
     * Sets legacyRef
     *
     * @param string|null $legacyRef Alternative / legacy reference code
     *
     * @return $this
     */
    public function setLegacyRef(?string $legacyRef): static
    {
        if (is_null($legacyRef)) {
            array_push($this->openAPINullablesSetToNull, 'legacyRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legacyRef'] = $legacyRef;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return string|null
     */
    public function getProductType(): ?string
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string|null $productType The document detail product type
     *
     * @return $this
     */
    public function setProductType(?string $productType): static
    {
        if (is_null($productType)) {
            array_push($this->openAPINullablesSetToNull, 'productType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets isDeferred
     *
     * @return bool|null
     */
    public function getIsDeferred(): ?bool
    {
        return $this->container['isDeferred'];
    }

    /**
     * Sets isDeferred
     *
     * @param bool|null $isDeferred The document detail is deferred flag
     *
     * @return $this
     */
    public function setIsDeferred(?bool $isDeferred): static
    {
        if (is_null($isDeferred)) {
            array_push($this->openAPINullablesSetToNull, 'isDeferred');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isDeferred', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isDeferred'] = $isDeferred;

        return $this;
    }

    /**
     * Gets deferredDistribution
     *
     * @return \SynergiTech\Iplicit\Model\DocDetailDeferred|null
     */
    public function getDeferredDistribution(): ?\SynergiTech\Iplicit\Model\DocDetailDeferred
    {
        return $this->container['deferredDistribution'];
    }

    /**
     * Sets deferredDistribution
     *
     * @param \SynergiTech\Iplicit\Model\DocDetailDeferred|null $deferredDistribution deferredDistribution
     *
     * @return $this
     */
    public function setDeferredDistribution(?\SynergiTech\Iplicit\Model\DocDetailDeferred $deferredDistribution): static
    {
        if (is_null($deferredDistribution)) {
            throw new InvalidArgumentException('non-nullable deferredDistribution cannot be null');
        }
        $this->container['deferredDistribution'] = $deferredDistribution;

        return $this;
    }

    /**
     * Gets post
     *
     * @return array<string,string>|null
     */
    public function getPost(): ?array
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     *
     * @param array<string,string>|null $post The document posting fields
     *
     * @return $this
     */
    public function setPost(?array $post): static
    {
        if (is_null($post)) {
            array_push($this->openAPINullablesSetToNull, 'post');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post'] = $post;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


