<?php
/**
 * DocDetailUpdate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * DocDetailUpdate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DocDetailUpdate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DocDetailUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'productId' => 'string',
        'productSkuId' => 'string',
        'projectId' => 'string',
        'taxCodeId' => 'string',
        'uomId' => 'string',
        'accountId' => 'string',
        'post' => 'array<string,string>',
        'taxBandId' => 'string',
        'lineDate' => '\DateTime',
        'description' => 'string',
        'isNetEntry' => 'bool',
        'currencyUnitPrice' => 'float',
        'netCurrencyUnitPrice' => 'float',
        'grossCurrencyUnitPrice' => 'float',
        'quantity' => 'float',
        'skuQuantity' => 'float',
        'fromStockLocationId' => 'string',
        'toStockLocationId' => 'string',
        'stockDate' => '\DateTime',
        'isResale' => 'bool',
        'textPre' => 'string',
        'textPost' => 'string',
        'intRef' => 'string',
        'legacyRef' => 'string',
        'isDeferred' => 'bool',
        'deferredDistribution' => '\SynergiTech\Iplicit\Model\DocDetailDeferredCreateUpdate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'productId' => null,
        'productSkuId' => null,
        'projectId' => null,
        'taxCodeId' => null,
        'uomId' => null,
        'accountId' => null,
        'post' => null,
        'taxBandId' => null,
        'lineDate' => 'date-time',
        'description' => null,
        'isNetEntry' => null,
        'currencyUnitPrice' => 'double',
        'netCurrencyUnitPrice' => 'double',
        'grossCurrencyUnitPrice' => 'double',
        'quantity' => 'double',
        'skuQuantity' => 'double',
        'fromStockLocationId' => null,
        'toStockLocationId' => null,
        'stockDate' => 'date-time',
        'isResale' => null,
        'textPre' => null,
        'textPost' => null,
        'intRef' => null,
        'legacyRef' => null,
        'isDeferred' => null,
        'deferredDistribution' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'productId' => true,
        'productSkuId' => true,
        'projectId' => true,
        'taxCodeId' => true,
        'uomId' => true,
        'accountId' => true,
        'post' => true,
        'taxBandId' => true,
        'lineDate' => true,
        'description' => true,
        'isNetEntry' => true,
        'currencyUnitPrice' => true,
        'netCurrencyUnitPrice' => true,
        'grossCurrencyUnitPrice' => true,
        'quantity' => true,
        'skuQuantity' => true,
        'fromStockLocationId' => true,
        'toStockLocationId' => true,
        'stockDate' => true,
        'isResale' => true,
        'textPre' => true,
        'textPost' => true,
        'intRef' => true,
        'legacyRef' => true,
        'isDeferred' => true,
        'deferredDistribution' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'productId' => 'productId',
        'productSkuId' => 'productSkuId',
        'projectId' => 'projectId',
        'taxCodeId' => 'taxCodeId',
        'uomId' => 'uomId',
        'accountId' => 'accountId',
        'post' => 'post',
        'taxBandId' => 'taxBandId',
        'lineDate' => 'lineDate',
        'description' => 'description',
        'isNetEntry' => 'isNetEntry',
        'currencyUnitPrice' => 'currencyUnitPrice',
        'netCurrencyUnitPrice' => 'netCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'grossCurrencyUnitPrice',
        'quantity' => 'quantity',
        'skuQuantity' => 'skuQuantity',
        'fromStockLocationId' => 'fromStockLocationId',
        'toStockLocationId' => 'toStockLocationId',
        'stockDate' => 'stockDate',
        'isResale' => 'isResale',
        'textPre' => 'textPre',
        'textPost' => 'textPost',
        'intRef' => 'intRef',
        'legacyRef' => 'legacyRef',
        'isDeferred' => 'isDeferred',
        'deferredDistribution' => 'deferredDistribution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'productId' => 'setProductId',
        'productSkuId' => 'setProductSkuId',
        'projectId' => 'setProjectId',
        'taxCodeId' => 'setTaxCodeId',
        'uomId' => 'setUomId',
        'accountId' => 'setAccountId',
        'post' => 'setPost',
        'taxBandId' => 'setTaxBandId',
        'lineDate' => 'setLineDate',
        'description' => 'setDescription',
        'isNetEntry' => 'setIsNetEntry',
        'currencyUnitPrice' => 'setCurrencyUnitPrice',
        'netCurrencyUnitPrice' => 'setNetCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'setGrossCurrencyUnitPrice',
        'quantity' => 'setQuantity',
        'skuQuantity' => 'setSkuQuantity',
        'fromStockLocationId' => 'setFromStockLocationId',
        'toStockLocationId' => 'setToStockLocationId',
        'stockDate' => 'setStockDate',
        'isResale' => 'setIsResale',
        'textPre' => 'setTextPre',
        'textPost' => 'setTextPost',
        'intRef' => 'setIntRef',
        'legacyRef' => 'setLegacyRef',
        'isDeferred' => 'setIsDeferred',
        'deferredDistribution' => 'setDeferredDistribution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'productId' => 'getProductId',
        'productSkuId' => 'getProductSkuId',
        'projectId' => 'getProjectId',
        'taxCodeId' => 'getTaxCodeId',
        'uomId' => 'getUomId',
        'accountId' => 'getAccountId',
        'post' => 'getPost',
        'taxBandId' => 'getTaxBandId',
        'lineDate' => 'getLineDate',
        'description' => 'getDescription',
        'isNetEntry' => 'getIsNetEntry',
        'currencyUnitPrice' => 'getCurrencyUnitPrice',
        'netCurrencyUnitPrice' => 'getNetCurrencyUnitPrice',
        'grossCurrencyUnitPrice' => 'getGrossCurrencyUnitPrice',
        'quantity' => 'getQuantity',
        'skuQuantity' => 'getSkuQuantity',
        'fromStockLocationId' => 'getFromStockLocationId',
        'toStockLocationId' => 'getToStockLocationId',
        'stockDate' => 'getStockDate',
        'isResale' => 'getIsResale',
        'textPre' => 'getTextPre',
        'textPost' => 'getTextPost',
        'intRef' => 'getIntRef',
        'legacyRef' => 'getLegacyRef',
        'isDeferred' => 'getIsDeferred',
        'deferredDistribution' => 'getDeferredDistribution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productSkuId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('taxCodeId', $data ?? [], null);
        $this->setIfExists('uomId', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('post', $data ?? [], null);
        $this->setIfExists('taxBandId', $data ?? [], null);
        $this->setIfExists('lineDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('isNetEntry', $data ?? [], null);
        $this->setIfExists('currencyUnitPrice', $data ?? [], null);
        $this->setIfExists('netCurrencyUnitPrice', $data ?? [], null);
        $this->setIfExists('grossCurrencyUnitPrice', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('skuQuantity', $data ?? [], null);
        $this->setIfExists('fromStockLocationId', $data ?? [], null);
        $this->setIfExists('toStockLocationId', $data ?? [], null);
        $this->setIfExists('stockDate', $data ?? [], null);
        $this->setIfExists('isResale', $data ?? [], null);
        $this->setIfExists('textPre', $data ?? [], null);
        $this->setIfExists('textPost', $data ?? [], null);
        $this->setIfExists('intRef', $data ?? [], null);
        $this->setIfExists('legacyRef', $data ?? [], null);
        $this->setIfExists('isDeferred', $data ?? [], null);
        $this->setIfExists('deferredDistribution', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['productId']) && (mb_strlen($this->container['productId']) > 50)) {
            $invalidProperties[] = "invalid value for 'productId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['productSkuId']) && (mb_strlen($this->container['productSkuId']) > 50)) {
            $invalidProperties[] = "invalid value for 'productSkuId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['projectId']) && (mb_strlen($this->container['projectId']) > 50)) {
            $invalidProperties[] = "invalid value for 'projectId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxCodeId']) && (mb_strlen($this->container['taxCodeId']) > 50)) {
            $invalidProperties[] = "invalid value for 'taxCodeId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['uomId']) && (mb_strlen($this->container['uomId']) > 50)) {
            $invalidProperties[] = "invalid value for 'uomId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['accountId']) && (mb_strlen($this->container['accountId']) > 50)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxBandId']) && (mb_strlen($this->container['taxBandId']) > 50)) {
            $invalidProperties[] = "invalid value for 'taxBandId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['intRef']) && (mb_strlen($this->container['intRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'intRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['legacyRef']) && (mb_strlen($this->container['legacyRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'legacyRef', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId The document detail product id or code
     *
     * @return $this
     */
    public function setProductId(?string $productId): static
    {
        if (is_null($productId)) {
            array_push($this->openAPINullablesSetToNull, 'productId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productId) && (mb_strlen($productId) > 50)) {
            throw new InvalidArgumentException('invalid length for $productId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productSkuId
     *
     * @return string|null
     */
    public function getProductSkuId(): ?string
    {
        return $this->container['productSkuId'];
    }

    /**
     * Sets productSkuId
     *
     * @param string|null $productSkuId The document detail product sku id or code
     *
     * @return $this
     */
    public function setProductSkuId(?string $productSkuId): static
    {
        if (is_null($productSkuId)) {
            array_push($this->openAPINullablesSetToNull, 'productSkuId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productSkuId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productSkuId) && (mb_strlen($productSkuId) > 50)) {
            throw new InvalidArgumentException('invalid length for $productSkuId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['productSkuId'] = $productSkuId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId(): ?string
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId The document detail project id or code
     *
     * @return $this
     */
    public function setProjectId(?string $projectId): static
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($projectId) && (mb_strlen($projectId) > 50)) {
            throw new InvalidArgumentException('invalid length for $projectId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets taxCodeId
     *
     * @return string|null
     */
    public function getTaxCodeId(): ?string
    {
        return $this->container['taxCodeId'];
    }

    /**
     * Sets taxCodeId
     *
     * @param string|null $taxCodeId The document detail tax id or code
     *
     * @return $this
     */
    public function setTaxCodeId(?string $taxCodeId): static
    {
        if (is_null($taxCodeId)) {
            array_push($this->openAPINullablesSetToNull, 'taxCodeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCodeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxCodeId) && (mb_strlen($taxCodeId) > 50)) {
            throw new InvalidArgumentException('invalid length for $taxCodeId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['taxCodeId'] = $taxCodeId;

        return $this;
    }

    /**
     * Gets uomId
     *
     * @return string|null
     */
    public function getUomId(): ?string
    {
        return $this->container['uomId'];
    }

    /**
     * Sets uomId
     *
     * @param string|null $uomId The document detail unit of measure id or code
     *
     * @return $this
     */
    public function setUomId(?string $uomId): static
    {
        if (is_null($uomId)) {
            array_push($this->openAPINullablesSetToNull, 'uomId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uomId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uomId) && (mb_strlen($uomId) > 50)) {
            throw new InvalidArgumentException('invalid length for $uomId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['uomId'] = $uomId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId The document detail account id or code
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): static
    {
        if (is_null($accountId)) {
            array_push($this->openAPINullablesSetToNull, 'accountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountId) && (mb_strlen($accountId) > 50)) {
            throw new InvalidArgumentException('invalid length for $accountId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets post
     *
     * @return array<string,string>|null
     */
    public function getPost(): ?array
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     *
     * @param array<string,string>|null $post The document detail posting attributes
     *
     * @return $this
     */
    public function setPost(?array $post): static
    {
        if (is_null($post)) {
            array_push($this->openAPINullablesSetToNull, 'post');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post'] = $post;

        return $this;
    }

    /**
     * Gets taxBandId
     *
     * @return string|null
     */
    public function getTaxBandId(): ?string
    {
        return $this->container['taxBandId'];
    }

    /**
     * Sets taxBandId
     *
     * @param string|null $taxBandId The document detail tax band id or code
     *
     * @return $this
     */
    public function setTaxBandId(?string $taxBandId): static
    {
        if (is_null($taxBandId)) {
            array_push($this->openAPINullablesSetToNull, 'taxBandId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxBandId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxBandId) && (mb_strlen($taxBandId) > 50)) {
            throw new InvalidArgumentException('invalid length for $taxBandId when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['taxBandId'] = $taxBandId;

        return $this;
    }

    /**
     * Gets lineDate
     *
     * @return \DateTime|null
     */
    public function getLineDate(): ?\DateTime
    {
        return $this->container['lineDate'];
    }

    /**
     * Sets lineDate
     *
     * @param \DateTime|null $lineDate The document detail line date
     *
     * @return $this
     */
    public function setLineDate(?\DateTime $lineDate): static
    {
        if (is_null($lineDate)) {
            array_push($this->openAPINullablesSetToNull, 'lineDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lineDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lineDate'] = $lineDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The document detail description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 250)) {
            throw new InvalidArgumentException('invalid length for $description when calling DocDetailUpdate., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isNetEntry
     *
     * @return bool|null
     */
    public function getIsNetEntry(): ?bool
    {
        return $this->container['isNetEntry'];
    }

    /**
     * Sets isNetEntry
     *
     * @param bool|null $isNetEntry The document detail is net entry flag
     *
     * @return $this
     */
    public function setIsNetEntry(?bool $isNetEntry): static
    {
        if (is_null($isNetEntry)) {
            array_push($this->openAPINullablesSetToNull, 'isNetEntry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isNetEntry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isNetEntry'] = $isNetEntry;

        return $this;
    }

    /**
     * Gets currencyUnitPrice
     *
     * @return float|null
     */
    public function getCurrencyUnitPrice(): ?float
    {
        return $this->container['currencyUnitPrice'];
    }

    /**
     * Sets currencyUnitPrice
     *
     * @param float|null $currencyUnitPrice The document detail currency unit price
     *
     * @return $this
     */
    public function setCurrencyUnitPrice(?float $currencyUnitPrice): static
    {
        if (is_null($currencyUnitPrice)) {
            array_push($this->openAPINullablesSetToNull, 'currencyUnitPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currencyUnitPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currencyUnitPrice'] = $currencyUnitPrice;

        return $this;
    }

    /**
     * Gets netCurrencyUnitPrice
     *
     * @return float|null
     */
    public function getNetCurrencyUnitPrice(): ?float
    {
        return $this->container['netCurrencyUnitPrice'];
    }

    /**
     * Sets netCurrencyUnitPrice
     *
     * @param float|null $netCurrencyUnitPrice The document detail net currency unit price
     *
     * @return $this
     */
    public function setNetCurrencyUnitPrice(?float $netCurrencyUnitPrice): static
    {
        if (is_null($netCurrencyUnitPrice)) {
            array_push($this->openAPINullablesSetToNull, 'netCurrencyUnitPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netCurrencyUnitPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netCurrencyUnitPrice'] = $netCurrencyUnitPrice;

        return $this;
    }

    /**
     * Gets grossCurrencyUnitPrice
     *
     * @return float|null
     */
    public function getGrossCurrencyUnitPrice(): ?float
    {
        return $this->container['grossCurrencyUnitPrice'];
    }

    /**
     * Sets grossCurrencyUnitPrice
     *
     * @param float|null $grossCurrencyUnitPrice The document detail gross currency unit price
     *
     * @return $this
     */
    public function setGrossCurrencyUnitPrice(?float $grossCurrencyUnitPrice): static
    {
        if (is_null($grossCurrencyUnitPrice)) {
            array_push($this->openAPINullablesSetToNull, 'grossCurrencyUnitPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossCurrencyUnitPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossCurrencyUnitPrice'] = $grossCurrencyUnitPrice;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The document detail quantity
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets skuQuantity
     *
     * @return float|null
     */
    public function getSkuQuantity(): ?float
    {
        return $this->container['skuQuantity'];
    }

    /**
     * Sets skuQuantity
     *
     * @param float|null $skuQuantity The document detail Sku quantity
     *
     * @return $this
     */
    public function setSkuQuantity(?float $skuQuantity): static
    {
        if (is_null($skuQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'skuQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skuQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skuQuantity'] = $skuQuantity;

        return $this;
    }

    /**
     * Gets fromStockLocationId
     *
     * @return string|null
     */
    public function getFromStockLocationId(): ?string
    {
        return $this->container['fromStockLocationId'];
    }

    /**
     * Sets fromStockLocationId
     *
     * @param string|null $fromStockLocationId The document detail from stock location id
     *
     * @return $this
     */
    public function setFromStockLocationId(?string $fromStockLocationId): static
    {
        if (is_null($fromStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'fromStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fromStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fromStockLocationId'] = $fromStockLocationId;

        return $this;
    }

    /**
     * Gets toStockLocationId
     *
     * @return string|null
     */
    public function getToStockLocationId(): ?string
    {
        return $this->container['toStockLocationId'];
    }

    /**
     * Sets toStockLocationId
     *
     * @param string|null $toStockLocationId The document detail to stock location id
     *
     * @return $this
     */
    public function setToStockLocationId(?string $toStockLocationId): static
    {
        if (is_null($toStockLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'toStockLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toStockLocationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toStockLocationId'] = $toStockLocationId;

        return $this;
    }

    /**
     * Gets stockDate
     *
     * @return \DateTime|null
     */
    public function getStockDate(): ?\DateTime
    {
        return $this->container['stockDate'];
    }

    /**
     * Sets stockDate
     *
     * @param \DateTime|null $stockDate The document detail from stock date
     *
     * @return $this
     */
    public function setStockDate(?\DateTime $stockDate): static
    {
        if (is_null($stockDate)) {
            array_push($this->openAPINullablesSetToNull, 'stockDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stockDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stockDate'] = $stockDate;

        return $this;
    }

    /**
     * Gets isResale
     *
     * @return bool|null
     */
    public function getIsResale(): ?bool
    {
        return $this->container['isResale'];
    }

    /**
     * Sets isResale
     *
     * @param bool|null $isResale The document detail is resale flag
     *
     * @return $this
     */
    public function setIsResale(?bool $isResale): static
    {
        if (is_null($isResale)) {
            array_push($this->openAPINullablesSetToNull, 'isResale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isResale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isResale'] = $isResale;

        return $this;
    }

    /**
     * Gets textPre
     *
     * @return string|null
     */
    public function getTextPre(): ?string
    {
        return $this->container['textPre'];
    }

    /**
     * Sets textPre
     *
     * @param string|null $textPre The document detail pre text
     *
     * @return $this
     */
    public function setTextPre(?string $textPre): static
    {
        if (is_null($textPre)) {
            array_push($this->openAPINullablesSetToNull, 'textPre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textPre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textPre'] = $textPre;

        return $this;
    }

    /**
     * Gets textPost
     *
     * @return string|null
     */
    public function getTextPost(): ?string
    {
        return $this->container['textPost'];
    }

    /**
     * Sets textPost
     *
     * @param string|null $textPost The document detail post text
     *
     * @return $this
     */
    public function setTextPost(?string $textPost): static
    {
        if (is_null($textPost)) {
            array_push($this->openAPINullablesSetToNull, 'textPost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textPost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textPost'] = $textPost;

        return $this;
    }

    /**
     * Gets intRef
     *
     * @return string|null
     */
    public function getIntRef(): ?string
    {
        return $this->container['intRef'];
    }

    /**
     * Sets intRef
     *
     * @param string|null $intRef Optional interface reference. If provided, it must be unique. <a href=\"https://docs.iplicit.com/dev/guide/identifiers/index.html\">Learn more</a>
     *
     * @return $this
     */
    public function setIntRef(?string $intRef): static
    {
        if (is_null($intRef)) {
            array_push($this->openAPINullablesSetToNull, 'intRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intRef) && (mb_strlen($intRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $intRef when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['intRef'] = $intRef;

        return $this;
    }

    /**
     * Gets legacyRef
     *
     * @return string|null
     */
    public function getLegacyRef(): ?string
    {
        return $this->container['legacyRef'];
    }

    /**
     * Sets legacyRef
     *
     * @param string|null $legacyRef Alternative / legacy reference code
     *
     * @return $this
     */
    public function setLegacyRef(?string $legacyRef): static
    {
        if (is_null($legacyRef)) {
            array_push($this->openAPINullablesSetToNull, 'legacyRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legacyRef) && (mb_strlen($legacyRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $legacyRef when calling DocDetailUpdate., must be smaller than or equal to 50.');
        }

        $this->container['legacyRef'] = $legacyRef;

        return $this;
    }

    /**
     * Gets isDeferred
     *
     * @return bool|null
     */
    public function getIsDeferred(): ?bool
    {
        return $this->container['isDeferred'];
    }

    /**
     * Sets isDeferred
     *
     * @param bool|null $isDeferred The document detail is deferred flag
     *
     * @return $this
     */
    public function setIsDeferred(?bool $isDeferred): static
    {
        if (is_null($isDeferred)) {
            array_push($this->openAPINullablesSetToNull, 'isDeferred');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isDeferred', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isDeferred'] = $isDeferred;

        return $this;
    }

    /**
     * Gets deferredDistribution
     *
     * @return \SynergiTech\Iplicit\Model\DocDetailDeferredCreateUpdate|null
     */
    public function getDeferredDistribution(): ?\SynergiTech\Iplicit\Model\DocDetailDeferredCreateUpdate
    {
        return $this->container['deferredDistribution'];
    }

    /**
     * Sets deferredDistribution
     *
     * @param \SynergiTech\Iplicit\Model\DocDetailDeferredCreateUpdate|null $deferredDistribution deferredDistribution
     *
     * @return $this
     */
    public function setDeferredDistribution(?\SynergiTech\Iplicit\Model\DocDetailDeferredCreateUpdate $deferredDistribution): static
    {
        if (is_null($deferredDistribution)) {
            throw new InvalidArgumentException('non-nullable deferredDistribution cannot be null');
        }
        $this->container['deferredDistribution'] = $deferredDistribution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


