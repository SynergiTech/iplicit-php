<?php
/**
 * ProductSalePriceCreate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ProductSalePriceCreate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProductSalePriceCreate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProductSalePriceCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'currency' => 'string',
        'unitPrice' => 'float',
        'effectiveDate' => '\DateTime',
        'quantityFrom' => 'float',
        'quantityTo' => 'float',
        'unitOfMeasureRef' => 'string',
        'customerRef' => 'string',
        'projectRef' => 'string',
        'productPriceBandRef' => 'string',
        'productSKURef' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'currency' => null,
        'unitPrice' => 'double',
        'effectiveDate' => 'date-time',
        'quantityFrom' => 'double',
        'quantityTo' => 'double',
        'unitOfMeasureRef' => null,
        'customerRef' => null,
        'projectRef' => null,
        'productPriceBandRef' => null,
        'productSKURef' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'currency' => true,
        'unitPrice' => false,
        'effectiveDate' => true,
        'quantityFrom' => false,
        'quantityTo' => true,
        'unitOfMeasureRef' => true,
        'customerRef' => true,
        'projectRef' => true,
        'productPriceBandRef' => true,
        'productSKURef' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'currency' => 'currency',
        'unitPrice' => 'unitPrice',
        'effectiveDate' => 'effectiveDate',
        'quantityFrom' => 'quantityFrom',
        'quantityTo' => 'quantityTo',
        'unitOfMeasureRef' => 'unitOfMeasureRef',
        'customerRef' => 'customerRef',
        'projectRef' => 'projectRef',
        'productPriceBandRef' => 'productPriceBandRef',
        'productSKURef' => 'productSKURef'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'currency' => 'setCurrency',
        'unitPrice' => 'setUnitPrice',
        'effectiveDate' => 'setEffectiveDate',
        'quantityFrom' => 'setQuantityFrom',
        'quantityTo' => 'setQuantityTo',
        'unitOfMeasureRef' => 'setUnitOfMeasureRef',
        'customerRef' => 'setCustomerRef',
        'projectRef' => 'setProjectRef',
        'productPriceBandRef' => 'setProductPriceBandRef',
        'productSKURef' => 'setProductSKURef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'currency' => 'getCurrency',
        'unitPrice' => 'getUnitPrice',
        'effectiveDate' => 'getEffectiveDate',
        'quantityFrom' => 'getQuantityFrom',
        'quantityTo' => 'getQuantityTo',
        'unitOfMeasureRef' => 'getUnitOfMeasureRef',
        'customerRef' => 'getCustomerRef',
        'projectRef' => 'getProjectRef',
        'productPriceBandRef' => 'getProductPriceBandRef',
        'productSKURef' => 'getProductSKURef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('quantityFrom', $data ?? [], null);
        $this->setIfExists('quantityTo', $data ?? [], null);
        $this->setIfExists('unitOfMeasureRef', $data ?? [], null);
        $this->setIfExists('customerRef', $data ?? [], null);
        $this->setIfExists('projectRef', $data ?? [], null);
        $this->setIfExists('productPriceBandRef', $data ?? [], null);
        $this->setIfExists('productSKURef', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['unitPrice'] === null) {
            $invalidProperties[] = "'unitPrice' can't be null";
        }
        if (!is_null($this->container['unitOfMeasureRef']) && (mb_strlen($this->container['unitOfMeasureRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'unitOfMeasureRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customerRef']) && (mb_strlen($this->container['customerRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'customerRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['projectRef']) && (mb_strlen($this->container['projectRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'projectRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['productPriceBandRef']) && (mb_strlen($this->container['productPriceBandRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'productPriceBandRef', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['productSKURef']) && (mb_strlen($this->container['productSKURef']) > 50)) {
            $invalidProperties[] = "invalid value for 'productSKURef', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The product price currency code  Will be defaulted from the environment default.
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 5)) {
            throw new InvalidArgumentException('invalid length for $currency when calling ProductSalePriceCreate., must be smaller than or equal to 5.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return float
     */
    public function getUnitPrice(): float
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param float $unitPrice The product unit price
     *
     * @return $this
     */
    public function setUnitPrice(float $unitPrice): static
    {
        if (is_null($unitPrice)) {
            throw new InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate(): ?\DateTime
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param \DateTime|null $effectiveDate The product price effective date  Will be defaulted to todays date
     *
     * @return $this
     */
    public function setEffectiveDate(?\DateTime $effectiveDate): static
    {
        if (is_null($effectiveDate)) {
            array_push($this->openAPINullablesSetToNull, 'effectiveDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effectiveDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effectiveDate'] = $effectiveDate;

        return $this;
    }

    /**
     * Gets quantityFrom
     *
     * @return float|null
     */
    public function getQuantityFrom(): ?float
    {
        return $this->container['quantityFrom'];
    }

    /**
     * Sets quantityFrom
     *
     * @param float|null $quantityFrom The product quantity this price is applicable from  Will be defaulted to zero.
     *
     * @return $this
     */
    public function setQuantityFrom(?float $quantityFrom): static
    {
        if (is_null($quantityFrom)) {
            throw new InvalidArgumentException('non-nullable quantityFrom cannot be null');
        }
        $this->container['quantityFrom'] = $quantityFrom;

        return $this;
    }

    /**
     * Gets quantityTo
     *
     * @return float|null
     */
    public function getQuantityTo(): ?float
    {
        return $this->container['quantityTo'];
    }

    /**
     * Sets quantityTo
     *
     * @param float|null $quantityTo The product quantity this price is applicable to
     *
     * @return $this
     */
    public function setQuantityTo(?float $quantityTo): static
    {
        if (is_null($quantityTo)) {
            array_push($this->openAPINullablesSetToNull, 'quantityTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantityTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantityTo'] = $quantityTo;

        return $this;
    }

    /**
     * Gets unitOfMeasureRef
     *
     * @return string|null
     */
    public function getUnitOfMeasureRef(): ?string
    {
        return $this->container['unitOfMeasureRef'];
    }

    /**
     * Sets unitOfMeasureRef
     *
     * @param string|null $unitOfMeasureRef Unit of measure (id or code).  See catalog `Unit` for possible values.  Will defaulted from the parent product
     *
     * @return $this
     */
    public function setUnitOfMeasureRef(?string $unitOfMeasureRef): static
    {
        if (is_null($unitOfMeasureRef)) {
            array_push($this->openAPINullablesSetToNull, 'unitOfMeasureRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitOfMeasureRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($unitOfMeasureRef) && (mb_strlen($unitOfMeasureRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $unitOfMeasureRef when calling ProductSalePriceCreate., must be smaller than or equal to 50.');
        }

        $this->container['unitOfMeasureRef'] = $unitOfMeasureRef;

        return $this;
    }

    /**
     * Gets customerRef
     *
     * @return string|null
     */
    public function getCustomerRef(): ?string
    {
        return $this->container['customerRef'];
    }

    /**
     * Sets customerRef
     *
     * @param string|null $customerRef Product price supplier id or code.
     *
     * @return $this
     */
    public function setCustomerRef(?string $customerRef): static
    {
        if (is_null($customerRef)) {
            array_push($this->openAPINullablesSetToNull, 'customerRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerRef) && (mb_strlen($customerRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $customerRef when calling ProductSalePriceCreate., must be smaller than or equal to 50.');
        }

        $this->container['customerRef'] = $customerRef;

        return $this;
    }

    /**
     * Gets projectRef
     *
     * @return string|null
     */
    public function getProjectRef(): ?string
    {
        return $this->container['projectRef'];
    }

    /**
     * Sets projectRef
     *
     * @param string|null $projectRef Default project id or code.
     *
     * @return $this
     */
    public function setProjectRef(?string $projectRef): static
    {
        if (is_null($projectRef)) {
            array_push($this->openAPINullablesSetToNull, 'projectRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($projectRef) && (mb_strlen($projectRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $projectRef when calling ProductSalePriceCreate., must be smaller than or equal to 50.');
        }

        $this->container['projectRef'] = $projectRef;

        return $this;
    }

    /**
     * Gets productPriceBandRef
     *
     * @return string|null
     */
    public function getProductPriceBandRef(): ?string
    {
        return $this->container['productPriceBandRef'];
    }

    /**
     * Sets productPriceBandRef
     *
     * @param string|null $productPriceBandRef Product Price band id or code.
     *
     * @return $this
     */
    public function setProductPriceBandRef(?string $productPriceBandRef): static
    {
        if (is_null($productPriceBandRef)) {
            array_push($this->openAPINullablesSetToNull, 'productPriceBandRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productPriceBandRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productPriceBandRef) && (mb_strlen($productPriceBandRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $productPriceBandRef when calling ProductSalePriceCreate., must be smaller than or equal to 50.');
        }

        $this->container['productPriceBandRef'] = $productPriceBandRef;

        return $this;
    }

    /**
     * Gets productSKURef
     *
     * @return string|null
     */
    public function getProductSKURef(): ?string
    {
        return $this->container['productSKURef'];
    }

    /**
     * Sets productSKURef
     *
     * @param string|null $productSKURef Product SKU id or code.
     *
     * @return $this
     */
    public function setProductSKURef(?string $productSKURef): static
    {
        if (is_null($productSKURef)) {
            array_push($this->openAPINullablesSetToNull, 'productSKURef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productSKURef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productSKURef) && (mb_strlen($productSKURef) > 50)) {
            throw new InvalidArgumentException('invalid length for $productSKURef when calling ProductSalePriceCreate., must be smaller than or equal to 50.');
        }

        $this->container['productSKURef'] = $productSKURef;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


