<?php
/**
 * ProductSalePriceRead
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ProductSalePriceRead Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProductSalePriceRead implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProductSalePriceRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'productSaleId' => 'string',
        'customerId' => 'string',
        'currency' => 'string',
        'unitPrice' => 'float',
        'effectiveDate' => '\DateTime',
        'isActive' => 'bool',
        'quantityFrom' => 'float',
        'quantityTo' => 'float',
        'quantityToCalc' => 'float',
        'unitOfMeasureId' => 'string',
        'productSkuId' => 'string',
        'projectId' => 'string',
        'legalEntityId' => 'string',
        'priceRef' => 'string',
        'productPriceBandId' => 'string',
        'lastModified' => '\DateTime',
        'lastModifiedBy' => 'string',
        'resourceGroupId' => 'string',
        'resourceId' => 'string',
        'timesheetRateTypeId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'productSaleId' => 'uuid',
        'customerId' => 'uuid',
        'currency' => null,
        'unitPrice' => 'double',
        'effectiveDate' => 'date-time',
        'isActive' => null,
        'quantityFrom' => 'double',
        'quantityTo' => 'double',
        'quantityToCalc' => 'double',
        'unitOfMeasureId' => 'uuid',
        'productSkuId' => 'uuid',
        'projectId' => 'uuid',
        'legalEntityId' => 'uuid',
        'priceRef' => null,
        'productPriceBandId' => 'uuid',
        'lastModified' => 'date-time',
        'lastModifiedBy' => null,
        'resourceGroupId' => 'uuid',
        'resourceId' => 'uuid',
        'timesheetRateTypeId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'productSaleId' => false,
        'customerId' => true,
        'currency' => true,
        'unitPrice' => false,
        'effectiveDate' => false,
        'isActive' => false,
        'quantityFrom' => false,
        'quantityTo' => true,
        'quantityToCalc' => true,
        'unitOfMeasureId' => true,
        'productSkuId' => true,
        'projectId' => true,
        'legalEntityId' => true,
        'priceRef' => true,
        'productPriceBandId' => true,
        'lastModified' => false,
        'lastModifiedBy' => true,
        'resourceGroupId' => true,
        'resourceId' => true,
        'timesheetRateTypeId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'productSaleId' => 'productSaleId',
        'customerId' => 'customerId',
        'currency' => 'currency',
        'unitPrice' => 'unitPrice',
        'effectiveDate' => 'effectiveDate',
        'isActive' => 'isActive',
        'quantityFrom' => 'quantityFrom',
        'quantityTo' => 'quantityTo',
        'quantityToCalc' => 'quantityToCalc',
        'unitOfMeasureId' => 'unitOfMeasureId',
        'productSkuId' => 'productSkuId',
        'projectId' => 'projectId',
        'legalEntityId' => 'legalEntityId',
        'priceRef' => 'priceRef',
        'productPriceBandId' => 'productPriceBandId',
        'lastModified' => 'lastModified',
        'lastModifiedBy' => 'lastModifiedBy',
        'resourceGroupId' => 'resourceGroupId',
        'resourceId' => 'resourceId',
        'timesheetRateTypeId' => 'timesheetRateTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'productSaleId' => 'setProductSaleId',
        'customerId' => 'setCustomerId',
        'currency' => 'setCurrency',
        'unitPrice' => 'setUnitPrice',
        'effectiveDate' => 'setEffectiveDate',
        'isActive' => 'setIsActive',
        'quantityFrom' => 'setQuantityFrom',
        'quantityTo' => 'setQuantityTo',
        'quantityToCalc' => 'setQuantityToCalc',
        'unitOfMeasureId' => 'setUnitOfMeasureId',
        'productSkuId' => 'setProductSkuId',
        'projectId' => 'setProjectId',
        'legalEntityId' => 'setLegalEntityId',
        'priceRef' => 'setPriceRef',
        'productPriceBandId' => 'setProductPriceBandId',
        'lastModified' => 'setLastModified',
        'lastModifiedBy' => 'setLastModifiedBy',
        'resourceGroupId' => 'setResourceGroupId',
        'resourceId' => 'setResourceId',
        'timesheetRateTypeId' => 'setTimesheetRateTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'productSaleId' => 'getProductSaleId',
        'customerId' => 'getCustomerId',
        'currency' => 'getCurrency',
        'unitPrice' => 'getUnitPrice',
        'effectiveDate' => 'getEffectiveDate',
        'isActive' => 'getIsActive',
        'quantityFrom' => 'getQuantityFrom',
        'quantityTo' => 'getQuantityTo',
        'quantityToCalc' => 'getQuantityToCalc',
        'unitOfMeasureId' => 'getUnitOfMeasureId',
        'productSkuId' => 'getProductSkuId',
        'projectId' => 'getProjectId',
        'legalEntityId' => 'getLegalEntityId',
        'priceRef' => 'getPriceRef',
        'productPriceBandId' => 'getProductPriceBandId',
        'lastModified' => 'getLastModified',
        'lastModifiedBy' => 'getLastModifiedBy',
        'resourceGroupId' => 'getResourceGroupId',
        'resourceId' => 'getResourceId',
        'timesheetRateTypeId' => 'getTimesheetRateTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('productSaleId', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('quantityFrom', $data ?? [], null);
        $this->setIfExists('quantityTo', $data ?? [], null);
        $this->setIfExists('quantityToCalc', $data ?? [], null);
        $this->setIfExists('unitOfMeasureId', $data ?? [], null);
        $this->setIfExists('productSkuId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('legalEntityId', $data ?? [], null);
        $this->setIfExists('priceRef', $data ?? [], null);
        $this->setIfExists('productPriceBandId', $data ?? [], null);
        $this->setIfExists('lastModified', $data ?? [], null);
        $this->setIfExists('lastModifiedBy', $data ?? [], null);
        $this->setIfExists('resourceGroupId', $data ?? [], null);
        $this->setIfExists('resourceId', $data ?? [], null);
        $this->setIfExists('timesheetRateTypeId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Product Sale Price Unique Identifier.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets productSaleId
     *
     * @return string|null
     */
    public function getProductSaleId(): ?string
    {
        return $this->container['productSaleId'];
    }

    /**
     * Sets productSaleId
     *
     * @param string|null $productSaleId Id of Product Sale for select price.
     *
     * @return $this
     */
    public function setProductSaleId(?string $productSaleId): static
    {
        if (is_null($productSaleId)) {
            throw new InvalidArgumentException('non-nullable productSaleId cannot be null');
        }
        $this->container['productSaleId'] = $productSaleId;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId(): ?string
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId Product price customer id.
     *
     * @return $this
     */
    public function setCustomerId(?string $customerId): static
    {
        if (is_null($customerId)) {
            array_push($this->openAPINullablesSetToNull, 'customerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The product price currency code
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return float|null
     */
    public function getUnitPrice(): ?float
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param float|null $unitPrice The product unit price.
     *
     * @return $this
     */
    public function setUnitPrice(?float $unitPrice): static
    {
        if (is_null($unitPrice)) {
            throw new InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate(): ?\DateTime
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param \DateTime|null $effectiveDate The product price effective date
     *
     * @return $this
     */
    public function setEffectiveDate(?\DateTime $effectiveDate): static
    {
        if (is_null($effectiveDate)) {
            throw new InvalidArgumentException('non-nullable effectiveDate cannot be null');
        }
        $this->container['effectiveDate'] = $effectiveDate;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive Is the product Sale price active
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets quantityFrom
     *
     * @return float|null
     */
    public function getQuantityFrom(): ?float
    {
        return $this->container['quantityFrom'];
    }

    /**
     * Sets quantityFrom
     *
     * @param float|null $quantityFrom The product quantity this price is applicable from
     *
     * @return $this
     */
    public function setQuantityFrom(?float $quantityFrom): static
    {
        if (is_null($quantityFrom)) {
            throw new InvalidArgumentException('non-nullable quantityFrom cannot be null');
        }
        $this->container['quantityFrom'] = $quantityFrom;

        return $this;
    }

    /**
     * Gets quantityTo
     *
     * @return float|null
     */
    public function getQuantityTo(): ?float
    {
        return $this->container['quantityTo'];
    }

    /**
     * Sets quantityTo
     *
     * @param float|null $quantityTo The product quantity this price is applicable to
     *
     * @return $this
     */
    public function setQuantityTo(?float $quantityTo): static
    {
        if (is_null($quantityTo)) {
            array_push($this->openAPINullablesSetToNull, 'quantityTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantityTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantityTo'] = $quantityTo;

        return $this;
    }

    /**
     * Gets quantityToCalc
     *
     * @return float|null
     */
    public function getQuantityToCalc(): ?float
    {
        return $this->container['quantityToCalc'];
    }

    /**
     * Sets quantityToCalc
     *
     * @param float|null $quantityToCalc Quantity To Calculate
     *
     * @return $this
     */
    public function setQuantityToCalc(?float $quantityToCalc): static
    {
        if (is_null($quantityToCalc)) {
            array_push($this->openAPINullablesSetToNull, 'quantityToCalc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantityToCalc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantityToCalc'] = $quantityToCalc;

        return $this;
    }

    /**
     * Gets unitOfMeasureId
     *
     * @return string|null
     */
    public function getUnitOfMeasureId(): ?string
    {
        return $this->container['unitOfMeasureId'];
    }

    /**
     * Sets unitOfMeasureId
     *
     * @param string|null $unitOfMeasureId Unit of measure Id
     *
     * @return $this
     */
    public function setUnitOfMeasureId(?string $unitOfMeasureId): static
    {
        if (is_null($unitOfMeasureId)) {
            array_push($this->openAPINullablesSetToNull, 'unitOfMeasureId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitOfMeasureId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitOfMeasureId'] = $unitOfMeasureId;

        return $this;
    }

    /**
     * Gets productSkuId
     *
     * @return string|null
     */
    public function getProductSkuId(): ?string
    {
        return $this->container['productSkuId'];
    }

    /**
     * Sets productSkuId
     *
     * @param string|null $productSkuId Product SKU Id
     *
     * @return $this
     */
    public function setProductSkuId(?string $productSkuId): static
    {
        if (is_null($productSkuId)) {
            array_push($this->openAPINullablesSetToNull, 'productSkuId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productSkuId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productSkuId'] = $productSkuId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId(): ?string
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId Id of linked project.
     *
     * @return $this
     */
    public function setProjectId(?string $projectId): static
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets legalEntityId
     *
     * @return string|null
     */
    public function getLegalEntityId(): ?string
    {
        return $this->container['legalEntityId'];
    }

    /**
     * Sets legalEntityId
     *
     * @param string|null $legalEntityId Id of the linked legal entity
     *
     * @return $this
     */
    public function setLegalEntityId(?string $legalEntityId): static
    {
        if (is_null($legalEntityId)) {
            array_push($this->openAPINullablesSetToNull, 'legalEntityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legalEntityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legalEntityId'] = $legalEntityId;

        return $this;
    }

    /**
     * Gets priceRef
     *
     * @return string|null
     */
    public function getPriceRef(): ?string
    {
        return $this->container['priceRef'];
    }

    /**
     * Sets priceRef
     *
     * @param string|null $priceRef Product Sale Price Reference
     *
     * @return $this
     */
    public function setPriceRef(?string $priceRef): static
    {
        if (is_null($priceRef)) {
            array_push($this->openAPINullablesSetToNull, 'priceRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceRef'] = $priceRef;

        return $this;
    }

    /**
     * Gets productPriceBandId
     *
     * @return string|null
     */
    public function getProductPriceBandId(): ?string
    {
        return $this->container['productPriceBandId'];
    }

    /**
     * Sets productPriceBandId
     *
     * @param string|null $productPriceBandId Product Sale Price Band
     *
     * @return $this
     */
    public function setProductPriceBandId(?string $productPriceBandId): static
    {
        if (is_null($productPriceBandId)) {
            array_push($this->openAPINullablesSetToNull, 'productPriceBandId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productPriceBandId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productPriceBandId'] = $productPriceBandId;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return \DateTime|null
     */
    public function getLastModified(): ?\DateTime
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param \DateTime|null $lastModified Date and time the product Sale price was last modified.
     *
     * @return $this
     */
    public function setLastModified(?\DateTime $lastModified): static
    {
        if (is_null($lastModified)) {
            throw new InvalidArgumentException('non-nullable lastModified cannot be null');
        }
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return string|null
     */
    public function getLastModifiedBy(): ?string
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param string|null $lastModifiedBy The user who last modified the product Sale price.
     *
     * @return $this
     */
    public function setLastModifiedBy(?string $lastModifiedBy): static
    {
        if (is_null($lastModifiedBy)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifiedBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifiedBy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets resourceGroupId
     *
     * @return string|null
     */
    public function getResourceGroupId(): ?string
    {
        return $this->container['resourceGroupId'];
    }

    /**
     * Sets resourceGroupId
     *
     * @param string|null $resourceGroupId Resource Group Id
     *
     * @return $this
     */
    public function setResourceGroupId(?string $resourceGroupId): static
    {
        if (is_null($resourceGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'resourceGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resourceGroupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resourceGroupId'] = $resourceGroupId;

        return $this;
    }

    /**
     * Gets resourceId
     *
     * @return string|null
     */
    public function getResourceId(): ?string
    {
        return $this->container['resourceId'];
    }

    /**
     * Sets resourceId
     *
     * @param string|null $resourceId Resourec Id
     *
     * @return $this
     */
    public function setResourceId(?string $resourceId): static
    {
        if (is_null($resourceId)) {
            array_push($this->openAPINullablesSetToNull, 'resourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resourceId'] = $resourceId;

        return $this;
    }

    /**
     * Gets timesheetRateTypeId
     *
     * @return string|null
     */
    public function getTimesheetRateTypeId(): ?string
    {
        return $this->container['timesheetRateTypeId'];
    }

    /**
     * Sets timesheetRateTypeId
     *
     * @param string|null $timesheetRateTypeId Timesheet Rate Type Id
     *
     * @return $this
     */
    public function setTimesheetRateTypeId(?string $timesheetRateTypeId): static
    {
        if (is_null($timesheetRateTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'timesheetRateTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timesheetRateTypeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timesheetRateTypeId'] = $timesheetRateTypeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


