<?php
/**
 * ProductUpdate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.13.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * ProductUpdate Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProductUpdate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProductUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'description' => 'string',
        'productType' => 'string',
        'productGroupId' => 'string',
        'uomId' => 'string',
        'uomGroupId' => 'string',
        'legacyRef' => 'string',
        'ext' => 'array<string,mixed>',
        'purchase' => '\SynergiTech\Iplicit\Model\ProductPurchaseUpdate',
        'sale' => '\SynergiTech\Iplicit\Model\ProductSaleUpdate',
        'stock' => '\SynergiTech\Iplicit\Model\ProductStockUpdate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'description' => null,
        'productType' => null,
        'productGroupId' => null,
        'uomId' => null,
        'uomGroupId' => null,
        'legacyRef' => null,
        'ext' => null,
        'purchase' => null,
        'sale' => null,
        'stock' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'description' => true,
        'productType' => true,
        'productGroupId' => true,
        'uomId' => true,
        'uomGroupId' => true,
        'legacyRef' => true,
        'ext' => true,
        'purchase' => false,
        'sale' => false,
        'stock' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'description' => 'description',
        'productType' => 'productType',
        'productGroupId' => 'productGroupId',
        'uomId' => 'uomId',
        'uomGroupId' => 'uomGroupId',
        'legacyRef' => 'legacyRef',
        'ext' => 'ext',
        'purchase' => 'purchase',
        'sale' => 'sale',
        'stock' => 'stock'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'description' => 'setDescription',
        'productType' => 'setProductType',
        'productGroupId' => 'setProductGroupId',
        'uomId' => 'setUomId',
        'uomGroupId' => 'setUomGroupId',
        'legacyRef' => 'setLegacyRef',
        'ext' => 'setExt',
        'purchase' => 'setPurchase',
        'sale' => 'setSale',
        'stock' => 'setStock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'description' => 'getDescription',
        'productType' => 'getProductType',
        'productGroupId' => 'getProductGroupId',
        'uomId' => 'getUomId',
        'uomGroupId' => 'getUomGroupId',
        'legacyRef' => 'getLegacyRef',
        'ext' => 'getExt',
        'purchase' => 'getPurchase',
        'sale' => 'getSale',
        'stock' => 'getStock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('productGroupId', $data ?? [], null);
        $this->setIfExists('uomId', $data ?? [], null);
        $this->setIfExists('uomGroupId', $data ?? [], null);
        $this->setIfExists('legacyRef', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('purchase', $data ?? [], null);
        $this->setIfExists('sale', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['productType']) && (mb_strlen($this->container['productType']) > 1)) {
            $invalidProperties[] = "invalid value for 'productType', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['productGroupId']) && (mb_strlen($this->container['productGroupId']) > 50)) {
            $invalidProperties[] = "invalid value for 'productGroupId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['uomId']) && (mb_strlen($this->container['uomId']) > 50)) {
            $invalidProperties[] = "invalid value for 'uomId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['uomGroupId']) && (mb_strlen($this->container['uomGroupId']) > 50)) {
            $invalidProperties[] = "invalid value for 'uomGroupId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['legacyRef']) && (mb_strlen($this->container['legacyRef']) > 50)) {
            $invalidProperties[] = "invalid value for 'legacyRef', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The product description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 250)) {
            throw new InvalidArgumentException('invalid length for $description when calling ProductUpdate., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return string|null
     */
    public function getProductType(): ?string
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string|null $productType Optional, specifies if the product is a Goods (`G`), Services (`S`) or Other ('O') from a tax point of view.  Defaults from the *Product Group*, if defined.
     *
     * @return $this
     */
    public function setProductType(?string $productType): static
    {
        if (is_null($productType)) {
            array_push($this->openAPINullablesSetToNull, 'productType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productType) && (mb_strlen($productType) > 1)) {
            throw new InvalidArgumentException('invalid length for $productType when calling ProductUpdate., must be smaller than or equal to 1.');
        }

        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets productGroupId
     *
     * @return string|null
     */
    public function getProductGroupId(): ?string
    {
        return $this->container['productGroupId'];
    }

    /**
     * Sets productGroupId
     *
     * @param string|null $productGroupId Optional *Product Group* id or code. It can default the other properties below.
     *
     * @return $this
     */
    public function setProductGroupId(?string $productGroupId): static
    {
        if (is_null($productGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'productGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productGroupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($productGroupId) && (mb_strlen($productGroupId) > 50)) {
            throw new InvalidArgumentException('invalid length for $productGroupId when calling ProductUpdate., must be smaller than or equal to 50.');
        }

        $this->container['productGroupId'] = $productGroupId;

        return $this;
    }

    /**
     * Gets uomId
     *
     * @return string|null
     */
    public function getUomId(): ?string
    {
        return $this->container['uomId'];
    }

    /**
     * Sets uomId
     *
     * @param string|null $uomId Unit of measure (id or code).  See catalog `Unit` for possible values.  Will be defaulted from *Product Group* or environment default.
     *
     * @return $this
     */
    public function setUomId(?string $uomId): static
    {
        if (is_null($uomId)) {
            array_push($this->openAPINullablesSetToNull, 'uomId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uomId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uomId) && (mb_strlen($uomId) > 50)) {
            throw new InvalidArgumentException('invalid length for $uomId when calling ProductUpdate., must be smaller than or equal to 50.');
        }

        $this->container['uomId'] = $uomId;

        return $this;
    }

    /**
     * Gets uomGroupId
     *
     * @return string|null
     */
    public function getUomGroupId(): ?string
    {
        return $this->container['uomGroupId'];
    }

    /**
     * Sets uomGroupId
     *
     * @param string|null $uomGroupId Unit of measure group (id or code).  See catalog `UnitGroup` for possible values.  Will be defaulted from *Product Group* or environment default.
     *
     * @return $this
     */
    public function setUomGroupId(?string $uomGroupId): static
    {
        if (is_null($uomGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'uomGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uomGroupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uomGroupId) && (mb_strlen($uomGroupId) > 50)) {
            throw new InvalidArgumentException('invalid length for $uomGroupId when calling ProductUpdate., must be smaller than or equal to 50.');
        }

        $this->container['uomGroupId'] = $uomGroupId;

        return $this;
    }

    /**
     * Gets legacyRef
     *
     * @return string|null
     */
    public function getLegacyRef(): ?string
    {
        return $this->container['legacyRef'];
    }

    /**
     * Sets legacyRef
     *
     * @param string|null $legacyRef An optional reference
     *
     * @return $this
     */
    public function setLegacyRef(?string $legacyRef): static
    {
        if (is_null($legacyRef)) {
            array_push($this->openAPINullablesSetToNull, 'legacyRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($legacyRef) && (mb_strlen($legacyRef) > 50)) {
            throw new InvalidArgumentException('invalid length for $legacyRef when calling ProductUpdate., must be smaller than or equal to 50.');
        }

        $this->container['legacyRef'] = $legacyRef;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return array<string,mixed>|null
     */
    public function getExt(): ?array
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,mixed>|null $ext The product custom fields
     *
     * @return $this
     */
    public function setExt(?array $ext): static
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets purchase
     *
     * @return \SynergiTech\Iplicit\Model\ProductPurchaseUpdate|null
     */
    public function getPurchase(): ?\SynergiTech\Iplicit\Model\ProductPurchaseUpdate
    {
        return $this->container['purchase'];
    }

    /**
     * Sets purchase
     *
     * @param \SynergiTech\Iplicit\Model\ProductPurchaseUpdate|null $purchase purchase
     *
     * @return $this
     */
    public function setPurchase(?\SynergiTech\Iplicit\Model\ProductPurchaseUpdate $purchase): static
    {
        if (is_null($purchase)) {
            throw new InvalidArgumentException('non-nullable purchase cannot be null');
        }
        $this->container['purchase'] = $purchase;

        return $this;
    }

    /**
     * Gets sale
     *
     * @return \SynergiTech\Iplicit\Model\ProductSaleUpdate|null
     */
    public function getSale(): ?\SynergiTech\Iplicit\Model\ProductSaleUpdate
    {
        return $this->container['sale'];
    }

    /**
     * Sets sale
     *
     * @param \SynergiTech\Iplicit\Model\ProductSaleUpdate|null $sale sale
     *
     * @return $this
     */
    public function setSale(?\SynergiTech\Iplicit\Model\ProductSaleUpdate $sale): static
    {
        if (is_null($sale)) {
            throw new InvalidArgumentException('non-nullable sale cannot be null');
        }
        $this->container['sale'] = $sale;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return \SynergiTech\Iplicit\Model\ProductStockUpdate|null
     */
    public function getStock(): ?\SynergiTech\Iplicit\Model\ProductStockUpdate
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param \SynergiTech\Iplicit\Model\ProductStockUpdate|null $stock stock
     *
     * @return $this
     */
    public function setStock(?\SynergiTech\Iplicit\Model\ProductStockUpdate $stock): static
    {
        if (is_null($stock)) {
            throw new InvalidArgumentException('non-nullable stock cannot be null');
        }
        $this->container['stock'] = $stock;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


