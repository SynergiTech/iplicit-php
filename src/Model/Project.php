<?php
/**
 * Project
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iplicit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Iplicit\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Iplicit\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @package  SynergiTech\Iplicit
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Project implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'code' => 'string',
        'intRef' => 'string',
        'description' => 'string',
        'dateFrom' => '\DateTime',
        'dateTo' => '\DateTime',
        'projectGroupId' => 'string',
        'legalEntityId' => 'string',
        'contactAccountId' => 'string',
        'responsibleResourceId' => 'string',
        'lastModified' => '\DateTime',
        'lastModifiedBy' => 'string',
        'allowTimesheets' => 'bool',
        'allowTasks' => 'bool',
        'isActive' => 'bool',
        'isParent' => 'bool',
        'ext' => 'array<string,mixed>',
        'address' => '\SynergiTech\Iplicit\Model\ProjectAddress',
        'milestones' => '\SynergiTech\Iplicit\Model\ProjectMilestone[]',
        'subProjects' => '\SynergiTech\Iplicit\Model\ProjectChild[]',
        'availability' => '\SynergiTech\Iplicit\Model\ProjectAvailability[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'code' => null,
        'intRef' => null,
        'description' => null,
        'dateFrom' => 'date-time',
        'dateTo' => 'date-time',
        'projectGroupId' => 'uuid',
        'legalEntityId' => 'uuid',
        'contactAccountId' => 'uuid',
        'responsibleResourceId' => 'uuid',
        'lastModified' => 'date-time',
        'lastModifiedBy' => null,
        'allowTimesheets' => null,
        'allowTasks' => null,
        'isActive' => null,
        'isParent' => null,
        'ext' => null,
        'address' => null,
        'milestones' => null,
        'subProjects' => null,
        'availability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'code' => true,
        'intRef' => true,
        'description' => true,
        'dateFrom' => true,
        'dateTo' => true,
        'projectGroupId' => false,
        'legalEntityId' => true,
        'contactAccountId' => true,
        'responsibleResourceId' => true,
        'lastModified' => true,
        'lastModifiedBy' => true,
        'allowTimesheets' => false,
        'allowTasks' => false,
        'isActive' => false,
        'isParent' => false,
        'ext' => true,
        'address' => false,
        'milestones' => true,
        'subProjects' => true,
        'availability' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'intRef' => 'intRef',
        'description' => 'description',
        'dateFrom' => 'dateFrom',
        'dateTo' => 'dateTo',
        'projectGroupId' => 'projectGroupId',
        'legalEntityId' => 'legalEntityId',
        'contactAccountId' => 'contactAccountId',
        'responsibleResourceId' => 'responsibleResourceId',
        'lastModified' => 'lastModified',
        'lastModifiedBy' => 'lastModifiedBy',
        'allowTimesheets' => 'allowTimesheets',
        'allowTasks' => 'allowTasks',
        'isActive' => 'isActive',
        'isParent' => 'isParent',
        'ext' => 'ext',
        'address' => 'address',
        'milestones' => 'milestones',
        'subProjects' => 'subProjects',
        'availability' => 'availability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'intRef' => 'setIntRef',
        'description' => 'setDescription',
        'dateFrom' => 'setDateFrom',
        'dateTo' => 'setDateTo',
        'projectGroupId' => 'setProjectGroupId',
        'legalEntityId' => 'setLegalEntityId',
        'contactAccountId' => 'setContactAccountId',
        'responsibleResourceId' => 'setResponsibleResourceId',
        'lastModified' => 'setLastModified',
        'lastModifiedBy' => 'setLastModifiedBy',
        'allowTimesheets' => 'setAllowTimesheets',
        'allowTasks' => 'setAllowTasks',
        'isActive' => 'setIsActive',
        'isParent' => 'setIsParent',
        'ext' => 'setExt',
        'address' => 'setAddress',
        'milestones' => 'setMilestones',
        'subProjects' => 'setSubProjects',
        'availability' => 'setAvailability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'intRef' => 'getIntRef',
        'description' => 'getDescription',
        'dateFrom' => 'getDateFrom',
        'dateTo' => 'getDateTo',
        'projectGroupId' => 'getProjectGroupId',
        'legalEntityId' => 'getLegalEntityId',
        'contactAccountId' => 'getContactAccountId',
        'responsibleResourceId' => 'getResponsibleResourceId',
        'lastModified' => 'getLastModified',
        'lastModifiedBy' => 'getLastModifiedBy',
        'allowTimesheets' => 'getAllowTimesheets',
        'allowTasks' => 'getAllowTasks',
        'isActive' => 'getIsActive',
        'isParent' => 'getIsParent',
        'ext' => 'getExt',
        'address' => 'getAddress',
        'milestones' => 'getMilestones',
        'subProjects' => 'getSubProjects',
        'availability' => 'getAvailability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('intRef', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dateFrom', $data ?? [], null);
        $this->setIfExists('dateTo', $data ?? [], null);
        $this->setIfExists('projectGroupId', $data ?? [], null);
        $this->setIfExists('legalEntityId', $data ?? [], null);
        $this->setIfExists('contactAccountId', $data ?? [], null);
        $this->setIfExists('responsibleResourceId', $data ?? [], null);
        $this->setIfExists('lastModified', $data ?? [], null);
        $this->setIfExists('lastModifiedBy', $data ?? [], null);
        $this->setIfExists('allowTimesheets', $data ?? [], null);
        $this->setIfExists('allowTasks', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('isParent', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('milestones', $data ?? [], null);
        $this->setIfExists('subProjects', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The project unique id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode(): ?string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The project code
     *
     * @return $this
     */
    public function setCode(?string $code): static
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets intRef
     *
     * @return string|null
     */
    public function getIntRef(): ?string
    {
        return $this->container['intRef'];
    }

    /**
     * Sets intRef
     *
     * @param string|null $intRef Optional interface reference. If provided, it must be unique. <a href=\"https://docs.iplicit.com/dev/guide/identifiers/index.html\">Learn more</a>
     *
     * @return $this
     */
    public function setIntRef(?string $intRef): static
    {
        if (is_null($intRef)) {
            array_push($this->openAPINullablesSetToNull, 'intRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intRef'] = $intRef;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The project description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dateFrom
     *
     * @return \DateTime|null
     */
    public function getDateFrom(): ?\DateTime
    {
        return $this->container['dateFrom'];
    }

    /**
     * Sets dateFrom
     *
     * @param \DateTime|null $dateFrom The project date from
     *
     * @return $this
     */
    public function setDateFrom(?\DateTime $dateFrom): static
    {
        if (is_null($dateFrom)) {
            array_push($this->openAPINullablesSetToNull, 'dateFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateFrom'] = $dateFrom;

        return $this;
    }

    /**
     * Gets dateTo
     *
     * @return \DateTime|null
     */
    public function getDateTo(): ?\DateTime
    {
        return $this->container['dateTo'];
    }

    /**
     * Sets dateTo
     *
     * @param \DateTime|null $dateTo The project date to
     *
     * @return $this
     */
    public function setDateTo(?\DateTime $dateTo): static
    {
        if (is_null($dateTo)) {
            array_push($this->openAPINullablesSetToNull, 'dateTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateTo'] = $dateTo;

        return $this;
    }

    /**
     * Gets projectGroupId
     *
     * @return string|null
     */
    public function getProjectGroupId(): ?string
    {
        return $this->container['projectGroupId'];
    }

    /**
     * Sets projectGroupId
     *
     * @param string|null $projectGroupId The project project group id
     *
     * @return $this
     */
    public function setProjectGroupId(?string $projectGroupId): static
    {
        if (is_null($projectGroupId)) {
            throw new InvalidArgumentException('non-nullable projectGroupId cannot be null');
        }
        $this->container['projectGroupId'] = $projectGroupId;

        return $this;
    }

    /**
     * Gets legalEntityId
     *
     * @return string|null
     */
    public function getLegalEntityId(): ?string
    {
        return $this->container['legalEntityId'];
    }

    /**
     * Sets legalEntityId
     *
     * @param string|null $legalEntityId The project legal entity id
     *
     * @return $this
     */
    public function setLegalEntityId(?string $legalEntityId): static
    {
        if (is_null($legalEntityId)) {
            array_push($this->openAPINullablesSetToNull, 'legalEntityId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legalEntityId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legalEntityId'] = $legalEntityId;

        return $this;
    }

    /**
     * Gets contactAccountId
     *
     * @return string|null
     */
    public function getContactAccountId(): ?string
    {
        return $this->container['contactAccountId'];
    }

    /**
     * Sets contactAccountId
     *
     * @param string|null $contactAccountId The project contact account id
     *
     * @return $this
     */
    public function setContactAccountId(?string $contactAccountId): static
    {
        if (is_null($contactAccountId)) {
            array_push($this->openAPINullablesSetToNull, 'contactAccountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactAccountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactAccountId'] = $contactAccountId;

        return $this;
    }

    /**
     * Gets responsibleResourceId
     *
     * @return string|null
     */
    public function getResponsibleResourceId(): ?string
    {
        return $this->container['responsibleResourceId'];
    }

    /**
     * Sets responsibleResourceId
     *
     * @param string|null $responsibleResourceId The project responsible resource id
     *
     * @return $this
     */
    public function setResponsibleResourceId(?string $responsibleResourceId): static
    {
        if (is_null($responsibleResourceId)) {
            array_push($this->openAPINullablesSetToNull, 'responsibleResourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsibleResourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsibleResourceId'] = $responsibleResourceId;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return \DateTime|null
     */
    public function getLastModified(): ?\DateTime
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param \DateTime|null $lastModified lastModified
     *
     * @return $this
     */
    public function setLastModified(?\DateTime $lastModified): static
    {
        if (is_null($lastModified)) {
            array_push($this->openAPINullablesSetToNull, 'lastModified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return string|null
     */
    public function getLastModifiedBy(): ?string
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param string|null $lastModifiedBy The user that last modified this item. See `UserAccount` catalog.
     *
     * @return $this
     */
    public function setLastModifiedBy(?string $lastModifiedBy): static
    {
        if (is_null($lastModifiedBy)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifiedBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifiedBy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets allowTimesheets
     *
     * @return bool|null
     */
    public function getAllowTimesheets(): ?bool
    {
        return $this->container['allowTimesheets'];
    }

    /**
     * Sets allowTimesheets
     *
     * @param bool|null $allowTimesheets The project allow timesheets flag
     *
     * @return $this
     */
    public function setAllowTimesheets(?bool $allowTimesheets): static
    {
        if (is_null($allowTimesheets)) {
            throw new InvalidArgumentException('non-nullable allowTimesheets cannot be null');
        }
        $this->container['allowTimesheets'] = $allowTimesheets;

        return $this;
    }

    /**
     * Gets allowTasks
     *
     * @return bool|null
     */
    public function getAllowTasks(): ?bool
    {
        return $this->container['allowTasks'];
    }

    /**
     * Sets allowTasks
     *
     * @param bool|null $allowTasks The project allow tasks flag
     *
     * @return $this
     */
    public function setAllowTasks(?bool $allowTasks): static
    {
        if (is_null($allowTasks)) {
            throw new InvalidArgumentException('non-nullable allowTasks cannot be null');
        }
        $this->container['allowTasks'] = $allowTasks;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive Active or locked (soft delete)
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets isParent
     *
     * @return bool|null
     */
    public function getIsParent(): ?bool
    {
        return $this->container['isParent'];
    }

    /**
     * Sets isParent
     *
     * @param bool|null $isParent The project is parent flag
     *
     * @return $this
     */
    public function setIsParent(?bool $isParent): static
    {
        if (is_null($isParent)) {
            throw new InvalidArgumentException('non-nullable isParent cannot be null');
        }
        $this->container['isParent'] = $isParent;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return array<string,mixed>|null
     */
    public function getExt(): ?array
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,mixed>|null $ext The project additional fields
     *
     * @return $this
     */
    public function setExt(?array $ext): static
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \SynergiTech\Iplicit\Model\ProjectAddress|null
     */
    public function getAddress(): ?\SynergiTech\Iplicit\Model\ProjectAddress
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Iplicit\Model\ProjectAddress|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Iplicit\Model\ProjectAddress $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets milestones
     *
     * @return \SynergiTech\Iplicit\Model\ProjectMilestone[]|null
     */
    public function getMilestones(): ?array
    {
        return $this->container['milestones'];
    }

    /**
     * Sets milestones
     *
     * @param \SynergiTech\Iplicit\Model\ProjectMilestone[]|null $milestones The project milestones
     *
     * @return $this
     */
    public function setMilestones(?array $milestones): static
    {
        if (is_null($milestones)) {
            array_push($this->openAPINullablesSetToNull, 'milestones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestones', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestones'] = $milestones;

        return $this;
    }

    /**
     * Gets subProjects
     *
     * @return \SynergiTech\Iplicit\Model\ProjectChild[]|null
     */
    public function getSubProjects(): ?array
    {
        return $this->container['subProjects'];
    }

    /**
     * Sets subProjects
     *
     * @param \SynergiTech\Iplicit\Model\ProjectChild[]|null $subProjects The project sub projects
     *
     * @return $this
     */
    public function setSubProjects(?array $subProjects): static
    {
        if (is_null($subProjects)) {
            array_push($this->openAPINullablesSetToNull, 'subProjects');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subProjects', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subProjects'] = $subProjects;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \SynergiTech\Iplicit\Model\ProjectAvailability[]|null
     */
    public function getAvailability(): ?array
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \SynergiTech\Iplicit\Model\ProjectAvailability[]|null $availability The project availabilities
     *
     * @return $this
     */
    public function setAvailability(?array $availability): static
    {
        if (is_null($availability)) {
            array_push($this->openAPINullablesSetToNull, 'availability');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availability', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availability'] = $availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


